
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d68  08000d70  00010d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d68  08000d68  00010d70  2**0
                  CONTENTS
  4 .ARM          00000000  08000d68  08000d68  00010d70  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d68  08000d70  00010d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d68  08000d68  00010d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d6c  08000d6c  00010d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d70  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d70  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010d70  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000125a  00000000  00000000  00010d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000459  00000000  00000000  00011ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  00012450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00012590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000017c7  00000000  00000000  00012698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001101  00000000  00000000  00013e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006587  00000000  00000000  00014f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b4e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000450  00000000  00000000  0001b564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d50 	.word	0x08000d50

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d50 	.word	0x08000d50

080001e8 <SPI2_Inits>:
 * 
 * Alternate Functionality mode = 5; Needed for configuring the I/O pins for alternate functionality 
 * 
 **/

void SPI2_Inits(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0


    // Enable clock access to the peripheral before making any configurations. 
    SPI2_PERIPH_CLOCK_EN(); 
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <SPI2_Inits+0x44>)
 80001f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f2:	4a0e      	ldr	r2, [pc, #56]	; (800022c <SPI2_Inits+0x44>)
 80001f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001f8:	6413      	str	r3, [r2, #64]	; 0x40

    // Create SPI Handle 
    SPI_Handle_t SPI2Handle; 

    // Set BaseAddress to SPI2 
    SPI2Handle.pSPIx_BASEADDR = SPI2;
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <SPI2_Inits+0x48>)
 80001fc:	607b      	str	r3, [r7, #4]

    // Configure the SPI2 Peripheral as desired. 
    SPI2Handle.SPIConfig.DeviceMode = SPI_IN_MASTER_MODE;  
 80001fe:	2301      	movs	r3, #1
 8000200:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.BusConfig = SPI_IN_FULL_DUPLEX_MODE; 
 8000202:	2300      	movs	r3, #0
 8000204:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.DataFrameFormat = SPI_DATAFRAME_8BITS; 
 8000206:	2300      	movs	r3, #0
 8000208:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.ClockPolarity = SPI_SCLK_LOW; 
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.ClockPhase = SPI_DATA_SAMPLED_ON_LEADING_EDGE; 
 800020e:	2300      	movs	r3, #0
 8000210:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SclkSpeed = SPI_PERIPHERAL_CLOCK_DIV8; // Serial Clock is at 2 MHz, which means Prescaler = 8, System Clock source is Internal RC oscillator, producing 16MHz
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SlaveManagementType = SPI_SOFTWARE_SLAVE_MANAGEMENT_DI; // 1 slave, so we can disable software slave management, i.e. enable hardware slave management
 8000216:	2300      	movs	r3, #0
 8000218:	73bb      	strb	r3, [r7, #14]

    // Call the Init API to initialize the configured SPI2 peripheral.
    SPI_Init(&SPI2Handle);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fc54 	bl	8000aca <SPI_Init>

}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40003800 	.word	0x40003800

08000234 <SPI2_GPIOInits>:
void SPI2_GPIOInits(){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

	// Enable clock access to GPIOB Port before making any configurations. 
	GPIOB_PERIPH_CLOCK_EN(); 
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <SPI2_GPIOInits+0x64>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a16      	ldr	r2, [pc, #88]	; (8000298 <SPI2_GPIOInits+0x64>)
 8000240:	f043 0302 	orr.w	r3, r3, #2
 8000244:	6313      	str	r3, [r2, #48]	; 0x30

	// Create a GPIO handle, which will hold the base address and Pin configurations 
	GPIO_Handle_t SPIPins; 
	SPIPins.pGPIOx_BASEADDR = GPIOB; 
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <SPI2_GPIOInits+0x68>)
 8000248:	607b      	str	r3, [r7, #4]

	// Set Pin Configurations for each I/O Pin
	SPIPins.PinConfig.PinMode = GPIO_PIN_ALTFUNC_MODE; 
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	SPIPins.PinConfig.PinAltFunMode = 5; 
 800024e:	2305      	movs	r3, #5
 8000250:	737b      	strb	r3, [r7, #13]
	SPIPins.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; // Output Drain Type is required for I2C -> specification insists.
 8000252:	2300      	movs	r3, #0
 8000254:	733b      	strb	r3, [r7, #12]
	SPIPins.PinConfig.PinPuPdControl = GPIO_PIN_PULL_UP;  // Don't need PU/PD for Push-pull output configuration
 8000256:	2301      	movs	r3, #1
 8000258:	72fb      	strb	r3, [r7, #11]
	SPIPins.PinConfig.PinSpeed = GPIO_PIN_HIGH_SPEED;  // Doesn't matter, can set to any speed
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	// Set Pin number and call the GPIOInit to initialize each of the PBx pins.

	// SPI2_NSS
	SPIPins.PinConfig.PinNumber = GPIO_PIN_12; 
 800025e:	230c      	movs	r3, #12
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fa6d 	bl	8000744 <GPIO_Init>

	// SPI2_SCLK 
	SPIPins.PinConfig.PinNumber = GPIO_PIN_13; 
 800026a:	230d      	movs	r3, #13
 800026c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fa67 	bl	8000744 <GPIO_Init>

	// SPI2_MISO
	SPIPins.PinConfig.PinNumber = GPIO_PIN_14; 
 8000276:	230e      	movs	r3, #14
 8000278:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa61 	bl	8000744 <GPIO_Init>
	
	// SPI2_MOSI
	SPIPins.PinConfig.PinNumber = GPIO_PIN_15;
 8000282:	230f      	movs	r3, #15
 8000284:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fa5b 	bl	8000744 <GPIO_Init>


}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020400 	.word	0x40020400

080002a0 <GPIO_ButtonInits>:

void GPIO_ButtonInits(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
    	/*   The following statements are for configuring the user button PA0 as an input pin. */

	GPIO_Handle_t gpio_user_button; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.
	gpio_user_button.pGPIOx_BASEADDR = GPIOA; 	// Set the base-address of the Port you're configuring - User button is connected to Port A, Pin 0.
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <GPIO_ButtonInits+0x34>)
 80002a8:	607b      	str	r3, [r7, #4]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 0 in input mode.
	gpio_user_button.PinConfig.PinNumber = GPIO_PIN_0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	gpio_user_button.PinConfig.PinMode = GPIO_PIN_INPUT_MODE; 		 // Set the pin in Output mode.
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	//gpio_push_pull.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; //PA0 is being configured as an input pin, this is irrelevant to it.
	gpio_user_button.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;      // Stm32f407-discovery schematic shows an external pull-down resistor, so don't need to enable internal pull-down resistor.
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]
	gpio_user_button.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;   // Speed doesn't really matter
 80002b6:	2301      	movs	r3, #1
 80002b8:	72bb      	strb	r3, [r7, #10]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOA, ENABLE);
 80002ba:	2101      	movs	r1, #1
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <GPIO_ButtonInits+0x34>)
 80002be:	f000 f957 	bl	8000570 <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_user_button);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fa3d 	bl	8000744 <GPIO_Init>

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020000 	.word	0x40020000

080002d8 <Delay>:

void Delay()
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
    int i = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
    for (; i < 500000 / 2; i++);
 80002e2:	e002      	b.n	80002ea <Delay+0x12>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <Delay+0x24>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	ddf8      	ble.n	80002e4 <Delay+0xc>
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	0003d08f 	.word	0x0003d08f

08000300 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackByte){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]

    if(ackByte == ACK_CODE){
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2bf5      	cmp	r3, #245	; 0xf5
 800030e:	d101      	bne.n	8000314 <SPI_VerifyResponse+0x14>
        return 1;
 8000310:	2301      	movs	r3, #1
 8000312:	e000      	b.n	8000316 <SPI_VerifyResponse+0x16>
    }
    return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <main>:
 *        6. Wait till Button pressed again. 
 *        7. Repeat steps 3-5. 
 * 
 */ 

int main(){
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0

    //              ++ INITIALIZE THE PERIPHERALS 

            // 1. Call Function to configure the I/O pin PA0 as button 
            GPIO_ButtonInits();
 8000326:	f7ff ffbb 	bl	80002a0 <GPIO_ButtonInits>

            // 2. Call Function to configure the I/O pins above to be used as SPI2 pin. 
            SPI2_GPIOInits();
 800032a:	f7ff ff83 	bl	8000234 <SPI2_GPIOInits>

            // 3. Call Function to Configure the SPI2 Peripheral 
            SPI2_Inits();
 800032e:	f7ff ff5b 	bl	80001e8 <SPI2_Inits>

            // 4. Set SSOE pin to enable Slave Select Output, which will tie Peripheral Enable bit to the NSS output
           // i.e. when SPI enabled, NSS will be driven low to initiate communication with the slave --> Only if the SPI is in master mode, which is the case here.

            SPI_SSOEConfig(SPI2, ENABLE);
 8000332:	2101      	movs	r1, #1
 8000334:	4877      	ldr	r0, [pc, #476]	; (8000514 <main+0x1f4>)
 8000336:	f000 fc49 	bl	8000bcc <SPI_SSOEConfig>

    //              -- INITIALIZE THE PERIPHERALS 

    uint8_t dummy_read; 
    uint8_t dummy_write = 0xFF; 
 800033a:	23ff      	movs	r3, #255	; 0xff
 800033c:	73bb      	strb	r3, [r7, #14]

    while(1){

        // ++ First Command - Turn ON LED
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 800033e:	bf00      	nop
 8000340:	2100      	movs	r1, #0
 8000342:	4875      	ldr	r0, [pc, #468]	; (8000518 <main+0x1f8>)
 8000344:	f000 fbac 	bl	8000aa0 <GPIO_ReadFromInputPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0f8      	beq.n	8000340 <main+0x20>

                // To avoid Button de-bouncing, add software delay
                Delay();
 800034e:	f7ff ffc3 	bl	80002d8 <Delay>

                // Enable SPI2
                SPI_PeripheralControl(SPI2, ENABLE); 
 8000352:	2101      	movs	r1, #1
 8000354:	486f      	ldr	r0, [pc, #444]	; (8000514 <main+0x1f4>)
 8000356:	f000 fc1b 	bl	8000b90 <SPI_PeripheralControl>

                // Send LED Control Command 
                // CMD_LED_CTRL  <Pin number> <Value>
                uint8_t command = COMMAND_LED_CTRL; 
 800035a:	2350      	movs	r3, #80	; 0x50
 800035c:	71fb      	strb	r3, [r7, #7]
                
                // Send LED command first
                SPI_SendData(SPI2, &command, 1);
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	2201      	movs	r2, #1
 8000362:	4619      	mov	r1, r3
 8000364:	486b      	ldr	r0, [pc, #428]	; (8000514 <main+0x1f4>)
 8000366:	f000 fc62 	bl	8000c2e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 800036a:	f107 030f 	add.w	r3, r7, #15
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	4868      	ldr	r0, [pc, #416]	; (8000514 <main+0x1f4>)
 8000374:	f000 fc91 	bl	8000c9a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 8000378:	f107 030e 	add.w	r3, r7, #14
 800037c:	2201      	movs	r2, #1
 800037e:	4619      	mov	r1, r3
 8000380:	4864      	ldr	r0, [pc, #400]	; (8000514 <main+0x1f4>)
 8000382:	f000 fc54 	bl	8000c2e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000386:	f107 030d 	add.w	r3, r7, #13
 800038a:	2201      	movs	r2, #1
 800038c:	4619      	mov	r1, r3
 800038e:	4861      	ldr	r0, [pc, #388]	; (8000514 <main+0x1f4>)
 8000390:	f000 fc83 	bl	8000c9a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 

                if(SPI_VerifyResponse(slave_response)){
 8000394:	7b7b      	ldrb	r3, [r7, #13]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ffb2 	bl	8000300 <SPI_VerifyResponse>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d011      	beq.n	80003c6 <main+0xa6>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument 1 is Pin number
 80003a2:	2309      	movs	r3, #9
 80003a4:	723b      	strb	r3, [r7, #8]
                    arguments[1] = LED_ON;  //  Turn LED on
 80003a6:	2301      	movs	r3, #1
 80003a8:	727b      	strb	r3, [r7, #9]

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 2); // '2' because we're sending 2 arguments of 8 bits each.
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2202      	movs	r2, #2
 80003b0:	4619      	mov	r1, r3
 80003b2:	4858      	ldr	r0, [pc, #352]	; (8000514 <main+0x1f4>)
 80003b4:	f000 fc3b 	bl	8000c2e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 

                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 80003b8:	f107 030f 	add.w	r3, r7, #15
 80003bc:	2201      	movs	r2, #1
 80003be:	4619      	mov	r1, r3
 80003c0:	4854      	ldr	r0, [pc, #336]	; (8000514 <main+0x1f4>)
 80003c2:	f000 fc6a 	bl	8000c9a <SPI_ReceiveData>
                 *  	Connect A0 -> 5 V, Read the value returned by Arduino, should be 255
                 *  	Connect A0 -> 3.3 V, Read the value returned by Arduino, should be less than 255 but greater than 128
                 */

                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 80003c6:	bf00      	nop
 80003c8:	2100      	movs	r1, #0
 80003ca:	4853      	ldr	r0, [pc, #332]	; (8000518 <main+0x1f8>)
 80003cc:	f000 fb68 	bl	8000aa0 <GPIO_ReadFromInputPin>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f8      	beq.n	80003c8 <main+0xa8>

                // To avoid Button de-bouncing, add software delay
                Delay();
 80003d6:	f7ff ff7f 	bl	80002d8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_CTRL  <Analog Pin number> 
                command = COMMAND_SENSOR_READ; 
 80003da:	2351      	movs	r3, #81	; 0x51
 80003dc:	71fb      	strb	r3, [r7, #7]
                
                // Send Sensor Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	484b      	ldr	r0, [pc, #300]	; (8000514 <main+0x1f4>)
 80003e6:	f000 fc22 	bl	8000c2e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003ea:	f107 030f 	add.w	r3, r7, #15
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	4848      	ldr	r0, [pc, #288]	; (8000514 <main+0x1f4>)
 80003f4:	f000 fc51 	bl	8000c9a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80003f8:	f107 030e 	add.w	r3, r7, #14
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	4844      	ldr	r0, [pc, #272]	; (8000514 <main+0x1f4>)
 8000402:	f000 fc14 	bl	8000c2e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	4841      	ldr	r0, [pc, #260]	; (8000514 <main+0x1f4>)
 8000410:	f000 fc43 	bl	8000c9a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 8000414:	7b7b      	ldrb	r3, [r7, #13]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff72 	bl	8000300 <SPI_VerifyResponse>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d01f      	beq.n	8000462 <main+0x142>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = ANALOG_PIN0; // Argument is Analog Pin number
 8000422:	2300      	movs	r3, #0
 8000424:	723b      	strb	r3, [r7, #8]

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4839      	ldr	r0, [pc, #228]	; (8000514 <main+0x1f4>)
 8000430:	f000 fbfd 	bl	8000c2e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 8000434:	f107 030f 	add.w	r3, r7, #15
 8000438:	2201      	movs	r2, #1
 800043a:	4619      	mov	r1, r3
 800043c:	4835      	ldr	r0, [pc, #212]	; (8000514 <main+0x1f4>)
 800043e:	f000 fc2c 	bl	8000c9a <SPI_ReceiveData>

                    // Create Delay to allow Arduino ADC to convert the Analog input to Digital value between 0-255
                    Delay();
 8000442:	f7ff ff49 	bl	80002d8 <Delay>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 8000446:	f107 030e 	add.w	r3, r7, #14
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	4831      	ldr	r0, [pc, #196]	; (8000514 <main+0x1f4>)
 8000450:	f000 fbed 	bl	8000c2e <SPI_SendData>

                    // Read Slave response - Which should be an 8-bit value between 0-255 corresponding to the voltage at pin A0 - which is used as the Sensor Input
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000454:	f107 030d 	add.w	r3, r7, #13
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	482d      	ldr	r0, [pc, #180]	; (8000514 <main+0x1f4>)
 800045e:	f000 fc1c 	bl	8000c9a <SPI_ReceiveData>
                }
        // -- Second Command - Read Sensor Value 

        // ++ Third Command - LED Read
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000462:	bf00      	nop
 8000464:	2100      	movs	r1, #0
 8000466:	482c      	ldr	r0, [pc, #176]	; (8000518 <main+0x1f8>)
 8000468:	f000 fb1a 	bl	8000aa0 <GPIO_ReadFromInputPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <main+0x144>

                // To avoid Button de-bouncing, add software delay
                Delay();
 8000472:	f7ff ff31 	bl	80002d8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_READ  <Pin number> 
                command = COMMAND_LED_READ; 
 8000476:	2352      	movs	r3, #82	; 0x52
 8000478:	71fb      	strb	r3, [r7, #7]
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	4824      	ldr	r0, [pc, #144]	; (8000514 <main+0x1f4>)
 8000482:	f000 fbd4 	bl	8000c2e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000486:	f107 030f 	add.w	r3, r7, #15
 800048a:	2201      	movs	r2, #1
 800048c:	4619      	mov	r1, r3
 800048e:	4821      	ldr	r0, [pc, #132]	; (8000514 <main+0x1f4>)
 8000490:	f000 fc03 	bl	8000c9a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 8000494:	f107 030e 	add.w	r3, r7, #14
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	481d      	ldr	r0, [pc, #116]	; (8000514 <main+0x1f4>)
 800049e:	f000 fbc6 	bl	8000c2e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 80004a2:	f107 030d 	add.w	r3, r7, #13
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	481a      	ldr	r0, [pc, #104]	; (8000514 <main+0x1f4>)
 80004ac:	f000 fbf5 	bl	8000c9a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 80004b0:	7b7b      	ldrb	r3, [r7, #13]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ff24 	bl	8000300 <SPI_VerifyResponse>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d01d      	beq.n	80004fa <main+0x1da>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument is LED Pin
 80004be:	2309      	movs	r3, #9
 80004c0:	723b      	strb	r3, [r7, #8]

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	4812      	ldr	r0, [pc, #72]	; (8000514 <main+0x1f4>)
 80004cc:	f000 fbaf 	bl	8000c2e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 80004d0:	f107 030f 	add.w	r3, r7, #15
 80004d4:	2201      	movs	r2, #1
 80004d6:	4619      	mov	r1, r3
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <main+0x1f4>)
 80004da:	f000 fbde 	bl	8000c9a <SPI_ReceiveData>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 80004de:	f107 030e 	add.w	r3, r7, #14
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x1f4>)
 80004e8:	f000 fba1 	bl	8000c2e <SPI_SendData>

                    // Read Slave response - Which should be either a '1' or '0' --> Will read '1' because initially we turn the LED on.
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 80004ec:	f107 030d 	add.w	r3, r7, #13
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x1f4>)
 80004f6:	f000 fbd0 	bl	8000c9a <SPI_ReceiveData>
                }

        // -- Third Command - LED Read

        // Confirm SPI2 is not busy 
        while((SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG)));  // While SPI is busy, you wait.
 80004fa:	bf00      	nop
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x1f4>)
 8000500:	f000 fb82 	bl	8000c08 <SPI_GetFlagStatus>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f8      	bne.n	80004fc <main+0x1dc>

        // SPI2 not busy anymore, disable SPI2 
        SPI_PeripheralControl(SPI2, DISABLE); 
 800050a:	2100      	movs	r1, #0
 800050c:	4801      	ldr	r0, [pc, #4]	; (8000514 <main+0x1f4>)
 800050e:	f000 fb3f 	bl	8000b90 <SPI_PeripheralControl>
    while(1){
 8000512:	e714      	b.n	800033e <main+0x1e>
 8000514:	40003800 	.word	0x40003800
 8000518:	40020000 	.word	0x40020000

0800051c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000546:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800054a:	f000 fbdd 	bl	8000d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fee7 	bl	8000320 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000560:	08000d70 	.word	0x08000d70
  ldr r2, =_sbss
 8000564:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000568:	2000001c 	.word	0x2000001c

0800056c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC_IRQHandler>
	...

08000570 <GPIO_ClockControl>:
 * @Note              -  none

 */


void GPIO_ClockControl(GPIO_RegDef_t *pGPIO_PORT,uint8_t enable_disable ){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]

	/*
	 *  Check if the enable_disable arugment is enable or disable, and then use the
	 *  clock enable macros that we have written in the MCU specific file.
	 */
	if(enable_disable == ENABLE){
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d162      	bne.n	8000648 <GPIO_ClockControl+0xd8>

		if(pGPIO_PORT == GPIOA){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a65      	ldr	r2, [pc, #404]	; (800071c <GPIO_ClockControl+0x1ac>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_ClockControl+0x28>
			GPIOA_PERIPH_CLOCK_EN(); // GPIOA enable clock access MACRO defined in MCU specific header file.
 800058a:	4b65      	ldr	r3, [pc, #404]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a64      	ldr	r2, [pc, #400]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PERIPH_CLOCK_DI();
		}else if(pGPIO_PORT == GPIOI){
			GPIOI_PERIPH_CLOCK_DI();
		}
	}
}
 8000596:	e0bc      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a62      	ldr	r2, [pc, #392]	; (8000724 <GPIO_ClockControl+0x1b4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_ClockControl+0x3e>
			GPIOB_PERIPH_CLOCK_EN();
 80005a0:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a5e      	ldr	r2, [pc, #376]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ac:	e0b1      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a5d      	ldr	r2, [pc, #372]	; (8000728 <GPIO_ClockControl+0x1b8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_ClockControl+0x54>
			GPIOC_PERIPH_CLOCK_EN();
 80005b6:	4b5a      	ldr	r3, [pc, #360]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a59      	ldr	r2, [pc, #356]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c2:	e0a6      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a59      	ldr	r2, [pc, #356]	; (800072c <GPIO_ClockControl+0x1bc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d106      	bne.n	80005da <GPIO_ClockControl+0x6a>
			GPIOD_PERIPH_CLOCK_EN();
 80005cc:	4b54      	ldr	r3, [pc, #336]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d8:	e09b      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a54      	ldr	r2, [pc, #336]	; (8000730 <GPIO_ClockControl+0x1c0>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <GPIO_ClockControl+0x80>
			GPIOE_PERIPH_CLOCK_EN();
 80005e2:	4b4f      	ldr	r3, [pc, #316]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a4e      	ldr	r2, [pc, #312]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005e8:	f043 0310 	orr.w	r3, r3, #16
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ee:	e090      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a50      	ldr	r2, [pc, #320]	; (8000734 <GPIO_ClockControl+0x1c4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d106      	bne.n	8000606 <GPIO_ClockControl+0x96>
			GPIOF_PERIPH_CLOCK_EN();
 80005f8:	4b49      	ldr	r3, [pc, #292]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a48      	ldr	r2, [pc, #288]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000604:	e085      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a4b      	ldr	r2, [pc, #300]	; (8000738 <GPIO_ClockControl+0x1c8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_ClockControl+0xac>
			GPIOG_PERIPH_CLOCK_EN();
 800060e:	4b44      	ldr	r3, [pc, #272]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a43      	ldr	r2, [pc, #268]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061a:	e07a      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a47      	ldr	r2, [pc, #284]	; (800073c <GPIO_ClockControl+0x1cc>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_ClockControl+0xc2>
			GPIOH_PERIPH_CLOCK_EN();
 8000624:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800062a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e06f      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a42      	ldr	r2, [pc, #264]	; (8000740 <GPIO_ClockControl+0x1d0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d16b      	bne.n	8000712 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_EN();
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a38      	ldr	r2, [pc, #224]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	e064      	b.n	8000712 <GPIO_ClockControl+0x1a2>
	}else if(enable_disable == DISABLE){
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d161      	bne.n	8000712 <GPIO_ClockControl+0x1a2>
		if(pGPIO_PORT == GPIOA){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a32      	ldr	r2, [pc, #200]	; (800071c <GPIO_ClockControl+0x1ac>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_ClockControl+0xf4>
			GPIOA_PERIPH_CLOCK_DI(); // GPIOA disable clock access MACRO defined in MCU specific header file.
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000662:	e056      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <GPIO_ClockControl+0x1b4>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <GPIO_ClockControl+0x10a>
			GPIOB_PERIPH_CLOCK_DI();
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000672:	f023 0302 	bic.w	r3, r3, #2
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000678:	e04b      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <GPIO_ClockControl+0x1b8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_ClockControl+0x120>
			GPIOC_PERIPH_CLOCK_DI();
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000688:	f023 0304 	bic.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800068e:	e040      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a26      	ldr	r2, [pc, #152]	; (800072c <GPIO_ClockControl+0x1bc>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d106      	bne.n	80006a6 <GPIO_ClockControl+0x136>
			GPIOD_PERIPH_CLOCK_DI();
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800069e:	f023 0308 	bic.w	r3, r3, #8
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a4:	e035      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <GPIO_ClockControl+0x1c0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_ClockControl+0x14c>
			GPIOE_PERIPH_CLOCK_DI();
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006b4:	f023 0310 	bic.w	r3, r3, #16
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ba:	e02a      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <GPIO_ClockControl+0x1c4>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d106      	bne.n	80006d2 <GPIO_ClockControl+0x162>
			GPIOF_PERIPH_CLOCK_DI();
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006ca:	f023 0320 	bic.w	r3, r3, #32
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d0:	e01f      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <GPIO_ClockControl+0x1c8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_ClockControl+0x178>
			GPIOG_PERIPH_CLOCK_DI();
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e6:	e014      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <GPIO_ClockControl+0x1cc>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_ClockControl+0x18e>
			GPIOH_PERIPH_CLOCK_DI();
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <GPIO_ClockControl+0x1b0>)
 80006f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fc:	e009      	b.n	8000712 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <GPIO_ClockControl+0x1d0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d105      	bne.n	8000712 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_DI();
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <GPIO_ClockControl+0x1b0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <GPIO_ClockControl+0x1b0>)
 800070c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40020000 	.word	0x40020000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400
 8000728:	40020800 	.word	0x40020800
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40021000 	.word	0x40021000
 8000734:	40021400 	.word	0x40021400
 8000738:	40021800 	.word	0x40021800
 800073c:	40021c00 	.word	0x40021c00
 8000740:	40022000 	.word	0x40022000

08000744 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
		
	uint32_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
						// The temp variable needs to be size of 32 bits, because MODER register is 32 bits wide.

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d820      	bhi.n	800079a <GPIO_Init+0x56>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2103      	movs	r1, #3
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e0dc      	b.n	8000954 <GPIO_Init+0x210>
	}else {

		// Do this for if the selected pin mode is one of the Interrupt Modes.

		if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b04      	cmp	r3, #4
 80007a0:	d117      	bne.n	80007d2 <GPIO_Init+0x8e>
			// 1. Configure the Falling Edge Trigger Selection Register  
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 80007a2:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <GPIO_Init+0x19c>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7912      	ldrb	r2, [r2, #4]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a4b      	ldr	r2, [pc, #300]	; (80008e0 <GPIO_Init+0x19c>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	60d3      	str	r3, [r2, #12]

			// Clear the Corresponding Rising Edge Trigger Selection Register - Just to be safe.   
			  EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <GPIO_Init+0x19c>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	7912      	ldrb	r2, [r2, #4]
 80007c0:	4611      	mov	r1, r2
 80007c2:	2201      	movs	r2, #1
 80007c4:	408a      	lsls	r2, r1
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a45      	ldr	r2, [pc, #276]	; (80008e0 <GPIO_Init+0x19c>)
 80007cc:	400b      	ands	r3, r1
 80007ce:	6093      	str	r3, [r2, #8]
 80007d0:	e035      	b.n	800083e <GPIO_Init+0xfa>

		}else if (pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_EDGE_INTERRUPT_MODE){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	2b05      	cmp	r3, #5
 80007d8:	d117      	bne.n	800080a <GPIO_Init+0xc6>
			// 1. Configure the Rising Edge Trigger Selection Register  
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 80007da:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <GPIO_Init+0x19c>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7912      	ldrb	r2, [r2, #4]
 80007e2:	4611      	mov	r1, r2
 80007e4:	2201      	movs	r2, #1
 80007e6:	408a      	lsls	r2, r1
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a3d      	ldr	r2, [pc, #244]	; (80008e0 <GPIO_Init+0x19c>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <GPIO_Init+0x19c>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7912      	ldrb	r2, [r2, #4]
 80007f8:	4611      	mov	r1, r2
 80007fa:	2201      	movs	r2, #1
 80007fc:	408a      	lsls	r2, r1
 80007fe:	43d2      	mvns	r2, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a37      	ldr	r2, [pc, #220]	; (80008e0 <GPIO_Init+0x19c>)
 8000804:	400b      	ands	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]
 8000808:	e019      	b.n	800083e <GPIO_Init+0xfa>

		}else if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_FALLING_INTERRUPT_MODE){
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b06      	cmp	r3, #6
 8000810:	d115      	bne.n	800083e <GPIO_Init+0xfa>

			// 1. Configure both Rising Edge Trigger & Falling Edge Trigger Selection Register 
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <GPIO_Init+0x19c>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7912      	ldrb	r2, [r2, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	2201      	movs	r2, #1
 800081e:	408a      	lsls	r2, r1
 8000820:	4611      	mov	r1, r2
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <GPIO_Init+0x19c>)
 8000824:	430b      	orrs	r3, r1
 8000826:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 	  
 8000828:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <GPIO_Init+0x19c>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	7912      	ldrb	r2, [r2, #4]
 8000830:	4611      	mov	r1, r2
 8000832:	2201      	movs	r2, #1
 8000834:	408a      	lsls	r2, r1
 8000836:	4611      	mov	r1, r2
 8000838:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <GPIO_Init+0x19c>)
 800083a:	430b      	orrs	r3, r1
 800083c:	60d3      	str	r3, [r2, #12]
			
				uint8_t temp1;
				uint8_t temp2; 

				// Gives the value of EXTICRx Register 
				temp1 = (pGPIOHandle->PinConfig.PinMode) / 5; 
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <GPIO_Init+0x1a0>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	74fb      	strb	r3, [r7, #19]
				// Gives the value of which field in EXTICRx to configure
				temp2 = (pGPIOHandle->PinConfig.PinMode) % 5; 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795a      	ldrb	r2, [r3, #5]
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <GPIO_Init+0x1a0>)
 8000852:	fba3 1302 	umull	r1, r3, r3, r2
 8000856:	0899      	lsrs	r1, r3, #2
 8000858:	460b      	mov	r3, r1
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	74bb      	strb	r3, [r7, #18]

				uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx_BASEADDR); // This macro will return the portCode corresponding to the baseaddress it receives.
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <GPIO_Init+0x1a4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d04f      	beq.n	800090c <GPIO_Init+0x1c8>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <GPIO_Init+0x1a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d032      	beq.n	80008dc <GPIO_Init+0x198>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <GPIO_Init+0x1ac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d02b      	beq.n	80008d8 <GPIO_Init+0x194>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <GPIO_Init+0x1b0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d024      	beq.n	80008d4 <GPIO_Init+0x190>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <GPIO_Init+0x1b4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d01d      	beq.n	80008d0 <GPIO_Init+0x18c>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <GPIO_Init+0x1b8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d016      	beq.n	80008cc <GPIO_Init+0x188>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <GPIO_Init+0x1bc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d00f      	beq.n	80008c8 <GPIO_Init+0x184>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <GPIO_Init+0x1c0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d008      	beq.n	80008c4 <GPIO_Init+0x180>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <GPIO_Init+0x1c4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d101      	bne.n	80008c0 <GPIO_Init+0x17c>
 80008bc:	2308      	movs	r3, #8
 80008be:	e026      	b.n	800090e <GPIO_Init+0x1ca>
 80008c0:	2300      	movs	r3, #0
 80008c2:	e024      	b.n	800090e <GPIO_Init+0x1ca>
 80008c4:	2307      	movs	r3, #7
 80008c6:	e022      	b.n	800090e <GPIO_Init+0x1ca>
 80008c8:	2306      	movs	r3, #6
 80008ca:	e020      	b.n	800090e <GPIO_Init+0x1ca>
 80008cc:	2305      	movs	r3, #5
 80008ce:	e01e      	b.n	800090e <GPIO_Init+0x1ca>
 80008d0:	2304      	movs	r3, #4
 80008d2:	e01c      	b.n	800090e <GPIO_Init+0x1ca>
 80008d4:	2303      	movs	r3, #3
 80008d6:	e01a      	b.n	800090e <GPIO_Init+0x1ca>
 80008d8:	2302      	movs	r3, #2
 80008da:	e018      	b.n	800090e <GPIO_Init+0x1ca>
 80008dc:	2301      	movs	r3, #1
 80008de:	e016      	b.n	800090e <GPIO_Init+0x1ca>
 80008e0:	40013c00 	.word	0x40013c00
 80008e4:	cccccccd 	.word	0xcccccccd
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40021400 	.word	0x40021400
 8000900:	40021800 	.word	0x40021800
 8000904:	40021c00 	.word	0x40021c00
 8000908:	40022000 	.word	0x40022000
 800090c:	2300      	movs	r3, #0
 800090e:	747b      	strb	r3, [r7, #17]
				SYSCFG_PERIPH_CLOCK_EN();   												// Enable clock access to System Configuration Peripheral before you configure its register
 8000910:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <GPIO_Init+0x350>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	4a5f      	ldr	r2, [pc, #380]	; (8000a94 <GPIO_Init+0x350>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6453      	str	r3, [r2, #68]	; 0x44
				//								The starting position of the field
				//										|
				SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 800091c:	4a5e      	ldr	r2, [pc, #376]	; (8000a98 <GPIO_Init+0x354>)
 800091e:	7cfb      	ldrb	r3, [r7, #19]
 8000920:	3302      	adds	r3, #2
 8000922:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000926:	7c79      	ldrb	r1, [r7, #17]
 8000928:	7cbb      	ldrb	r3, [r7, #18]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	4618      	mov	r0, r3
 8000932:	4959      	ldr	r1, [pc, #356]	; (8000a98 <GPIO_Init+0x354>)
 8000934:	7cfb      	ldrb	r3, [r7, #19]
 8000936:	4302      	orrs	r2, r0
 8000938:	3302      	adds	r3, #2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				
			// 3. Enable the respective EXTI line to allow interrupts to be send to the Processor via NVIC - using Interrupt Mask Register
		
			EXTI->IMR |= (1<< pGPIOHandle->PinConfig.PinNumber); // This will Enable the EXTI line corresponding to the Pin number. 
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <GPIO_Init+0x358>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	7912      	ldrb	r2, [r2, #4]
 8000946:	4611      	mov	r1, r2
 8000948:	2201      	movs	r2, #1
 800094a:	408a      	lsls	r2, r1
 800094c:	4611      	mov	r1, r2
 800094e:	4a53      	ldr	r2, [pc, #332]	; (8000a9c <GPIO_Init+0x358>)
 8000950:	430b      	orrs	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
			
	}

	
	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2103      	movs	r1, #3
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	400a      	ands	r2, r1
 8000986:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6899      	ldr	r1, [r3, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	430a      	orrs	r2, r1
 8000996:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	79db      	ldrb	r3, [r3, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (2* pGPIOHandle->PinConfig.PinNumber));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2103      	movs	r1, #3
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4619      	mov	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	400a      	ands	r2, r1
 80009ca:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68d9      	ldr	r1, [r3, #12]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	430a      	orrs	r2, r1
 80009da:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	4619      	mov	r1, r3
 80009fc:	2301      	movs	r3, #1
 80009fe:	408b      	lsls	r3, r1
 8000a00:	43db      	mvns	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	400a      	ands	r2, r1
 8000a0a:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6859      	ldr	r1, [r3, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d131      	bne.n	8000a88 <GPIO_Init+0x344>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint8_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	743b      	strb	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	f003 0307 	and.w	r3, r3, #7
 8000a34:	73fb      	strb	r3, [r7, #15]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7c3a      	ldrb	r2, [r7, #16]
 8000a3c:	3208      	adds	r2, #8
 8000a3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	7c3a      	ldrb	r2, [r7, #16]
 8000a56:	4001      	ands	r1, r0
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	7c3a      	ldrb	r2, [r7, #16]
 8000a64:	3208      	adds	r2, #8
 8000a66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7a5b      	ldrb	r3, [r3, #9]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7c3a      	ldrb	r2, [r7, #16]
 8000a80:	4301      	orrs	r1, r0
 8000a82:	3208      	adds	r2, #8
 8000a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			}*/

	}

}
 8000a88:	bf00      	nop
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40013c00 	.word	0x40013c00

08000aa0 <GPIO_ReadFromInputPin>:
 * @return            -0 or 1
 *
 * @Note              -

*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIO_PORT, uint8_t pinNumber){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
//					Grab the Input Data Register, followed by leftshifting the desired bit to the LSB position, followed by masking the remaining bits from Bit 0 - Bit 31, followed by typecasting the uint32_t  as uint8_t, to avoid compiler error.
//							|
	value = (uint8_t) ((pGPIO_PORT->IDR >> pinNumber) & 0x00000001);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691a      	ldr	r2, [r3, #16]
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
	return value;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  

 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]

    // Configure SPI_CR1 register first. 

    uint32_t tempReg = 0; // Set all the bits corresponding to CR1 register, followed by assigned this value to the CR1 register. 
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]

    // 1. Configure Device Mode
    
    tempReg |= ((pSPIHandle->SPIConfig.DeviceMode) << SPI_CR1_MSTR); // '2' Because bit 2 of CR1 is used for configuring Master or Slave mode. 
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	461a      	mov	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    /* Not very clear --> Need to REVIEW spi communication type configurations */ 

    // 2. Configure Bus Configuration, i.e. SPI communication type
    if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_FULL_DUPLEX_MODE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	795b      	ldrb	r3, [r3, #5]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <SPI_Init+0x2c>
    {
        // Set BIDIMODE bit of CR1 as '0' -> Will configure 2-line unidirection data mode
        // resulting in separate line for RX and TX
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e021      	b.n	8000b3a <SPI_Init+0x70>
        
        // RXONLY bit is by default = '0' which means Receive and Transmit.
    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_HALF_DUPLEX_MODE){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d104      	bne.n	8000b08 <SPI_Init+0x3e>
        // Set BIDIMODE bit of CR1 as '1' -> will configure 1-line bidirection data mode, same line for RX and TX 
        tempReg |= (1 << SPI_CR1_BIDIMODE); 
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e018      	b.n	8000b3a <SPI_Init+0x70>

    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_TX_ONLY){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d108      	bne.n	8000b22 <SPI_Init+0x58>

        // Clear BIDIMODE bit of CR1 to '0' -> 2-line bidirection data mode, different line for RX & TX
        tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b16:	60fb      	str	r3, [r7, #12]
        // Clear RXONLY bit to '0', basically configuring Full-duplex mode with Transmission ONLY, and ignoring Receive 
        tempReg &= ~(1<<SPI_CR1_RXONLY);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e00b      	b.n	8000b3a <SPI_Init+0x70>
        

    }else if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_RX_ONLY){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d107      	bne.n	8000b3a <SPI_Init+0x70>
        // Clear BIDIMODE bit of CR1 to '0' -> 2-line unidirectional data mode, i.e. Full duplex SPI communication type
        tempReg &= ~(1<<SPI_CR1_BIDIMODE); 
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b30:	60fb      	str	r3, [r7, #12]
        // Set RXONLY bit to force clock generation,i.e. if the device is master, you want to only RECEIVE.
        tempReg |= (1<<SPI_CR1_RXONLY);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b38:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure Serial Clock but setting Baudrate. 
    tempReg |= ((pSPIHandle->SPIConfig.SclkSpeed) << SPI_CR1_BR);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	799b      	ldrb	r3, [r3, #6]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    // 4. Configure Data Frame Format
    tempReg |= ((pSPIHandle->SPIConfig.DataFrameFormat) << SPI_CR1_DFF); 
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	79db      	ldrb	r3, [r3, #7]
 8000b4c:	02db      	lsls	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]

    // 5. Configure ClockPolarity (CPOL)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPolarity) << SPI_CR1_CPOL); 
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7a1b      	ldrb	r3, [r3, #8]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

    // 6. Configure ClockPhase (CPHA)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPhase) << SPI_CR1_CPHA); 
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7a5b      	ldrb	r3, [r3, #9]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

    // 7. Configure Software Slave Management 
    tempReg |= ((pSPIHandle->SPIConfig.SlaveManagementType) << SPI_CR1_SSM); 
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7a9b      	ldrb	r3, [r3, #10]
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]

    // Assign tempReg to your SPIx's CR1 register.
    pSPIHandle->pSPIx_BASEADDR->CR1 = tempReg;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	601a      	str	r2, [r3, #0]

}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <SPI_PeripheralControl>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable == ENABLE){
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d106      	bne.n	8000bb0 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000bae:	e008      	b.n	8000bc2 <SPI_PeripheralControl+0x32>
    }else if(Enable_Disable == DISABLE){
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d105      	bne.n	8000bc2 <SPI_PeripheralControl+0x32>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <SPI_SSOEConfig>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable==ENABLE){
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d106      	bne.n	8000bec <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f043 0204 	orr.w	r2, r3, #4
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	605a      	str	r2, [r3, #4]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8000bea:	e008      	b.n	8000bfe <SPI_SSOEConfig+0x32>
    }else if(Enable_Disable == DISABLE){
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d105      	bne.n	8000bfe <SPI_SSOEConfig+0x32>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f023 0204 	bic.w	r2, r3, #4
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	605a      	str	r2, [r3, #4]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <SPI_GetFlagStatus>:
 *
 * @return            -  Either '1' or '0' 
 *
 * @Note              - None
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]

    if(pSPIx->SR & FlagName){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <SPI_SendData>:
 *                       This is a "Blocking" implementation of SPI send, you wait till TXE is set, before you can push data into the Tx Buffer.
 *                        It is also called Polling method, because we're waiting till Transmit buffer gets empty, the function will stay there.                        
 *                        There are problems with this method of implementation, what if something wrong with the hardware and the TXE flag is NEVER set, then the system 
                        will be stuck here forever, this when you need a WATCHDOG module to reset the system if it becomes non-responsive for a certain time period. 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLength){
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]

    while(DataLength > 0){
 8000c3a:	e027      	b.n	8000c8c <SPI_SendData+0x5e>
        //1. Wait until TXE is set
                    // while( !(pSPIx->SR & (1 << 1)) ); // Checking if TXE flag is set in the Status Register, implement the condition using a function defined in this source. 
        while(! SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG));  // Same as above statement, but a much cleaner method of implementation. If TXNE, you stay here, if empty, you push data into Tx Buffer
 8000c3c:	bf00      	nop
 8000c3e:	2102      	movs	r1, #2
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ffe1 	bl	8000c08 <SPI_GetFlagStatus>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f8      	beq.n	8000c3e <SPI_SendData+0x10>
    
        //2. Check DFF bit CR1 to determine how many bytes to upload in the DR, which will push the data bytes to the Tx Buffer
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00e      	beq.n	8000c76 <SPI_SendData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data. Without the uint16_t* typecast, you would be dereferencing a byte of data. 
            //                  |
            pSPIx->DR = *((uint16_t *)pTxBuffer);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	60da      	str	r2, [r3, #12]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pTxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e00a      	b.n	8000c8c <SPI_SendData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to upload a byte at a time. 
            pSPIx->DR = *(pTxBuffer); // Don't need typecasting as pointer is of 8-bit type. 
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	60da      	str	r2, [r3, #12]
            DataLength--; 
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
            pTxBuffer++; 
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
    while(DataLength > 0){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1d4      	bne.n	8000c3c <SPI_SendData+0xe>
        }
        
    }

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SPI_ReceiveData>:
 * @return            -  None
 *
 * @Note              -  uint32_t is a standared for defining data length.

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLength){
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]

     while(DataLength > 0){
 8000ca6:	e027      	b.n	8000cf8 <SPI_ReceiveData+0x5e>
        //1. Wait until RXNE is set, which RX Buffer in the SPI block is not Empty, there is new data available 
                    // while( !(pSPIx->SR & (0 << 1)) ); // Checking if RXNE flag is set in the Status Register, implement the condition using a function defined in this source. 

    	 while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );  // Same as above statement, but a much cleaner method of implementation.
 8000ca8:	bf00      	nop
 8000caa:	2101      	movs	r1, #1
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff ffab 	bl	8000c08 <SPI_GetFlagStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f8      	beq.n	8000caa <SPI_ReceiveData+0x10>
        
        //2. Check DFF bit CR1 to determine how many bytes to Download/grab/read from the DR, which will push the data bytes from the SPI RX buffer to the RX buffer of the program
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00e      	beq.n	8000ce2 <SPI_ReceiveData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data - in this case you will download/read 16-bits of data from SPI's RX buffer. Without the uint16_t* typecast, you would be storing a byte of data.
            //                  |
            *((uint16_t *)pRxBuffer) = pSPIx->DR;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	801a      	strh	r2, [r3, #0]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pRxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	e00a      	b.n	8000cf8 <SPI_ReceiveData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to read a byte at a time from the SPI's RX buffer 
            *(pRxBuffer) = pSPIx->DR; // Don't need typecasting as pointer is of 8-bit type. 
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	701a      	strb	r2, [r3, #0]
            DataLength--; 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
            pRxBuffer++; 
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
     while(DataLength > 0){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1d4      	bne.n	8000ca8 <SPI_ReceiveData+0xe>
        }
        
    }

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <__libc_init_array>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	4e0d      	ldr	r6, [pc, #52]	; (8000d40 <__libc_init_array+0x38>)
 8000d0c:	4c0d      	ldr	r4, [pc, #52]	; (8000d44 <__libc_init_array+0x3c>)
 8000d0e:	1ba4      	subs	r4, r4, r6
 8000d10:	10a4      	asrs	r4, r4, #2
 8000d12:	2500      	movs	r5, #0
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	d109      	bne.n	8000d2c <__libc_init_array+0x24>
 8000d18:	4e0b      	ldr	r6, [pc, #44]	; (8000d48 <__libc_init_array+0x40>)
 8000d1a:	4c0c      	ldr	r4, [pc, #48]	; (8000d4c <__libc_init_array+0x44>)
 8000d1c:	f000 f818 	bl	8000d50 <_init>
 8000d20:	1ba4      	subs	r4, r4, r6
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	2500      	movs	r5, #0
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	d105      	bne.n	8000d36 <__libc_init_array+0x2e>
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d30:	4798      	blx	r3
 8000d32:	3501      	adds	r5, #1
 8000d34:	e7ee      	b.n	8000d14 <__libc_init_array+0xc>
 8000d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d3a:	4798      	blx	r3
 8000d3c:	3501      	adds	r5, #1
 8000d3e:	e7f2      	b.n	8000d26 <__libc_init_array+0x1e>
 8000d40:	08000d68 	.word	0x08000d68
 8000d44:	08000d68 	.word	0x08000d68
 8000d48:	08000d68 	.word	0x08000d68
 8000d4c:	08000d6c 	.word	0x08000d6c

08000d50 <_init>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr

08000d5c <_fini>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr
