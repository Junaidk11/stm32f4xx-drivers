
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000300  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007db  00000000  00000000  0001032a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001e6  00000000  00000000  00010b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00010cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00010db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001401  00000000  00000000  00010e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b01  00000000  00000000  00012249  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005a45  00000000  00000000  00012d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001878f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000240  00000000  00000000  0001880c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002e0 	.word	0x080002e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002e0 	.word	0x080002e0

080001e8 <main>:
 */


#include "gpio_driver.h" 

int main(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

    return 0; 
 80001ec:	2300      	movs	r3, #0
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr

080001f6 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 80001f6:	b580      	push	{r7, lr}
 80001f8:	af00      	add	r7, sp, #0

    //Handle the Interrupt - call the Driver IRQ handling API here. 
    GPIO_IRQHandling(0); // I/O Pin number 0 deliver's interrupts on the EXTI0 line
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f82c 	bl	8000258 <GPIO_IRQHandling>
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490e      	ldr	r1, [pc, #56]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0b      	ldr	r2, [pc, #44]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0b      	ldr	r4, [pc, #44]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800022e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 f831 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ffd7 	bl	80001e8 <main>

0800023a <LoopForever>:

LoopForever:
    b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	2000001c 	.word	0x2000001c

08000254 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC_IRQHandler>
	...

08000258 <GPIO_IRQHandling>:
 * @return            -
 *
 * @Note              -

*/
void GPIO_IRQHandling(uint8_t pinNumber){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]


	// Clear the EXTI's Pending Register Bit corresponding to the pinNumber
	if(EXTI->PR & (1 << pinNumber)){ // Check if the bit was actually first
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <GPIO_IRQHandling+0x3c>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	79fa      	ldrb	r2, [r7, #7]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4013      	ands	r3, r2
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <GPIO_IRQHandling+0x30>
			
			// Clearing the Registered Interrupt on EXTI is done by writing 1 at the bit position assigned to the Pin in the Pending Register of EXTI module
			EXTI->PR |= (1 << pinNumber);
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <GPIO_IRQHandling+0x3c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a04      	ldr	r2, [pc, #16]	; (8000294 <GPIO_IRQHandling+0x3c>)
 8000284:	430b      	orrs	r3, r1
 8000286:	6153      	str	r3, [r2, #20]
	}

}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40013c00 	.word	0x40013c00

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	4e0d      	ldr	r6, [pc, #52]	; (80002d0 <__libc_init_array+0x38>)
 800029c:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 800029e:	1ba4      	subs	r4, r4, r6
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	2500      	movs	r5, #0
 80002a4:	42a5      	cmp	r5, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	4e0b      	ldr	r6, [pc, #44]	; (80002d8 <__libc_init_array+0x40>)
 80002aa:	4c0c      	ldr	r4, [pc, #48]	; (80002dc <__libc_init_array+0x44>)
 80002ac:	f000 f818 	bl	80002e0 <_init>
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	2500      	movs	r5, #0
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c0:	4798      	blx	r3
 80002c2:	3501      	adds	r5, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ca:	4798      	blx	r3
 80002cc:	3501      	adds	r5, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
