
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef8  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ef8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ef8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ad8  00000000  00000000  00010f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000513  00000000  00000000  000129fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  00012f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00013050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020db  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012a0  00000000  00000000  00015233  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000977b  00000000  00000000  000164d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001fc4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000454  00000000  00000000  0001fccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ec0 	.word	0x08000ec0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ec0 	.word	0x08000ec0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_Inits>:
 * 
 * Alternate Functionality mode = 5; Needed for configuring the I/O pins for alternate functionality 
 * 
 **/

void SPI2_Inits(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0


    // Enable clock access to the peripheral before making any configurations. 
    SPI2_PERIPH_CLOCK_EN(); 
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <SPI2_Inits+0x44>)
 8000200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <SPI2_Inits+0x44>)
 8000204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000208:	6413      	str	r3, [r2, #64]	; 0x40

    // Create SPI Handle 
    SPI_Handle_t SPI2Handle; 

    // Set BaseAddress to SPI2 
    SPI2Handle.pSPIx_BASEADDR = SPI2;
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <SPI2_Inits+0x48>)
 800020c:	607b      	str	r3, [r7, #4]

    // Configure the SPI2 Peripheral as desired. 
    SPI2Handle.SPIConfig.DeviceMode = SPI_IN_MASTER_MODE;  
 800020e:	2301      	movs	r3, #1
 8000210:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.BusConfig = SPI_IN_FULL_DUPLEX_MODE; 
 8000212:	2300      	movs	r3, #0
 8000214:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.DataFrameFormat = SPI_DATAFRAME_8BITS; 
 8000216:	2300      	movs	r3, #0
 8000218:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.ClockPolarity = SPI_SCLK_LOW; 
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.ClockPhase = SPI_DATA_SAMPLED_ON_LEADING_EDGE; 
 800021e:	2300      	movs	r3, #0
 8000220:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SclkSpeed = SPI_PERIPHERAL_CLOCK_DIV8; // Serial Clock is at 2 MHz, which means Prescaler = 8, System Clock source is Internal RC oscillator, producing 16MHz
 8000222:	2302      	movs	r3, #2
 8000224:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SlaveManagementType = SPI_SOFTWARE_SLAVE_MANAGEMENT_DI; // 1 slave, so we can disable software slave management, i.e. enable hardware slave management
 8000226:	2300      	movs	r3, #0
 8000228:	73bb      	strb	r3, [r7, #14]

    // Call the Init API to initialize the configured SPI2 peripheral.
    SPI_Init(&SPI2Handle);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fd04 	bl	8000c3a <SPI_Init>

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40003800 	.word	0x40003800

08000244 <SPI2_GPIOInits>:
void SPI2_GPIOInits(){
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

	// Enable clock access to GPIOB Port before making any configurations. 
	GPIOB_PERIPH_CLOCK_EN(); 
 800024a:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <SPI2_GPIOInits+0x64>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <SPI2_GPIOInits+0x64>)
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	6313      	str	r3, [r2, #48]	; 0x30

	// Create a GPIO handle, which will hold the base address and Pin configurations 
	GPIO_Handle_t SPIPins; 
	SPIPins.pGPIOx_BASEADDR = GPIOB; 
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <SPI2_GPIOInits+0x68>)
 8000258:	607b      	str	r3, [r7, #4]

	// Set Pin Configurations for each I/O Pin
	SPIPins.PinConfig.PinMode = GPIO_PIN_ALTFUNC_MODE; 
 800025a:	2302      	movs	r3, #2
 800025c:	727b      	strb	r3, [r7, #9]
	SPIPins.PinConfig.PinAltFunMode = 5; 
 800025e:	2305      	movs	r3, #5
 8000260:	737b      	strb	r3, [r7, #13]
	SPIPins.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; // Output Drain Type is required for I2C -> specification insists.
 8000262:	2300      	movs	r3, #0
 8000264:	733b      	strb	r3, [r7, #12]
	SPIPins.PinConfig.PinPuPdControl = GPIO_PIN_PULL_UP;  // Don't need PU/PD for Push-pull output configuration
 8000266:	2301      	movs	r3, #1
 8000268:	72fb      	strb	r3, [r7, #11]
	SPIPins.PinConfig.PinSpeed = GPIO_PIN_HIGH_SPEED;  // Doesn't matter, can set to any speed
 800026a:	2302      	movs	r3, #2
 800026c:	72bb      	strb	r3, [r7, #10]

	// Set Pin number and call the GPIOInit to initialize each of the PBx pins.

	// SPI2_NSS
	SPIPins.PinConfig.PinNumber = GPIO_PIN_12; 
 800026e:	230c      	movs	r3, #12
 8000270:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fb1d 	bl	80008b4 <GPIO_Init>

	// SPI2_SCLK 
	SPIPins.PinConfig.PinNumber = GPIO_PIN_13; 
 800027a:	230d      	movs	r3, #13
 800027c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fb17 	bl	80008b4 <GPIO_Init>

	// SPI2_MISO
	SPIPins.PinConfig.PinNumber = GPIO_PIN_14; 
 8000286:	230e      	movs	r3, #14
 8000288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fb11 	bl	80008b4 <GPIO_Init>
	
	// SPI2_MOSI
	SPIPins.PinConfig.PinNumber = GPIO_PIN_15;
 8000292:	230f      	movs	r3, #15
 8000294:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fb0b 	bl	80008b4 <GPIO_Init>


}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020400 	.word	0x40020400

080002b0 <GPIO_ButtonInits>:

void GPIO_ButtonInits(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
    	/*   The following statements are for configuring the user button PA0 as an input pin. */

	GPIO_Handle_t gpio_user_button; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.
	gpio_user_button.pGPIOx_BASEADDR = GPIOA; 	// Set the base-address of the Port you're configuring - User button is connected to Port A, Pin 0.
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <GPIO_ButtonInits+0x34>)
 80002b8:	607b      	str	r3, [r7, #4]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 0 in input mode.
	gpio_user_button.PinConfig.PinNumber = GPIO_PIN_0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	723b      	strb	r3, [r7, #8]
	gpio_user_button.PinConfig.PinMode = GPIO_PIN_INPUT_MODE; 		 // Set the pin in Output mode.
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	//gpio_push_pull.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; //PA0 is being configured as an input pin, this is irrelevant to it.
	gpio_user_button.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;      // Stm32f407-discovery schematic shows an external pull-down resistor, so don't need to enable internal pull-down resistor.
 80002c2:	2300      	movs	r3, #0
 80002c4:	72fb      	strb	r3, [r7, #11]
	gpio_user_button.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;   // Speed doesn't really matter
 80002c6:	2301      	movs	r3, #1
 80002c8:	72bb      	strb	r3, [r7, #10]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOA, ENABLE);
 80002ca:	2101      	movs	r1, #1
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <GPIO_ButtonInits+0x34>)
 80002ce:	f000 fa07 	bl	80006e0 <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_user_button);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 faed 	bl	80008b4 <GPIO_Init>

}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40020000 	.word	0x40020000

080002e8 <Delay>:

void Delay()
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
    int i = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
    for (; i < 500000 / 2; i++);
 80002f2:	e002      	b.n	80002fa <Delay+0x12>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a03      	ldr	r2, [pc, #12]	; (800030c <Delay+0x24>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	ddf8      	ble.n	80002f4 <Delay+0xc>
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	0003d08f 	.word	0x0003d08f

08000310 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackByte){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]

    if(ackByte == ACK_CODE){
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	2bf5      	cmp	r3, #245	; 0xf5
 800031e:	d101      	bne.n	8000324 <SPI_VerifyResponse+0x14>
        return 1;
 8000320:	2301      	movs	r3, #1
 8000322:	e000      	b.n	8000326 <SPI_VerifyResponse+0x16>
    }
    return 0;
 8000324:	2300      	movs	r3, #0
}
 8000326:	4618      	mov	r0, r3
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <main>:
 *        6. Wait till Button pressed again. 
 *        7. Repeat steps 3-5. 
 * 
 */ 

int main(){
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b08c      	sub	sp, #48	; 0x30
 8000334:	af00      	add	r7, sp, #0

    //              ++ INITIALIZE THE PERIPHERALS 

            // 1. Call Function to configure the I/O pin PA0 as button 
            GPIO_ButtonInits();
 8000336:	f7ff ffbb 	bl	80002b0 <GPIO_ButtonInits>

            // 2. Call Function to configure the I/O pins above to be used as SPI2 pin. 
            SPI2_GPIOInits();
 800033a:	f7ff ff83 	bl	8000244 <SPI2_GPIOInits>

            // 3. Call Function to Configure the SPI2 Peripheral 
            SPI2_Inits();
 800033e:	f7ff ff5b 	bl	80001f8 <SPI2_Inits>

            // 4. Set SSOE pin to enable Slave Select Output, which will tie Peripheral Enable bit to the NSS output
           // i.e. when SPI enabled, NSS will be driven low to initiate communication with the slave --> Only if the SPI is in master mode, which is the case here.

            SPI_SSOEConfig(SPI2, ENABLE);
 8000342:	2101      	movs	r1, #1
 8000344:	48ce      	ldr	r0, [pc, #824]	; (8000680 <main+0x350>)
 8000346:	f000 fcf9 	bl	8000d3c <SPI_SSOEConfig>

    //              -- INITIALIZE THE PERIPHERALS 

    uint8_t dummy_read; 
    uint8_t dummy_write = 0xFF; 
 800034a:	23ff      	movs	r3, #255	; 0xff
 800034c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    while(1){

        // ++ First Command - Turn ON LED
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000350:	bf00      	nop
 8000352:	2100      	movs	r1, #0
 8000354:	48cb      	ldr	r0, [pc, #812]	; (8000684 <main+0x354>)
 8000356:	f000 fc5b 	bl	8000c10 <GPIO_ReadFromInputPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0f8      	beq.n	8000352 <main+0x22>

                // To avoid Button de-bouncing, add software delay
                Delay();
 8000360:	f7ff ffc2 	bl	80002e8 <Delay>

                // Enable SPI2
                SPI_PeripheralControl(SPI2, ENABLE); 
 8000364:	2101      	movs	r1, #1
 8000366:	48c6      	ldr	r0, [pc, #792]	; (8000680 <main+0x350>)
 8000368:	f000 fcca 	bl	8000d00 <SPI_PeripheralControl>

                // Send LED Control Command 
                // CMD_LED_CTRL  <Pin number> <Value>
                uint8_t command = COMMAND_LED_CTRL; 
 800036c:	2350      	movs	r3, #80	; 0x50
 800036e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED command first
                SPI_SendData(SPI2, &command, 1);
 8000372:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	48c1      	ldr	r0, [pc, #772]	; (8000680 <main+0x350>)
 800037c:	f000 fd0f 	bl	8000d9e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000380:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000384:	2201      	movs	r2, #1
 8000386:	4619      	mov	r1, r3
 8000388:	48bd      	ldr	r0, [pc, #756]	; (8000680 <main+0x350>)
 800038a:	f000 fd3e 	bl	8000e0a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 800038e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000392:	2201      	movs	r2, #1
 8000394:	4619      	mov	r1, r3
 8000396:	48ba      	ldr	r0, [pc, #744]	; (8000680 <main+0x350>)
 8000398:	f000 fd01 	bl	8000d9e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 800039c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003a0:	2201      	movs	r2, #1
 80003a2:	4619      	mov	r1, r3
 80003a4:	48b6      	ldr	r0, [pc, #728]	; (8000680 <main+0x350>)
 80003a6:	f000 fd30 	bl	8000e0a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 

                if(SPI_VerifyResponse(slave_response)){
 80003aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffae 	bl	8000310 <SPI_VerifyResponse>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d013      	beq.n	80003e2 <main+0xb2>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument 1 is Pin number
 80003ba:	2309      	movs	r3, #9
 80003bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    arguments[1] = LED_ON;  //  Turn LED on
 80003c0:	2301      	movs	r3, #1
 80003c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 2); // '2' because we're sending 2 arguments of 8 bits each.
 80003c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ca:	2202      	movs	r2, #2
 80003cc:	4619      	mov	r1, r3
 80003ce:	48ac      	ldr	r0, [pc, #688]	; (8000680 <main+0x350>)
 80003d0:	f000 fce5 	bl	8000d9e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 

                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 80003d4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	48a8      	ldr	r0, [pc, #672]	; (8000680 <main+0x350>)
 80003de:	f000 fd14 	bl	8000e0a <SPI_ReceiveData>
                 *  	Connect A0 -> 5 V, Read the value returned by Arduino, should be 255
                 *  	Connect A0 -> 3.3 V, Read the value returned by Arduino, should be less than 255 but greater than 128
                 */

                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 80003e2:	bf00      	nop
 80003e4:	2100      	movs	r1, #0
 80003e6:	48a7      	ldr	r0, [pc, #668]	; (8000684 <main+0x354>)
 80003e8:	f000 fc12 	bl	8000c10 <GPIO_ReadFromInputPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f8      	beq.n	80003e4 <main+0xb4>

                // To avoid Button de-bouncing, add software delay
                Delay();
 80003f2:	f7ff ff79 	bl	80002e8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_CTRL  <Analog Pin number> 
                command = COMMAND_SENSOR_READ; 
 80003f6:	2351      	movs	r3, #81	; 0x51
 80003f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send Sensor Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80003fc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000400:	2201      	movs	r2, #1
 8000402:	4619      	mov	r1, r3
 8000404:	489e      	ldr	r0, [pc, #632]	; (8000680 <main+0x350>)
 8000406:	f000 fcca 	bl	8000d9e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 800040a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800040e:	2201      	movs	r2, #1
 8000410:	4619      	mov	r1, r3
 8000412:	489b      	ldr	r0, [pc, #620]	; (8000680 <main+0x350>)
 8000414:	f000 fcf9 	bl	8000e0a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 8000418:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800041c:	2201      	movs	r2, #1
 800041e:	4619      	mov	r1, r3
 8000420:	4897      	ldr	r0, [pc, #604]	; (8000680 <main+0x350>)
 8000422:	f000 fcbc 	bl	8000d9e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4894      	ldr	r0, [pc, #592]	; (8000680 <main+0x350>)
 8000430:	f000 fceb 	bl	8000e0a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 8000434:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff69 	bl	8000310 <SPI_VerifyResponse>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d020      	beq.n	8000486 <main+0x156>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = ANALOG_PIN0; // Argument is Analog Pin number
 8000444:	2300      	movs	r3, #0
 8000446:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2201      	movs	r2, #1
 8000450:	4619      	mov	r1, r3
 8000452:	488b      	ldr	r0, [pc, #556]	; (8000680 <main+0x350>)
 8000454:	f000 fca3 	bl	8000d9e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 8000458:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	4887      	ldr	r0, [pc, #540]	; (8000680 <main+0x350>)
 8000462:	f000 fcd2 	bl	8000e0a <SPI_ReceiveData>

                    // Create Delay to allow Arduino ADC to convert the Analog input to Digital value between 0-255
                    Delay();
 8000466:	f7ff ff3f 	bl	80002e8 <Delay>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 800046a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	4883      	ldr	r0, [pc, #524]	; (8000680 <main+0x350>)
 8000474:	f000 fc93 	bl	8000d9e <SPI_SendData>

                    // Read Slave response - Which should be an 8-bit value between 0-255 corresponding to the voltage at pin A0 - which is used as the Sensor Input
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	487f      	ldr	r0, [pc, #508]	; (8000680 <main+0x350>)
 8000482:	f000 fcc2 	bl	8000e0a <SPI_ReceiveData>
                }
        // -- Second Command - Read Sensor Value 

        // ++ Third Command - LED Read
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000486:	bf00      	nop
 8000488:	2100      	movs	r1, #0
 800048a:	487e      	ldr	r0, [pc, #504]	; (8000684 <main+0x354>)
 800048c:	f000 fbc0 	bl	8000c10 <GPIO_ReadFromInputPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0f8      	beq.n	8000488 <main+0x158>

                // To avoid Button de-bouncing, add software delay
                Delay();
 8000496:	f7ff ff27 	bl	80002e8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_READ  <Pin number> 
                command = COMMAND_LED_READ; 
 800049a:	2352      	movs	r3, #82	; 0x52
 800049c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80004a0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	4875      	ldr	r0, [pc, #468]	; (8000680 <main+0x350>)
 80004aa:	f000 fc78 	bl	8000d9e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004ae:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	4872      	ldr	r0, [pc, #456]	; (8000680 <main+0x350>)
 80004b8:	f000 fca7 	bl	8000e0a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80004bc:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	486e      	ldr	r0, [pc, #440]	; (8000680 <main+0x350>)
 80004c6:	f000 fc6a 	bl	8000d9e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 80004ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	486b      	ldr	r0, [pc, #428]	; (8000680 <main+0x350>)
 80004d4:	f000 fc99 	bl	8000e0a <SPI_ReceiveData>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 80004d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff17 	bl	8000310 <SPI_VerifyResponse>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d01e      	beq.n	8000526 <main+0x1f6>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument is LED Pin
 80004e8:	2309      	movs	r3, #9
 80004ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 80004ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	4862      	ldr	r0, [pc, #392]	; (8000680 <main+0x350>)
 80004f8:	f000 fc51 	bl	8000d9e <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 80004fc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	485e      	ldr	r0, [pc, #376]	; (8000680 <main+0x350>)
 8000506:	f000 fc80 	bl	8000e0a <SPI_ReceiveData>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 800050a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	485b      	ldr	r0, [pc, #364]	; (8000680 <main+0x350>)
 8000514:	f000 fc43 	bl	8000d9e <SPI_SendData>

                    // Read Slave response - Which should be either a '1' or '0' --> Will read '1' because initially we turn the LED on.
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	4857      	ldr	r0, [pc, #348]	; (8000680 <main+0x350>)
 8000522:	f000 fc72 	bl	8000e0a <SPI_ReceiveData>

        // -- Third Command - LED Read

        // ++ Fourth Command - Print Command
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000526:	bf00      	nop
 8000528:	2100      	movs	r1, #0
 800052a:	4856      	ldr	r0, [pc, #344]	; (8000684 <main+0x354>)
 800052c:	f000 fb70 	bl	8000c10 <GPIO_ReadFromInputPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f8      	beq.n	8000528 <main+0x1f8>

                // To avoid Button de-bouncing, add software delay
                Delay();
 8000536:	f7ff fed7 	bl	80002e8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_PRINT <Message Length in bytes>  <The message> 
                command = COMMAND_PRINT; 
 800053a:	2353      	movs	r3, #83	; 0x53
 800053c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 8000540:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	484d      	ldr	r0, [pc, #308]	; (8000680 <main+0x350>)
 800054a:	f000 fc28 	bl	8000d9e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 800054e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	484a      	ldr	r0, [pc, #296]	; (8000680 <main+0x350>)
 8000558:	f000 fc57 	bl	8000e0a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 800055c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000560:	2201      	movs	r2, #1
 8000562:	4619      	mov	r1, r3
 8000564:	4846      	ldr	r0, [pc, #280]	; (8000680 <main+0x350>)
 8000566:	f000 fc1a 	bl	8000d9e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1);
 800056a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	4843      	ldr	r0, [pc, #268]	; (8000680 <main+0x350>)
 8000574:	f000 fc49 	bl	8000e0a <SPI_ReceiveData>
                
                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 8000578:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fec7 	bl	8000310 <SPI_VerifyResponse>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d01f      	beq.n	80005c8 <main+0x298>
                    // Recieved acknowledgment from Slave, arguments of the command you sent befoe
                    uint8_t message[] = "Hello! How is it going?"; 
 8000588:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <main+0x358>)
 800058a:	1d3c      	adds	r4, r7, #4
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000596:	e884 0003 	stmia.w	r4, {r0, r1}

                    // Send Message length first
                    arguments[0]= strlen((char *)message); 
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe23 	bl	80001e8 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    SPI_SendData(SPI2, arguments, 1); // First argument only
 80005aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4833      	ldr	r0, [pc, #204]	; (8000680 <main+0x350>)
 80005b4:	f000 fbf3 	bl	8000d9e <SPI_SendData>

                    // Send Message now
                    SPI_SendData(SPI2, message, arguments[0]); 
 80005b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005bc:	461a      	mov	r2, r3
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	482f      	ldr	r0, [pc, #188]	; (8000680 <main+0x350>)
 80005c4:	f000 fbeb 	bl	8000d9e <SPI_SendData>

        // -- Fourth Command - Print Command

        // ++ Fifth Command - ID read
            // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 80005c8:	bf00      	nop
 80005ca:	2100      	movs	r1, #0
 80005cc:	482d      	ldr	r0, [pc, #180]	; (8000684 <main+0x354>)
 80005ce:	f000 fb1f 	bl	8000c10 <GPIO_ReadFromInputPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f8      	beq.n	80005ca <main+0x29a>

                // To avoid Button de-bouncing, add software delay
                Delay();
 80005d8:	f7ff fe86 	bl	80002e8 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_ID_READ
                command = COMMAND_ID_READ; 
 80005dc:	2354      	movs	r3, #84	; 0x54
 80005de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80005e2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <main+0x350>)
 80005ec:	f000 fbd7 	bl	8000d9e <SPI_SendData>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005f0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	4821      	ldr	r0, [pc, #132]	; (8000680 <main+0x350>)
 80005fa:	f000 fc06 	bl	8000e0a <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80005fe:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	481e      	ldr	r0, [pc, #120]	; (8000680 <main+0x350>)
 8000608:	f000 fbc9 	bl	8000d9e <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1);
 800060c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <main+0x350>)
 8000616:	f000 fbf8 	bl	8000e0a <SPI_ReceiveData>
                
                // To store Received Data
                uint8_t slaveData[10];

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 800061a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe76 	bl	8000310 <SPI_VerifyResponse>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d01d      	beq.n	8000666 <main+0x336>
            
                    // We're receiving information from the arduino. Message to be received -> "ARDUINOUNO" -> 10 bytes of data
                    uint8_t dataLength = 0; 
 800062a:	2300      	movs	r3, #0
 800062c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                    while(dataLength!=10){
 8000630:	e015      	b.n	800065e <main+0x32e>
                        
                        //Send Dummy byte, to read slave response for the command that was send earlier. 
                        //Master always initiates communication, so send dummy bytes to get slave response.
                        SPI_SendData(SPI2, &dummy_write, 1); 
 8000632:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0x350>)
 800063c:	f000 fbaf 	bl	8000d9e <SPI_SendData>

						// Read Slave response
						SPI_ReceiveData(SPI2, &slaveData[dataLength], 1);
 8000640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000644:	f107 021c 	add.w	r2, r7, #28
 8000648:	4413      	add	r3, r2
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x350>)
 8000650:	f000 fbdb 	bl	8000e0a <SPI_ReceiveData>
						dataLength++;
 8000654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000658:	3301      	adds	r3, #1
 800065a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    while(dataLength!=10){
 800065e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000662:	2b0a      	cmp	r3, #10
 8000664:	d1e5      	bne.n	8000632 <main+0x302>


        // -- Fifth Command - ID read

        // Confirm SPI2 is not busy 
        while((SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG)));  // While SPI is busy, you wait.
 8000666:	bf00      	nop
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <main+0x350>)
 800066c:	f000 fb84 	bl	8000d78 <SPI_GetFlagStatus>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f8      	bne.n	8000668 <main+0x338>

        // SPI2 not busy anymore, disable SPI2 
        SPI_PeripheralControl(SPI2, DISABLE); 
 8000676:	2100      	movs	r1, #0
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <main+0x350>)
 800067a:	f000 fb41 	bl	8000d00 <SPI_PeripheralControl>
    while(1){
 800067e:	e667      	b.n	8000350 <main+0x20>
 8000680:	40003800 	.word	0x40003800
 8000684:	40020000 	.word	0x40020000
 8000688:	08000ed8 	.word	0x08000ed8

0800068c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490e      	ldr	r1, [pc, #56]	; (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0b      	ldr	r4, [pc, #44]	; (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006ba:	f000 fbdd 	bl	8000e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fe37 	bl	8000330 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006d0:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 80006d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006d8:	2000001c 	.word	0x2000001c

080006dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC_IRQHandler>
	...

080006e0 <GPIO_ClockControl>:
 * @Note              -  none

 */


void GPIO_ClockControl(GPIO_RegDef_t *pGPIO_PORT,uint8_t enable_disable ){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]

	/*
	 *  Check if the enable_disable arugment is enable or disable, and then use the
	 *  clock enable macros that we have written in the MCU specific file.
	 */
	if(enable_disable == ENABLE){
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d162      	bne.n	80007b8 <GPIO_ClockControl+0xd8>

		if(pGPIO_PORT == GPIOA){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a65      	ldr	r2, [pc, #404]	; (800088c <GPIO_ClockControl+0x1ac>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <GPIO_ClockControl+0x28>
			GPIOA_PERIPH_CLOCK_EN(); // GPIOA enable clock access MACRO defined in MCU specific header file.
 80006fa:	4b65      	ldr	r3, [pc, #404]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a64      	ldr	r2, [pc, #400]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PERIPH_CLOCK_DI();
		}else if(pGPIO_PORT == GPIOI){
			GPIOI_PERIPH_CLOCK_DI();
		}
	}
}
 8000706:	e0bc      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a62      	ldr	r2, [pc, #392]	; (8000894 <GPIO_ClockControl+0x1b4>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <GPIO_ClockControl+0x3e>
			GPIOB_PERIPH_CLOCK_EN();
 8000710:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	4a5e      	ldr	r2, [pc, #376]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071c:	e0b1      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a5d      	ldr	r2, [pc, #372]	; (8000898 <GPIO_ClockControl+0x1b8>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <GPIO_ClockControl+0x54>
			GPIOC_PERIPH_CLOCK_EN();
 8000726:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a59      	ldr	r2, [pc, #356]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000732:	e0a6      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a59      	ldr	r2, [pc, #356]	; (800089c <GPIO_ClockControl+0x1bc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <GPIO_ClockControl+0x6a>
			GPIOD_PERIPH_CLOCK_EN();
 800073c:	4b54      	ldr	r3, [pc, #336]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a53      	ldr	r2, [pc, #332]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000748:	e09b      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a54      	ldr	r2, [pc, #336]	; (80008a0 <GPIO_ClockControl+0x1c0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <GPIO_ClockControl+0x80>
			GPIOE_PERIPH_CLOCK_EN();
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a4e      	ldr	r2, [pc, #312]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800075e:	e090      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a50      	ldr	r2, [pc, #320]	; (80008a4 <GPIO_ClockControl+0x1c4>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <GPIO_ClockControl+0x96>
			GPIOF_PERIPH_CLOCK_EN();
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000774:	e085      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a4b      	ldr	r2, [pc, #300]	; (80008a8 <GPIO_ClockControl+0x1c8>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <GPIO_ClockControl+0xac>
			GPIOG_PERIPH_CLOCK_EN();
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a43      	ldr	r2, [pc, #268]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078a:	e07a      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <GPIO_ClockControl+0x1cc>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <GPIO_ClockControl+0xc2>
			GPIOH_PERIPH_CLOCK_EN();
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800079a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a0:	e06f      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a42      	ldr	r2, [pc, #264]	; (80008b0 <GPIO_ClockControl+0x1d0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d16b      	bne.n	8000882 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_EN();
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b6:	e064      	b.n	8000882 <GPIO_ClockControl+0x1a2>
	}else if(enable_disable == DISABLE){
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d161      	bne.n	8000882 <GPIO_ClockControl+0x1a2>
		if(pGPIO_PORT == GPIOA){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <GPIO_ClockControl+0x1ac>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_ClockControl+0xf4>
			GPIOA_PERIPH_CLOCK_DI(); // GPIOA disable clock access MACRO defined in MCU specific header file.
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d2:	e056      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <GPIO_ClockControl+0x1b4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <GPIO_ClockControl+0x10a>
			GPIOB_PERIPH_CLOCK_DI();
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007e2:	f023 0302 	bic.w	r3, r3, #2
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e8:	e04b      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <GPIO_ClockControl+0x1b8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_ClockControl+0x120>
			GPIOC_PERIPH_CLOCK_DI();
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a26      	ldr	r2, [pc, #152]	; (8000890 <GPIO_ClockControl+0x1b0>)
 80007f8:	f023 0304 	bic.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fe:	e040      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a26      	ldr	r2, [pc, #152]	; (800089c <GPIO_ClockControl+0x1bc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <GPIO_ClockControl+0x136>
			GPIOD_PERIPH_CLOCK_DI();
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a20      	ldr	r2, [pc, #128]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800080e:	f023 0308 	bic.w	r3, r3, #8
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000814:	e035      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <GPIO_ClockControl+0x1c0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <GPIO_ClockControl+0x14c>
			GPIOE_PERIPH_CLOCK_DI();
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000824:	f023 0310 	bic.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082a:	e02a      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <GPIO_ClockControl+0x1c4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_ClockControl+0x162>
			GPIOF_PERIPH_CLOCK_DI();
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a15      	ldr	r2, [pc, #84]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800083a:	f023 0320 	bic.w	r3, r3, #32
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000840:	e01f      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <GPIO_ClockControl+0x1c8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_ClockControl+0x178>
			GPIOG_PERIPH_CLOCK_DI();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000856:	e014      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <GPIO_ClockControl+0x1cc>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d106      	bne.n	800086e <GPIO_ClockControl+0x18e>
			GPIOH_PERIPH_CLOCK_DI();
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800086c:	e009      	b.n	8000882 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <GPIO_ClockControl+0x1d0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d105      	bne.n	8000882 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_DI();
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <GPIO_ClockControl+0x1b0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <GPIO_ClockControl+0x1b0>)
 800087c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40020000 	.word	0x40020000
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021c00 	.word	0x40021c00
 80008b0:	40022000 	.word	0x40022000

080008b4 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
		
	uint32_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
						// The temp variable needs to be size of 32 bits, because MODER register is 32 bits wide.

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d820      	bhi.n	800090a <GPIO_Init+0x56>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2103      	movs	r1, #3
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	400a      	ands	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e0dc      	b.n	8000ac4 <GPIO_Init+0x210>
	}else {

		// Do this for if the selected pin mode is one of the Interrupt Modes.

		if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	795b      	ldrb	r3, [r3, #5]
 800090e:	2b04      	cmp	r3, #4
 8000910:	d117      	bne.n	8000942 <GPIO_Init+0x8e>
			// 1. Configure the Falling Edge Trigger Selection Register  
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000912:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <GPIO_Init+0x19c>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	7912      	ldrb	r2, [r2, #4]
 800091a:	4611      	mov	r1, r2
 800091c:	2201      	movs	r2, #1
 800091e:	408a      	lsls	r2, r1
 8000920:	4611      	mov	r1, r2
 8000922:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <GPIO_Init+0x19c>)
 8000924:	430b      	orrs	r3, r1
 8000926:	60d3      	str	r3, [r2, #12]

			// Clear the Corresponding Rising Edge Trigger Selection Register - Just to be safe.   
			  EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000928:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <GPIO_Init+0x19c>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7912      	ldrb	r2, [r2, #4]
 8000930:	4611      	mov	r1, r2
 8000932:	2201      	movs	r2, #1
 8000934:	408a      	lsls	r2, r1
 8000936:	43d2      	mvns	r2, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <GPIO_Init+0x19c>)
 800093c:	400b      	ands	r3, r1
 800093e:	6093      	str	r3, [r2, #8]
 8000940:	e035      	b.n	80009ae <GPIO_Init+0xfa>

		}else if (pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_EDGE_INTERRUPT_MODE){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	2b05      	cmp	r3, #5
 8000948:	d117      	bne.n	800097a <GPIO_Init+0xc6>
			// 1. Configure the Rising Edge Trigger Selection Register  
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <GPIO_Init+0x19c>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	7912      	ldrb	r2, [r2, #4]
 8000952:	4611      	mov	r1, r2
 8000954:	2201      	movs	r2, #1
 8000956:	408a      	lsls	r2, r1
 8000958:	4611      	mov	r1, r2
 800095a:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <GPIO_Init+0x19c>)
 800095c:	430b      	orrs	r3, r1
 800095e:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <GPIO_Init+0x19c>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7912      	ldrb	r2, [r2, #4]
 8000968:	4611      	mov	r1, r2
 800096a:	2201      	movs	r2, #1
 800096c:	408a      	lsls	r2, r1
 800096e:	43d2      	mvns	r2, r2
 8000970:	4611      	mov	r1, r2
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <GPIO_Init+0x19c>)
 8000974:	400b      	ands	r3, r1
 8000976:	60d3      	str	r3, [r2, #12]
 8000978:	e019      	b.n	80009ae <GPIO_Init+0xfa>

		}else if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_FALLING_INTERRUPT_MODE){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	2b06      	cmp	r3, #6
 8000980:	d115      	bne.n	80009ae <GPIO_Init+0xfa>

			// 1. Configure both Rising Edge Trigger & Falling Edge Trigger Selection Register 
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <GPIO_Init+0x19c>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	7912      	ldrb	r2, [r2, #4]
 800098a:	4611      	mov	r1, r2
 800098c:	2201      	movs	r2, #1
 800098e:	408a      	lsls	r2, r1
 8000990:	4611      	mov	r1, r2
 8000992:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <GPIO_Init+0x19c>)
 8000994:	430b      	orrs	r3, r1
 8000996:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 	  
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <GPIO_Init+0x19c>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7912      	ldrb	r2, [r2, #4]
 80009a0:	4611      	mov	r1, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	408a      	lsls	r2, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <GPIO_Init+0x19c>)
 80009aa:	430b      	orrs	r3, r1
 80009ac:	60d3      	str	r3, [r2, #12]
			
				uint8_t temp1;
				uint8_t temp2; 

				// Gives the value of EXTICRx Register 
				temp1 = (pGPIOHandle->PinConfig.PinMode) / 5; 
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <GPIO_Init+0x1a0>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	74fb      	strb	r3, [r7, #19]
				// Gives the value of which field in EXTICRx to configure
				temp2 = (pGPIOHandle->PinConfig.PinMode) % 5; 
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	795a      	ldrb	r2, [r3, #5]
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <GPIO_Init+0x1a0>)
 80009c2:	fba3 1302 	umull	r1, r3, r3, r2
 80009c6:	0899      	lsrs	r1, r3, #2
 80009c8:	460b      	mov	r3, r1
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	74bb      	strb	r3, [r7, #18]

				uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx_BASEADDR); // This macro will return the portCode corresponding to the baseaddress it receives.
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <GPIO_Init+0x1a4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d04f      	beq.n	8000a7c <GPIO_Init+0x1c8>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <GPIO_Init+0x1a8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d032      	beq.n	8000a4c <GPIO_Init+0x198>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <GPIO_Init+0x1ac>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d02b      	beq.n	8000a48 <GPIO_Init+0x194>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <GPIO_Init+0x1b0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d024      	beq.n	8000a44 <GPIO_Init+0x190>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <GPIO_Init+0x1b4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d01d      	beq.n	8000a40 <GPIO_Init+0x18c>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <GPIO_Init+0x1b8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d016      	beq.n	8000a3c <GPIO_Init+0x188>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <GPIO_Init+0x1bc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00f      	beq.n	8000a38 <GPIO_Init+0x184>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <GPIO_Init+0x1c0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d008      	beq.n	8000a34 <GPIO_Init+0x180>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <GPIO_Init+0x1c4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <GPIO_Init+0x17c>
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	e026      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e024      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a34:	2307      	movs	r3, #7
 8000a36:	e022      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a38:	2306      	movs	r3, #6
 8000a3a:	e020      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	e01e      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a40:	2304      	movs	r3, #4
 8000a42:	e01c      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a44:	2303      	movs	r3, #3
 8000a46:	e01a      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e018      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e016      	b.n	8000a7e <GPIO_Init+0x1ca>
 8000a50:	40013c00 	.word	0x40013c00
 8000a54:	cccccccd 	.word	0xcccccccd
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40021400 	.word	0x40021400
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40021c00 	.word	0x40021c00
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	747b      	strb	r3, [r7, #17]
				SYSCFG_PERIPH_CLOCK_EN();   												// Enable clock access to System Configuration Peripheral before you configure its register
 8000a80:	4b60      	ldr	r3, [pc, #384]	; (8000c04 <GPIO_Init+0x350>)
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	4a5f      	ldr	r2, [pc, #380]	; (8000c04 <GPIO_Init+0x350>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6453      	str	r3, [r2, #68]	; 0x44
				//								The starting position of the field
				//										|
				SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 8000a8c:	4a5e      	ldr	r2, [pc, #376]	; (8000c08 <GPIO_Init+0x354>)
 8000a8e:	7cfb      	ldrb	r3, [r7, #19]
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	7c79      	ldrb	r1, [r7, #17]
 8000a98:	7cbb      	ldrb	r3, [r7, #18]
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	4959      	ldr	r1, [pc, #356]	; (8000c08 <GPIO_Init+0x354>)
 8000aa4:	7cfb      	ldrb	r3, [r7, #19]
 8000aa6:	4302      	orrs	r2, r0
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				
			// 3. Enable the respective EXTI line to allow interrupts to be send to the Processor via NVIC - using Interrupt Mask Register
		
			EXTI->IMR |= (1<< pGPIOHandle->PinConfig.PinNumber); // This will Enable the EXTI line corresponding to the Pin number. 
 8000aae:	4b57      	ldr	r3, [pc, #348]	; (8000c0c <GPIO_Init+0x358>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	7912      	ldrb	r2, [r2, #4]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	2201      	movs	r2, #1
 8000aba:	408a      	lsls	r2, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a53      	ldr	r2, [pc, #332]	; (8000c0c <GPIO_Init+0x358>)
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6013      	str	r3, [r2, #0]
			
	}

	
	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	799b      	ldrb	r3, [r3, #6]
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	400a      	ands	r2, r1
 8000af6:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6899      	ldr	r1, [r3, #8]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	430a      	orrs	r2, r1
 8000b06:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	79db      	ldrb	r3, [r3, #7]
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (2* pGPIOHandle->PinConfig.PinNumber));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	400a      	ands	r2, r1
 8000b3a:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68d9      	ldr	r1, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7a1b      	ldrb	r3, [r3, #8]
 8000b54:	461a      	mov	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	408b      	lsls	r3, r1
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	400a      	ands	r2, r1
 8000b7a:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6859      	ldr	r1, [r3, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d131      	bne.n	8000bf8 <GPIO_Init+0x344>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint8_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	743b      	strb	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	73fb      	strb	r3, [r7, #15]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	7c3a      	ldrb	r2, [r7, #16]
 8000bac:	3208      	adds	r2, #8
 8000bae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	7c3a      	ldrb	r2, [r7, #16]
 8000bc6:	4001      	ands	r1, r0
 8000bc8:	3208      	adds	r2, #8
 8000bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	7c3a      	ldrb	r2, [r7, #16]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7a5b      	ldrb	r3, [r3, #9]
 8000bde:	461a      	mov	r2, r3
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	7c3a      	ldrb	r2, [r7, #16]
 8000bf0:	4301      	orrs	r1, r0
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			}*/

	}

}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40013c00 	.word	0x40013c00

08000c10 <GPIO_ReadFromInputPin>:
 * @return            -0 or 1
 *
 * @Note              -

*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIO_PORT, uint8_t pinNumber){
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
//					Grab the Input Data Register, followed by leftshifting the desired bit to the LSB position, followed by masking the remaining bits from Bit 0 - Bit 31, followed by typecasting the uint32_t  as uint8_t, to avoid compiler error.
//							|
	value = (uint8_t) ((pGPIO_PORT->IDR >> pinNumber) & 0x00000001);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	fa22 f303 	lsr.w	r3, r2, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  

 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000c3a:	b480      	push	{r7}
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]

    // Configure SPI_CR1 register first. 

    uint32_t tempReg = 0; // Set all the bits corresponding to CR1 register, followed by assigned this value to the CR1 register. 
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]

    // 1. Configure Device Mode
    
    tempReg |= ((pSPIHandle->SPIConfig.DeviceMode) << SPI_CR1_MSTR); // '2' Because bit 2 of CR1 is used for configuring Master or Slave mode. 
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

    /* Not very clear --> Need to REVIEW spi communication type configurations */ 

    // 2. Configure Bus Configuration, i.e. SPI communication type
    if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_FULL_DUPLEX_MODE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <SPI_Init+0x2c>
    {
        // Set BIDIMODE bit of CR1 as '0' -> Will configure 2-line unidirection data mode
        // resulting in separate line for RX and TX
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e021      	b.n	8000caa <SPI_Init+0x70>
        
        // RXONLY bit is by default = '0' which means Receive and Transmit.
    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_HALF_DUPLEX_MODE){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <SPI_Init+0x3e>
        // Set BIDIMODE bit of CR1 as '1' -> will configure 1-line bidirection data mode, same line for RX and TX 
        tempReg |= (1 << SPI_CR1_BIDIMODE); 
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e018      	b.n	8000caa <SPI_Init+0x70>

    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_TX_ONLY){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	795b      	ldrb	r3, [r3, #5]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d108      	bne.n	8000c92 <SPI_Init+0x58>

        // Clear BIDIMODE bit of CR1 to '0' -> 2-line bidirection data mode, different line for RX & TX
        tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c86:	60fb      	str	r3, [r7, #12]
        // Clear RXONLY bit to '0', basically configuring Full-duplex mode with Transmission ONLY, and ignoring Receive 
        tempReg &= ~(1<<SPI_CR1_RXONLY);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e00b      	b.n	8000caa <SPI_Init+0x70>
        

    }else if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_RX_ONLY){
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	795b      	ldrb	r3, [r3, #5]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d107      	bne.n	8000caa <SPI_Init+0x70>
        // Clear BIDIMODE bit of CR1 to '0' -> 2-line unidirectional data mode, i.e. Full duplex SPI communication type
        tempReg &= ~(1<<SPI_CR1_BIDIMODE); 
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca0:	60fb      	str	r3, [r7, #12]
        // Set RXONLY bit to force clock generation,i.e. if the device is master, you want to only RECEIVE.
        tempReg |= (1<<SPI_CR1_RXONLY);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca8:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure Serial Clock but setting Baudrate. 
    tempReg |= ((pSPIHandle->SPIConfig.SclkSpeed) << SPI_CR1_BR);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	799b      	ldrb	r3, [r3, #6]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    // 4. Configure Data Frame Format
    tempReg |= ((pSPIHandle->SPIConfig.DataFrameFormat) << SPI_CR1_DFF); 
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	79db      	ldrb	r3, [r3, #7]
 8000cbc:	02db      	lsls	r3, r3, #11
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

    // 5. Configure ClockPolarity (CPOL)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPolarity) << SPI_CR1_CPOL); 
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7a1b      	ldrb	r3, [r3, #8]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    // 6. Configure ClockPhase (CPHA)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPhase) << SPI_CR1_CPHA); 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a5b      	ldrb	r3, [r3, #9]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    // 7. Configure Software Slave Management 
    tempReg |= ((pSPIHandle->SPIConfig.SlaveManagementType) << SPI_CR1_SSM); 
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7a9b      	ldrb	r3, [r3, #10]
 8000ce4:	025b      	lsls	r3, r3, #9
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]

    // Assign tempReg to your SPIx's CR1 register.
    pSPIHandle->pSPIx_BASEADDR->CR1 = tempReg;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	601a      	str	r2, [r3, #0]

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SPI_PeripheralControl>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable == ENABLE){
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d106      	bne.n	8000d20 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000d1e:	e008      	b.n	8000d32 <SPI_PeripheralControl+0x32>
    }else if(Enable_Disable == DISABLE){
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <SPI_PeripheralControl+0x32>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <SPI_SSOEConfig>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable==ENABLE){
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d106      	bne.n	8000d5c <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f043 0204 	orr.w	r2, r3, #4
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	605a      	str	r2, [r3, #4]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8000d5a:	e008      	b.n	8000d6e <SPI_SSOEConfig+0x32>
    }else if(Enable_Disable == DISABLE){
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <SPI_SSOEConfig+0x32>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f023 0204 	bic.w	r2, r3, #4
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	605a      	str	r2, [r3, #4]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SPI_GetFlagStatus>:
 *
 * @return            -  Either '1' or '0' 
 *
 * @Note              - None
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]

    if(pSPIx->SR & FlagName){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <SPI_SendData>:
 *                       This is a "Blocking" implementation of SPI send, you wait till TXE is set, before you can push data into the Tx Buffer.
 *                        It is also called Polling method, because we're waiting till Transmit buffer gets empty, the function will stay there.                        
 *                        There are problems with this method of implementation, what if something wrong with the hardware and the TXE flag is NEVER set, then the system 
                        will be stuck here forever, this when you need a WATCHDOG module to reset the system if it becomes non-responsive for a certain time period. 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLength){
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]

    while(DataLength > 0){
 8000daa:	e027      	b.n	8000dfc <SPI_SendData+0x5e>
        //1. Wait until TXE is set
                    // while( !(pSPIx->SR & (1 << 1)) ); // Checking if TXE flag is set in the Status Register, implement the condition using a function defined in this source. 
        while(! SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG));  // Same as above statement, but a much cleaner method of implementation. If TXNE, you stay here, if empty, you push data into Tx Buffer
 8000dac:	bf00      	nop
 8000dae:	2102      	movs	r1, #2
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f7ff ffe1 	bl	8000d78 <SPI_GetFlagStatus>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f8      	beq.n	8000dae <SPI_SendData+0x10>
    
        //2. Check DFF bit CR1 to determine how many bytes to upload in the DR, which will push the data bytes to the Tx Buffer
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00e      	beq.n	8000de6 <SPI_SendData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data. Without the uint16_t* typecast, you would be dereferencing a byte of data. 
            //                  |
            pSPIx->DR = *((uint16_t *)pTxBuffer);
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	60da      	str	r2, [r3, #12]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pTxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	e00a      	b.n	8000dfc <SPI_SendData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to upload a byte at a time. 
            pSPIx->DR = *(pTxBuffer); // Don't need typecasting as pointer is of 8-bit type. 
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	60da      	str	r2, [r3, #12]
            DataLength--; 
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
            pTxBuffer++; 
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
    while(DataLength > 0){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1d4      	bne.n	8000dac <SPI_SendData+0xe>
        }
        
    }

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <SPI_ReceiveData>:
 * @return            -  None
 *
 * @Note              -  uint32_t is a standared for defining data length.

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLength){
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]

     while(DataLength > 0){
 8000e16:	e027      	b.n	8000e68 <SPI_ReceiveData+0x5e>
        //1. Wait until RXNE is set, which RX Buffer in the SPI block is not Empty, there is new data available 
                    // while( !(pSPIx->SR & (0 << 1)) ); // Checking if RXNE flag is set in the Status Register, implement the condition using a function defined in this source. 

    	 while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );  // Same as above statement, but a much cleaner method of implementation.
 8000e18:	bf00      	nop
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff ffab 	bl	8000d78 <SPI_GetFlagStatus>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f8      	beq.n	8000e1a <SPI_ReceiveData+0x10>
        
        //2. Check DFF bit CR1 to determine how many bytes to Download/grab/read from the DR, which will push the data bytes from the SPI RX buffer to the RX buffer of the program
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00e      	beq.n	8000e52 <SPI_ReceiveData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data - in this case you will download/read 16-bits of data from SPI's RX buffer. Without the uint16_t* typecast, you would be storing a byte of data.
            //                  |
            *((uint16_t *)pRxBuffer) = pSPIx->DR;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	801a      	strh	r2, [r3, #0]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pRxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	e00a      	b.n	8000e68 <SPI_ReceiveData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to read a byte at a time from the SPI's RX buffer 
            *(pRxBuffer) = pSPIx->DR; // Don't need typecasting as pointer is of 8-bit type. 
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	701a      	strb	r2, [r3, #0]
            DataLength--; 
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
            pRxBuffer++; 
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
     while(DataLength > 0){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1d4      	bne.n	8000e18 <SPI_ReceiveData+0xe>
        }
        
    }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <__libc_init_array>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	4e0d      	ldr	r6, [pc, #52]	; (8000eb0 <__libc_init_array+0x38>)
 8000e7c:	4c0d      	ldr	r4, [pc, #52]	; (8000eb4 <__libc_init_array+0x3c>)
 8000e7e:	1ba4      	subs	r4, r4, r6
 8000e80:	10a4      	asrs	r4, r4, #2
 8000e82:	2500      	movs	r5, #0
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	d109      	bne.n	8000e9c <__libc_init_array+0x24>
 8000e88:	4e0b      	ldr	r6, [pc, #44]	; (8000eb8 <__libc_init_array+0x40>)
 8000e8a:	4c0c      	ldr	r4, [pc, #48]	; (8000ebc <__libc_init_array+0x44>)
 8000e8c:	f000 f818 	bl	8000ec0 <_init>
 8000e90:	1ba4      	subs	r4, r4, r6
 8000e92:	10a4      	asrs	r4, r4, #2
 8000e94:	2500      	movs	r5, #0
 8000e96:	42a5      	cmp	r5, r4
 8000e98:	d105      	bne.n	8000ea6 <__libc_init_array+0x2e>
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea0:	4798      	blx	r3
 8000ea2:	3501      	adds	r5, #1
 8000ea4:	e7ee      	b.n	8000e84 <__libc_init_array+0xc>
 8000ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eaa:	4798      	blx	r3
 8000eac:	3501      	adds	r5, #1
 8000eae:	e7f2      	b.n	8000e96 <__libc_init_array+0x1e>
 8000eb0:	08000ef0 	.word	0x08000ef0
 8000eb4:	08000ef0 	.word	0x08000ef0
 8000eb8:	08000ef0 	.word	0x08000ef0
 8000ebc:	08000ef4 	.word	0x08000ef4

08000ec0 <_init>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr

08000ecc <_fini>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr
