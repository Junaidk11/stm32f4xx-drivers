
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000518  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c0  080006c8  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c0  080006c0  000106c8  2**0
                  CONTENTS
  4 .ARM          00000000  080006c0  080006c0  000106c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c0  080006c8  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007f3  00000000  00000000  000106f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000021d  00000000  00000000  00010ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  000111c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000137d  00000000  00000000  00011250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a70  00000000  00000000  000125cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000057dd  00000000  00000000  0001303d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001881a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00018898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006a8 	.word	0x080006a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006a8 	.word	0x080006a8

080001e8 <Delay>:
 */

#include "stm32f40xx.h" // Include device specific header file, to get access to the inner layout of your target.
#include "gpio_driver.h" // Include GPIO driver header file, this will give you access to APIs that can be used to initialize and use the GPIO peripheral of your target.

void Delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	int i = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
	for (;i<5000;i++);
 80001f2:	e002      	b.n	80001fa <Delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f241 3287 	movw	r2, #4999	; 0x1387
 8000200:	4293      	cmp	r3, r2
 8000202:	ddf7      	ble.n	80001f4 <Delay+0xc>
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
	...

08000210 <main>:
int main(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpio_push_pull; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.
	gpio_push_pull.pGPIOx_BASEADDR = GPIOD; 	// Set the baseaddress of the Port you're configuring - Green LED is connected to Port D, Pin 12.
 8000216:	4b0d      	ldr	r3, [pc, #52]	; (800024c <main+0x3c>)
 8000218:	607b      	str	r3, [r7, #4]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 12 in Push-pull configuration.
	gpio_push_pull.PinConfig.PinNumber = GPIO_PIN_14;
 800021a:	230e      	movs	r3, #14
 800021c:	723b      	strb	r3, [r7, #8]
	gpio_push_pull.PinConfig.PinMode = GPIO_PIN_OUTPUT_MODE; 		 // Set the pin in Output mode.
 800021e:	2301      	movs	r3, #1
 8000220:	727b      	strb	r3, [r7, #9]
	gpio_push_pull.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; //Set the I/O pin in PUSH-PULL configuration of Output mode
 8000222:	2300      	movs	r3, #0
 8000224:	733b      	strb	r3, [r7, #12]
	gpio_push_pull.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;      // In Push-pull configuration, don't need pull-up or pull-down resistor.
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]
	gpio_push_pull.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;   // Speed doesn't really matter
 800022a:	2301      	movs	r3, #1
 800022c:	72bb      	strb	r3, [r7, #10]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOD, ENABLE);
 800022e:	2101      	movs	r1, #1
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <main+0x3c>)
 8000232:	f000 f837 	bl	80002a4 <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_push_pull);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f935 	bl	80004a8 <GPIO_Init>

	while(1){

		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_14); // Toggle Pin 12
 800023e:	210e      	movs	r1, #14
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <main+0x3c>)
 8000242:	f000 f9f8 	bl	8000636 <GPIO_ToggleOutputPin>
		Delay(); 								  // Set a software delay
 8000246:	f7ff ffcf 	bl	80001e8 <Delay>
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_14); // Toggle Pin 12
 800024a:	e7f8      	b.n	800023e <main+0x2e>
 800024c:	40020c00 	.word	0x40020c00

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490e      	ldr	r1, [pc, #56]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0b      	ldr	r4, [pc, #44]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800027a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f9ef 	bl	8000660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffc5 	bl	8000210 <main>

08000286 <LoopForever>:

LoopForever:
    b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	080006c8 	.word	0x080006c8
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
	...

080002a4 <GPIO_ClockControl>:
 * @Note              -  none

 */


void GPIO_ClockControl(GPIO_RegDef_t *pGPIO_PORT,uint8_t enable_disable ){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]

	/*
	 *  Check if the enable_disable arugment is enable or disable, and then use the
	 *  clock enable macros that we have written in the MCU specific file.
	 */
	if(enable_disable == ENABLE){
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d16d      	bne.n	8000392 <GPIO_ClockControl+0xee>

		if(pGPIO_PORT == GPIOA){
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a70      	ldr	r2, [pc, #448]	; (800047c <GPIO_ClockControl+0x1d8>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_ClockControl+0x28>
			GPIOA_PERIPH_CLOCK_EN(); // GPIOA enable clock access MACRO defined in MCU specific header file.
 80002be:	4b70      	ldr	r3, [pc, #448]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a6f      	ldr	r2, [pc, #444]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PERIPH_CLOCK_DI();
		}else if(pGPIO_PORT == GPIOK){
			GPIOK_PERIPH_CLOCK_DI();
		}
	}
}
 80002ca:	e0d2      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOB){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a6d      	ldr	r2, [pc, #436]	; (8000484 <GPIO_ClockControl+0x1e0>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_ClockControl+0x3e>
			GPIOB_PERIPH_CLOCK_EN();
 80002d4:	4b6a      	ldr	r3, [pc, #424]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a69      	ldr	r2, [pc, #420]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e0c7      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOC){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a68      	ldr	r2, [pc, #416]	; (8000488 <GPIO_ClockControl+0x1e4>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_ClockControl+0x54>
			GPIOC_PERIPH_CLOCK_EN();
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a64      	ldr	r2, [pc, #400]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	e0bc      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOD){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a64      	ldr	r2, [pc, #400]	; (800048c <GPIO_ClockControl+0x1e8>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_ClockControl+0x6a>
			GPIOD_PERIPH_CLOCK_EN();
 8000300:	4b5f      	ldr	r3, [pc, #380]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a5e      	ldr	r2, [pc, #376]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030c:	e0b1      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOE){
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a5f      	ldr	r2, [pc, #380]	; (8000490 <GPIO_ClockControl+0x1ec>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_ClockControl+0x80>
			GPIOE_PERIPH_CLOCK_EN();
 8000316:	4b5a      	ldr	r3, [pc, #360]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a59      	ldr	r2, [pc, #356]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000322:	e0a6      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOF){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a5b      	ldr	r2, [pc, #364]	; (8000494 <GPIO_ClockControl+0x1f0>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_ClockControl+0x96>
			GPIOF_PERIPH_CLOCK_EN();
 800032c:	4b54      	ldr	r3, [pc, #336]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a53      	ldr	r2, [pc, #332]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000338:	e09b      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOG){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <GPIO_ClockControl+0x1f4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_ClockControl+0xac>
			GPIOG_PERIPH_CLOCK_EN();
 8000342:	4b4f      	ldr	r3, [pc, #316]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a4e      	ldr	r2, [pc, #312]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e090      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOI){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a52      	ldr	r2, [pc, #328]	; (800049c <GPIO_ClockControl+0x1f8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_ClockControl+0xc2>
			GPIOI_PERIPH_CLOCK_EN();
 8000358:	4b49      	ldr	r3, [pc, #292]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a48      	ldr	r2, [pc, #288]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e085      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOJ){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a4d      	ldr	r2, [pc, #308]	; (80004a0 <GPIO_ClockControl+0x1fc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_ClockControl+0xd8>
			GPIOJ_PERIPH_CLOCK_EN();
 800036e:	4b44      	ldr	r3, [pc, #272]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a43      	ldr	r2, [pc, #268]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e07a      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOK){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a49      	ldr	r2, [pc, #292]	; (80004a4 <GPIO_ClockControl+0x200>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d176      	bne.n	8000472 <GPIO_ClockControl+0x1ce>
			GPIOK_PERIPH_CLOCK_EN();
 8000384:	4b3e      	ldr	r3, [pc, #248]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a3d      	ldr	r2, [pc, #244]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e06f      	b.n	8000472 <GPIO_ClockControl+0x1ce>
	}else if(enable_disable == DISABLE){
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d16c      	bne.n	8000472 <GPIO_ClockControl+0x1ce>
		if(pGPIO_PORT == GPIOA){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a38      	ldr	r2, [pc, #224]	; (800047c <GPIO_ClockControl+0x1d8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_ClockControl+0x10a>
			GPIOA_PERIPH_CLOCK_DI(); // GPIOA disable clock access MACRO defined in MCU specific header file.
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a36      	ldr	r2, [pc, #216]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e061      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOB){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a34      	ldr	r2, [pc, #208]	; (8000484 <GPIO_ClockControl+0x1e0>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_ClockControl+0x120>
			GPIOB_PERIPH_CLOCK_DI();
 80003b6:	4b32      	ldr	r3, [pc, #200]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a31      	ldr	r2, [pc, #196]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e056      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOC){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a30      	ldr	r2, [pc, #192]	; (8000488 <GPIO_ClockControl+0x1e4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_ClockControl+0x136>
			GPIOC_PERIPH_CLOCK_DI();
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003d2:	f023 0304 	bic.w	r3, r3, #4
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e04b      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOD){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <GPIO_ClockControl+0x1e8>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_ClockControl+0x14c>
			GPIOD_PERIPH_CLOCK_DI();
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a26      	ldr	r2, [pc, #152]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003e8:	f023 0308 	bic.w	r3, r3, #8
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e040      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOE){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a27      	ldr	r2, [pc, #156]	; (8000490 <GPIO_ClockControl+0x1ec>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_ClockControl+0x162>
			GPIOE_PERIPH_CLOCK_DI();
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a20      	ldr	r2, [pc, #128]	; (8000480 <GPIO_ClockControl+0x1dc>)
 80003fe:	f023 0310 	bic.w	r3, r3, #16
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e035      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOF){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a22      	ldr	r2, [pc, #136]	; (8000494 <GPIO_ClockControl+0x1f0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_ClockControl+0x178>
			GPIOF_PERIPH_CLOCK_DI();
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000414:	f023 0320 	bic.w	r3, r3, #32
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e02a      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOG){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <GPIO_ClockControl+0x1f4>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_ClockControl+0x18e>
			GPIOG_PERIPH_CLOCK_DI();
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800042a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e01f      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOI){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a19      	ldr	r2, [pc, #100]	; (800049c <GPIO_ClockControl+0x1f8>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_ClockControl+0x1a4>
			GPIOI_PERIPH_CLOCK_DI();
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e014      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOJ){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <GPIO_ClockControl+0x1fc>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_ClockControl+0x1ba>
			GPIOJ_PERIPH_CLOCK_DI();
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000456:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e009      	b.n	8000472 <GPIO_ClockControl+0x1ce>
		}else if(pGPIO_PORT == GPIOK){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_ClockControl+0x200>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d105      	bne.n	8000472 <GPIO_ClockControl+0x1ce>
			GPIOK_PERIPH_CLOCK_DI();
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <GPIO_ClockControl+0x1dc>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <GPIO_ClockControl+0x1dc>)
 800046c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40020000 	.word	0x40020000
 8000480:	40023800 	.word	0x40023800
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800
 800048c:	40020c00 	.word	0x40020c00
 8000490:	40021000 	.word	0x40021000
 8000494:	40021400 	.word	0x40021400
 8000498:	40021800 	.word	0x40021800
 800049c:	40022000 	.word	0x40022000
 80004a0:	40022400 	.word	0x40022400
 80004a4:	40022800 	.word	0x40022800

080004a8 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	uint8_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 80004b0:	2300      	movs	r3, #0
 80004b2:	75fb      	strb	r3, [r7, #23]

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d81e      	bhi.n	80004fa <GPIO_Init+0x52>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	461a      	mov	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	75fb      	strb	r3, [r7, #23]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << pGPIOHandle->PinConfig.PinNumber);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	4619      	mov	r1, r3
 80004da:	2303      	movs	r3, #3
 80004dc:	408b      	lsls	r3, r1
 80004de:	43db      	mvns	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	400a      	ands	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	7dfa      	ldrb	r2, [r7, #23]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
	}



	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 80004fa:	2300      	movs	r3, #0
 80004fc:	75fb      	strb	r3, [r7, #23]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	799b      	ldrb	r3, [r3, #6]
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	75fb      	strb	r3, [r7, #23]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (pGPIOHandle->PinConfig.PinNumber));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689a      	ldr	r2, [r3, #8]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	4619      	mov	r1, r3
 800051c:	2303      	movs	r3, #3
 800051e:	408b      	lsls	r3, r1
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6899      	ldr	r1, [r3, #8]
 8000532:	7dfa      	ldrb	r2, [r7, #23]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	430a      	orrs	r2, r1
 800053a:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	79db      	ldrb	r3, [r3, #7]
 8000544:	461a      	mov	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	75fb      	strb	r3, [r7, #23]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (pGPIOHandle->PinConfig.PinNumber));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	4619      	mov	r1, r3
 800055e:	2303      	movs	r3, #3
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	400a      	ands	r2, r1
 800056c:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68d9      	ldr	r1, [r3, #12]
 8000574:	7dfa      	ldrb	r2, [r7, #23]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	430a      	orrs	r2, r1
 800057c:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	75fb      	strb	r3, [r7, #23]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	75fb      	strb	r3, [r7, #23]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	2301      	movs	r3, #1
 80005a0:	408b      	lsls	r3, r1
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	400a      	ands	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6859      	ldr	r1, [r3, #4]
 80005b4:	7dfa      	ldrb	r2, [r7, #23]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	795b      	ldrb	r3, [r3, #5]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d132      	bne.n	800062c <GPIO_Init+0x184>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint32_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	613b      	str	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	60fb      	str	r3, [r7, #12]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	3208      	adds	r2, #8
 80005e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	210f      	movs	r1, #15
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4011      	ands	r1, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	3208      	adds	r2, #8
 80005fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	3208      	adds	r2, #8
 800060a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a5b      	ldrb	r3, [r3, #9]
 8000612:	4619      	mov	r1, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4311      	orrs	r1, r2
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	3208      	adds	r2, #8
 8000628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 800062c:	bf00      	nop
 800062e:	371c      	adds	r7, #28
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <GPIO_ToggleOutputPin>:
 * @return            -none
 *
 * @Note              -

*/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIO_PORT, uint8_t pinNumber){
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	460b      	mov	r3, r1
 8000640:	70fb      	strb	r3, [r7, #3]
		pGPIO_PORT->ODR ^= (1 << pinNumber);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	78fa      	ldrb	r2, [r7, #3]
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	405a      	eors	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	615a      	str	r2, [r3, #20]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <__libc_init_array>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	4e0d      	ldr	r6, [pc, #52]	; (8000698 <__libc_init_array+0x38>)
 8000664:	4c0d      	ldr	r4, [pc, #52]	; (800069c <__libc_init_array+0x3c>)
 8000666:	1ba4      	subs	r4, r4, r6
 8000668:	10a4      	asrs	r4, r4, #2
 800066a:	2500      	movs	r5, #0
 800066c:	42a5      	cmp	r5, r4
 800066e:	d109      	bne.n	8000684 <__libc_init_array+0x24>
 8000670:	4e0b      	ldr	r6, [pc, #44]	; (80006a0 <__libc_init_array+0x40>)
 8000672:	4c0c      	ldr	r4, [pc, #48]	; (80006a4 <__libc_init_array+0x44>)
 8000674:	f000 f818 	bl	80006a8 <_init>
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	2500      	movs	r5, #0
 800067e:	42a5      	cmp	r5, r4
 8000680:	d105      	bne.n	800068e <__libc_init_array+0x2e>
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000688:	4798      	blx	r3
 800068a:	3501      	adds	r5, #1
 800068c:	e7ee      	b.n	800066c <__libc_init_array+0xc>
 800068e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000692:	4798      	blx	r3
 8000694:	3501      	adds	r5, #1
 8000696:	e7f2      	b.n	800067e <__libc_init_array+0x1e>
 8000698:	080006c0 	.word	0x080006c0
 800069c:	080006c0 	.word	0x080006c0
 80006a0:	080006c0 	.word	0x080006c0
 80006a4:	080006c4 	.word	0x080006c4

080006a8 <_init>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	bf00      	nop
 80006ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ae:	bc08      	pop	{r3}
 80006b0:	469e      	mov	lr, r3
 80006b2:	4770      	bx	lr

080006b4 <_fini>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr
