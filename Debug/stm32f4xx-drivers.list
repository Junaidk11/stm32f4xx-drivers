
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a80  08000a88  00010a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a80  08000a80  00010a88  2**0
                  CONTENTS
  4 .ARM          00000000  08000a80  08000a80  00010a88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a80  08000a88  00010a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a80  08000a80  00010a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a88  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010a88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001191  00000000  00000000  00010ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000034a  00000000  00000000  00011c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  00011f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00012058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e8f  00000000  00000000  000120f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cb4  00000000  00000000  00013f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009114  00000000  00000000  00014c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001dd4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001ddcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a68 	.word	0x08000a68

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a68 	.word	0x08000a68

080001e8 <delay>:
 */ 

#include "gpio_driver.h" 
#include <string.h>

void delay(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	// This will introduce ~200ms delay when sysclk is 16Mhz
	for (uint32_t i =0; i< 500000/2 ; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <delay+0x24>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <main>:
int main(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	//++ 1 - Initialize LED
	GPIO_Handle_t gpio_push_pull; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.

	memset(&gpio_push_pull, 0, sizeof(gpio_push_pull));  // Standard Function that sets all the registers of gpio_push_pull to zero.
 8000216:	f107 030c 	add.w	r3, r7, #12
 800021a:	220c      	movs	r2, #12
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fc1a 	bl	8000a58 <memset>

	gpio_push_pull.pGPIOx_BASEADDR = GPIOD; 	// Set the baseaddress of the Port you're configuring - Green LED is connected to Port D, Pin 12.
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <main+0x80>)
 8000226:	60fb      	str	r3, [r7, #12]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 12 in Push-pull configuration.
	gpio_push_pull.PinConfig.PinNumber = GPIO_PIN_12;
 8000228:	230c      	movs	r3, #12
 800022a:	743b      	strb	r3, [r7, #16]
	gpio_push_pull.PinConfig.PinMode = GPIO_PIN_OUTPUT_MODE; 		 // Set the pin in Output mode.
 800022c:	2301      	movs	r3, #1
 800022e:	747b      	strb	r3, [r7, #17]
	gpio_push_pull.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; //Set the I/O pin in PUSH-PULL configuration of Output mode
 8000230:	2300      	movs	r3, #0
 8000232:	753b      	strb	r3, [r7, #20]
	gpio_push_pull.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;      // In Push-pull configuration, don't need pull-up or pull-down resistor.
 8000234:	2300      	movs	r3, #0
 8000236:	74fb      	strb	r3, [r7, #19]
	gpio_push_pull.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;   // Speed doesn't really matter
 8000238:	2301      	movs	r3, #1
 800023a:	74bb      	strb	r3, [r7, #18]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOD, ENABLE);
 800023c:	2101      	movs	r1, #1
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <main+0x80>)
 8000240:	f000 f864 	bl	800030c <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_push_pull);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f949 	bl	80004e0 <GPIO_Init>
	//++ 2 - Initialize Button on PD5
	/*   The following statements are for configuring the user button PA0 as an input pin. */

	GPIO_Handle_t gpio_user_button; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.

	memset(&gpio_user_button, 0, sizeof(gpio_user_button));
 800024e:	463b      	mov	r3, r7
 8000250:	220c      	movs	r2, #12
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fbff 	bl	8000a58 <memset>

	gpio_user_button.pGPIOx_BASEADDR = GPIOA; 	    // Set the base-address of the Port you're configuring - User button is connected to Port A, Pin 0.
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0x84>)
 800025c:	603b      	str	r3, [r7, #0]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 0 in input mode.
	gpio_user_button.PinConfig.PinNumber = GPIO_PIN_0;
 800025e:	2300      	movs	r3, #0
 8000260:	713b      	strb	r3, [r7, #4]
	gpio_user_button.PinConfig.PinMode = GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE; 		 // Set the pin in Falling edge interrupt mode.
 8000262:	2304      	movs	r3, #4
 8000264:	717b      	strb	r3, [r7, #5]
	gpio_user_button.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000266:	2300      	movs	r3, #0
 8000268:	71fb      	strb	r3, [r7, #7]
	gpio_user_button.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;                           // Speed doesn't really matter
 800026a:	2301      	movs	r3, #1
 800026c:	71bb      	strb	r3, [r7, #6]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOA, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	4808      	ldr	r0, [pc, #32]	; (8000294 <main+0x84>)
 8000272:	f000 f84b 	bl	800030c <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_user_button);  
 8000276:	463b      	mov	r3, r7
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f931 	bl	80004e0 <GPIO_Init>
	// -- Initialize Button PD5

	// ++ 3- IRQ Configurations - Set Priority and Enable IRQ on the NVIC.

	GPIO_IRQ_Priority_Config(IRQ_NO_EXTI0, NVIC_PRIORITY_15);    // Don't need to set priority if there is only 1 interrupt enabled.
 800027e:	210f      	movs	r1, #15
 8000280:	2006      	movs	r0, #6
 8000282:	f000 fb77 	bl	8000974 <GPIO_IRQ_Priority_Config>
	GPIO_IRQ_Interrupt_Config(IRQ_NO_EXTI0, ENABLE);            // Pin 0 delivers interrupt on EXTI0 line to the Processor via NVIC.
 8000286:	2101      	movs	r1, #1
 8000288:	2006      	movs	r0, #6
 800028a:	f000 faeb 	bl	8000864 <GPIO_IRQ_Interrupt_Config>
	// -- IRQ Configurations - Set Priority and Enable IRQ on the NVIC.

	while(1);
 800028e:	e7fe      	b.n	800028e <main+0x7e>
 8000290:	40020c00 	.word	0x40020c00
 8000294:	40020000 	.word	0x40020000

08000298 <EXTI0_IRQHandler>:
    
}

void EXTI0_IRQHandler(){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

	// To prevent de-bouncing, introduce delay when interrupt occurs, this will prevent the multiple calls of the ISR when you continuous press the user button
	delay();
 800029c:	f7ff ffa4 	bl	80001e8 <delay>

	//++ 4:  Write the application layer ISR function and store the function at the address assigned to IRQ number that will register the interrupt request made.

	//  Handle the Interrupt - call the Driver IRQ handling API here.
	GPIO_IRQHandling(GPIO_PIN_0); // I/O Pin number 0 deliver's interrupts on the EXTI0 line, you clear the pending event here, followed by calling the ISR to handle the interrupt.
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 fb95 	bl	80009d0 <GPIO_IRQHandling>

	// We want to toggle the LED, so we can use the Toggle API here.
	GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_12);
 80002a6:	210c      	movs	r1, #12
 80002a8:	4802      	ldr	r0, [pc, #8]	; (80002b4 <EXTI0_IRQHandler+0x1c>)
 80002aa:	f000 fac7 	bl	800083c <GPIO_ToggleOutputPin>
	//-- 4: Write the application layer ISR function and store the function at the address assigned to IRQ number that will register the interrupt request made.

 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020c00 	.word	0x40020c00

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490e      	ldr	r1, [pc, #56]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0b      	ldr	r4, [pc, #44]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fb93 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff91 	bl	8000210 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000a88 	.word	0x08000a88
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <GPIO_ClockControl>:
 * @Note              -  none

 */


void GPIO_ClockControl(GPIO_RegDef_t *pGPIO_PORT,uint8_t enable_disable ){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]

	/*
	 *  Check if the enable_disable arugment is enable or disable, and then use the
	 *  clock enable macros that we have written in the MCU specific file.
	 */
	if(enable_disable == ENABLE){
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d162      	bne.n	80003e4 <GPIO_ClockControl+0xd8>

		if(pGPIO_PORT == GPIOA){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a65      	ldr	r2, [pc, #404]	; (80004b8 <GPIO_ClockControl+0x1ac>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_ClockControl+0x28>
			GPIOA_PERIPH_CLOCK_EN(); // GPIOA enable clock access MACRO defined in MCU specific header file.
 8000326:	4b65      	ldr	r3, [pc, #404]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a64      	ldr	r2, [pc, #400]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PERIPH_CLOCK_DI();
		}else if(pGPIO_PORT == GPIOI){
			GPIOI_PERIPH_CLOCK_DI();
		}
	}
}
 8000332:	e0bc      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a62      	ldr	r2, [pc, #392]	; (80004c0 <GPIO_ClockControl+0x1b4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_ClockControl+0x3e>
			GPIOB_PERIPH_CLOCK_EN();
 800033c:	4b5f      	ldr	r3, [pc, #380]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a5e      	ldr	r2, [pc, #376]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e0b1      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a5d      	ldr	r2, [pc, #372]	; (80004c4 <GPIO_ClockControl+0x1b8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_ClockControl+0x54>
			GPIOC_PERIPH_CLOCK_EN();
 8000352:	4b5a      	ldr	r3, [pc, #360]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a59      	ldr	r2, [pc, #356]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e0a6      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a59      	ldr	r2, [pc, #356]	; (80004c8 <GPIO_ClockControl+0x1bc>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_ClockControl+0x6a>
			GPIOD_PERIPH_CLOCK_EN();
 8000368:	4b54      	ldr	r3, [pc, #336]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a53      	ldr	r2, [pc, #332]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e09b      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a54      	ldr	r2, [pc, #336]	; (80004cc <GPIO_ClockControl+0x1c0>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_ClockControl+0x80>
			GPIOE_PERIPH_CLOCK_EN();
 800037e:	4b4f      	ldr	r3, [pc, #316]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a4e      	ldr	r2, [pc, #312]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e090      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a50      	ldr	r2, [pc, #320]	; (80004d0 <GPIO_ClockControl+0x1c4>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_ClockControl+0x96>
			GPIOF_PERIPH_CLOCK_EN();
 8000394:	4b49      	ldr	r3, [pc, #292]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a48      	ldr	r2, [pc, #288]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e085      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a4b      	ldr	r2, [pc, #300]	; (80004d4 <GPIO_ClockControl+0x1c8>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_ClockControl+0xac>
			GPIOG_PERIPH_CLOCK_EN();
 80003aa:	4b44      	ldr	r3, [pc, #272]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a43      	ldr	r2, [pc, #268]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e07a      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a47      	ldr	r2, [pc, #284]	; (80004d8 <GPIO_ClockControl+0x1cc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_ClockControl+0xc2>
			GPIOH_PERIPH_CLOCK_EN();
 80003c0:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a3d      	ldr	r2, [pc, #244]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e06f      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a42      	ldr	r2, [pc, #264]	; (80004dc <GPIO_ClockControl+0x1d0>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d16b      	bne.n	80004ae <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_EN();
 80003d6:	4b39      	ldr	r3, [pc, #228]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a38      	ldr	r2, [pc, #224]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e064      	b.n	80004ae <GPIO_ClockControl+0x1a2>
	}else if(enable_disable == DISABLE){
 80003e4:	78fb      	ldrb	r3, [r7, #3]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d161      	bne.n	80004ae <GPIO_ClockControl+0x1a2>
		if(pGPIO_PORT == GPIOA){
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a32      	ldr	r2, [pc, #200]	; (80004b8 <GPIO_ClockControl+0x1ac>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_ClockControl+0xf4>
			GPIOA_PERIPH_CLOCK_DI(); // GPIOA disable clock access MACRO defined in MCU specific header file.
 80003f2:	4b32      	ldr	r3, [pc, #200]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a31      	ldr	r2, [pc, #196]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80003f8:	f023 0301 	bic.w	r3, r3, #1
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e056      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <GPIO_ClockControl+0x1b4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_ClockControl+0x10a>
			GPIOB_PERIPH_CLOCK_DI();
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a2b      	ldr	r2, [pc, #172]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e04b      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <GPIO_ClockControl+0x1b8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_ClockControl+0x120>
			GPIOC_PERIPH_CLOCK_DI();
 800041e:	4b27      	ldr	r3, [pc, #156]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a26      	ldr	r2, [pc, #152]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000424:	f023 0304 	bic.w	r3, r3, #4
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e040      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <GPIO_ClockControl+0x1bc>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_ClockControl+0x136>
			GPIOD_PERIPH_CLOCK_DI();
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a20      	ldr	r2, [pc, #128]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800043a:	f023 0308 	bic.w	r3, r3, #8
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e035      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <GPIO_ClockControl+0x1c0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_ClockControl+0x14c>
			GPIOE_PERIPH_CLOCK_DI();
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000450:	f023 0310 	bic.w	r3, r3, #16
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e02a      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <GPIO_ClockControl+0x1c4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_ClockControl+0x162>
			GPIOF_PERIPH_CLOCK_DI();
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a15      	ldr	r2, [pc, #84]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000466:	f023 0320 	bic.w	r3, r3, #32
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e01f      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <GPIO_ClockControl+0x1c8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_ClockControl+0x178>
			GPIOG_PERIPH_CLOCK_DI();
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a10      	ldr	r2, [pc, #64]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800047c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e014      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <GPIO_ClockControl+0x1cc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_ClockControl+0x18e>
			GPIOH_PERIPH_CLOCK_DI();
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <GPIO_ClockControl+0x1b0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <GPIO_ClockControl+0x1b0>)
 8000492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e009      	b.n	80004ae <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <GPIO_ClockControl+0x1d0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d105      	bne.n	80004ae <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_DI();
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <GPIO_ClockControl+0x1b0>)
 80004a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00
 80004dc:	40022000 	.word	0x40022000

080004e0 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
		
	uint32_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
						// The temp variable needs to be size of 32 bits, because MODER register is 32 bits wide.

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d820      	bhi.n	8000536 <GPIO_Init+0x56>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e0dc      	b.n	80006f0 <GPIO_Init+0x210>
	}else {

		// Do this for if the selected pin mode is one of the Interrupt Modes.

		if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d117      	bne.n	800056e <GPIO_Init+0x8e>
			// 1. Configure the Falling Edge Trigger Selection Register  
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 800053e:	4b4f      	ldr	r3, [pc, #316]	; (800067c <GPIO_Init+0x19c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	4611      	mov	r1, r2
 800054e:	4a4b      	ldr	r2, [pc, #300]	; (800067c <GPIO_Init+0x19c>)
 8000550:	430b      	orrs	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]

			// Clear the Corresponding Rising Edge Trigger Selection Register - Just to be safe.   
			  EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000554:	4b49      	ldr	r3, [pc, #292]	; (800067c <GPIO_Init+0x19c>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	43d2      	mvns	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a45      	ldr	r2, [pc, #276]	; (800067c <GPIO_Init+0x19c>)
 8000568:	400b      	ands	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
 800056c:	e035      	b.n	80005da <GPIO_Init+0xfa>

		}else if (pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_EDGE_INTERRUPT_MODE){
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d117      	bne.n	80005a6 <GPIO_Init+0xc6>
			// 1. Configure the Rising Edge Trigger Selection Register  
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000576:	4b41      	ldr	r3, [pc, #260]	; (800067c <GPIO_Init+0x19c>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a3d      	ldr	r2, [pc, #244]	; (800067c <GPIO_Init+0x19c>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <GPIO_Init+0x19c>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	43d2      	mvns	r2, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a37      	ldr	r2, [pc, #220]	; (800067c <GPIO_Init+0x19c>)
 80005a0:	400b      	ands	r3, r1
 80005a2:	60d3      	str	r3, [r2, #12]
 80005a4:	e019      	b.n	80005da <GPIO_Init+0xfa>

		}else if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_FALLING_INTERRUPT_MODE){
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d115      	bne.n	80005da <GPIO_Init+0xfa>

			// 1. Configure both Rising Edge Trigger & Falling Edge Trigger Selection Register 
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <GPIO_Init+0x19c>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	4a2f      	ldr	r2, [pc, #188]	; (800067c <GPIO_Init+0x19c>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 	  
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <GPIO_Init+0x19c>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a29      	ldr	r2, [pc, #164]	; (800067c <GPIO_Init+0x19c>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
			
				uint8_t temp1;
				uint8_t temp2; 

				// Gives the value of EXTICRx Register 
				temp1 = (pGPIOHandle->PinConfig.PinMode) / 5; 
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	4a28      	ldr	r2, [pc, #160]	; (8000680 <GPIO_Init+0x1a0>)
 80005e0:	fba2 2303 	umull	r2, r3, r2, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	74fb      	strb	r3, [r7, #19]
				// Gives the value of which field in EXTICRx to configure
				temp2 = (pGPIOHandle->PinConfig.PinMode) % 5; 
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795a      	ldrb	r2, [r3, #5]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <GPIO_Init+0x1a0>)
 80005ee:	fba3 1302 	umull	r1, r3, r3, r2
 80005f2:	0899      	lsrs	r1, r3, #2
 80005f4:	460b      	mov	r3, r1
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	74bb      	strb	r3, [r7, #18]

				uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx_BASEADDR); // This macro will return the portCode corresponding to the baseaddress it receives.
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <GPIO_Init+0x1a4>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d04f      	beq.n	80006a8 <GPIO_Init+0x1c8>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <GPIO_Init+0x1a8>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d032      	beq.n	8000678 <GPIO_Init+0x198>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <GPIO_Init+0x1ac>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d02b      	beq.n	8000674 <GPIO_Init+0x194>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <GPIO_Init+0x1b0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d024      	beq.n	8000670 <GPIO_Init+0x190>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <GPIO_Init+0x1b4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d01d      	beq.n	800066c <GPIO_Init+0x18c>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <GPIO_Init+0x1b8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d016      	beq.n	8000668 <GPIO_Init+0x188>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <GPIO_Init+0x1bc>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d00f      	beq.n	8000664 <GPIO_Init+0x184>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <GPIO_Init+0x1c0>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d008      	beq.n	8000660 <GPIO_Init+0x180>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <GPIO_Init+0x1c4>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d101      	bne.n	800065c <GPIO_Init+0x17c>
 8000658:	2308      	movs	r3, #8
 800065a:	e026      	b.n	80006aa <GPIO_Init+0x1ca>
 800065c:	2300      	movs	r3, #0
 800065e:	e024      	b.n	80006aa <GPIO_Init+0x1ca>
 8000660:	2307      	movs	r3, #7
 8000662:	e022      	b.n	80006aa <GPIO_Init+0x1ca>
 8000664:	2306      	movs	r3, #6
 8000666:	e020      	b.n	80006aa <GPIO_Init+0x1ca>
 8000668:	2305      	movs	r3, #5
 800066a:	e01e      	b.n	80006aa <GPIO_Init+0x1ca>
 800066c:	2304      	movs	r3, #4
 800066e:	e01c      	b.n	80006aa <GPIO_Init+0x1ca>
 8000670:	2303      	movs	r3, #3
 8000672:	e01a      	b.n	80006aa <GPIO_Init+0x1ca>
 8000674:	2302      	movs	r3, #2
 8000676:	e018      	b.n	80006aa <GPIO_Init+0x1ca>
 8000678:	2301      	movs	r3, #1
 800067a:	e016      	b.n	80006aa <GPIO_Init+0x1ca>
 800067c:	40013c00 	.word	0x40013c00
 8000680:	cccccccd 	.word	0xcccccccd
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40021400 	.word	0x40021400
 800069c:	40021800 	.word	0x40021800
 80006a0:	40021c00 	.word	0x40021c00
 80006a4:	40022000 	.word	0x40022000
 80006a8:	2300      	movs	r3, #0
 80006aa:	747b      	strb	r3, [r7, #17]
				SYSCFG_PERIPH_CLOCK_EN();   												// Enable clock access to System Configuration Peripheral before you configure its register
 80006ac:	4b60      	ldr	r3, [pc, #384]	; (8000830 <GPIO_Init+0x350>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b0:	4a5f      	ldr	r2, [pc, #380]	; (8000830 <GPIO_Init+0x350>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6453      	str	r3, [r2, #68]	; 0x44
				//								The starting position of the field
				//										|
				SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 80006b8:	4a5e      	ldr	r2, [pc, #376]	; (8000834 <GPIO_Init+0x354>)
 80006ba:	7cfb      	ldrb	r3, [r7, #19]
 80006bc:	3302      	adds	r3, #2
 80006be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c2:	7c79      	ldrb	r1, [r7, #17]
 80006c4:	7cbb      	ldrb	r3, [r7, #18]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	4959      	ldr	r1, [pc, #356]	; (8000834 <GPIO_Init+0x354>)
 80006d0:	7cfb      	ldrb	r3, [r7, #19]
 80006d2:	4302      	orrs	r2, r0
 80006d4:	3302      	adds	r3, #2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				
			// 3. Enable the respective EXTI line to allow interrupts to be send to the Processor via NVIC - using Interrupt Mask Register
		
			EXTI->IMR |= (1<< pGPIOHandle->PinConfig.PinNumber); // This will Enable the EXTI line corresponding to the Pin number. 
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <GPIO_Init+0x358>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7912      	ldrb	r2, [r2, #4]
 80006e2:	4611      	mov	r1, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	408a      	lsls	r2, r1
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a53      	ldr	r2, [pc, #332]	; (8000838 <GPIO_Init+0x358>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
			
	}

	
	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	799b      	ldrb	r3, [r3, #6]
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2103      	movs	r1, #3
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	43db      	mvns	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	400a      	ands	r2, r1
 8000722:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6899      	ldr	r1, [r3, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	430a      	orrs	r2, r1
 8000732:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	79db      	ldrb	r3, [r3, #7]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (2* pGPIOHandle->PinConfig.PinNumber));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2103      	movs	r1, #3
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	2301      	movs	r3, #1
 800079a:	408b      	lsls	r3, r1
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d131      	bne.n	8000824 <GPIO_Init+0x344>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint8_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	743b      	strb	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	73fb      	strb	r3, [r7, #15]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7c3a      	ldrb	r2, [r7, #16]
 80007d8:	3208      	adds	r2, #8
 80007da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	220f      	movs	r2, #15
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7c3a      	ldrb	r2, [r7, #16]
 80007f2:	4001      	ands	r1, r0
 80007f4:	3208      	adds	r2, #8
 80007f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	7c3a      	ldrb	r2, [r7, #16]
 8000800:	3208      	adds	r2, #8
 8000802:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7a5b      	ldrb	r3, [r3, #9]
 800080a:	461a      	mov	r2, r3
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	4618      	mov	r0, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	7c3a      	ldrb	r2, [r7, #16]
 800081c:	4301      	orrs	r1, r0
 800081e:	3208      	adds	r2, #8
 8000820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			}*/

	}

}
 8000824:	bf00      	nop
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40013800 	.word	0x40013800
 8000838:	40013c00 	.word	0x40013c00

0800083c <GPIO_ToggleOutputPin>:
 * @return            -none
 *
 * @Note              -

*/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIO_PORT, uint8_t pinNumber){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
		pGPIO_PORT->ODR ^= (1 << pinNumber);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	78fa      	ldrb	r2, [r7, #3]
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	405a      	eors	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	615a      	str	r2, [r3, #20]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <GPIO_IRQ_Interrupt_Config>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_IRQ_Interrupt_Config(uint8_t IRQNumber, uint8_t enable_disable){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	if( enable_disable == ENABLE){
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d133      	bne.n	80008e2 <GPIO_IRQ_Interrupt_Config+0x7e>
		if(IRQNumber <= 31){
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d80a      	bhi.n	8000896 <GPIO_IRQ_Interrupt_Config+0x32>

			// Program the NVIC_ISER0 Register of the NVIC Controller - Registers Defined in the Cortex-M4 Generic User Guide, under the NVIC Section
			(*NVIC_ISER0) |= (1 << IRQNumber); 
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <GPIO_IRQ_Interrupt_Config+0xf8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a33      	ldr	r2, [pc, #204]	; (800095c <GPIO_IRQ_Interrupt_Config+0xf8>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
		}

		/*   You can add the rest of the NVIC_ICERx registers, there are a total of 8 NVIC_ISER registers. */ 
	}

}
 8000894:	e05c      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
		}else if (IRQNumber > 31 && IRQNumber < 64){  // Interrupt lines  from 32 - 63
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b1f      	cmp	r3, #31
 800089a:	d90f      	bls.n	80008bc <GPIO_IRQ_Interrupt_Config+0x58>
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b3f      	cmp	r3, #63	; 0x3f
 80008a0:	d80c      	bhi.n	80008bc <GPIO_IRQ_Interrupt_Config+0x58>
			(*NVIC_ISER1) |= (1 << (IRQNumber % 32)); 
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <GPIO_IRQ_Interrupt_Config+0xfc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	f002 021f 	and.w	r2, r2, #31
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <GPIO_IRQ_Interrupt_Config+0xfc>)
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	e049      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
		}else if(IRQNumber >64 && IRQNumber < 96){   // IRQ lines from 64 - 96 
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b40      	cmp	r3, #64	; 0x40
 80008c0:	d946      	bls.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b5f      	cmp	r3, #95	; 0x5f
 80008c6:	d843      	bhi.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
			(*NVIC_ISER2) |= (1 << (IRQNumber % 64)); 
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <GPIO_IRQ_Interrupt_Config+0x100>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a22      	ldr	r2, [pc, #136]	; (8000964 <GPIO_IRQ_Interrupt_Config+0x100>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	e036      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
	}else if (enable_disable == DISABLE){
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d133      	bne.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
		if(IRQNumber <= 31){
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b1f      	cmp	r3, #31
 80008ec:	d80a      	bhi.n	8000904 <GPIO_IRQ_Interrupt_Config+0xa0>
			(*NVIC_ICER0) |= (1 << IRQNumber); 
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <GPIO_IRQ_Interrupt_Config+0x104>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <GPIO_IRQ_Interrupt_Config+0x104>)
 80008fe:	430b      	orrs	r3, r1
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	e025      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
		}else if (IRQNumber > 31 && IRQNumber < 64){  // Interrupt lines  from 32 - 63
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b1f      	cmp	r3, #31
 8000908:	d90f      	bls.n	800092a <GPIO_IRQ_Interrupt_Config+0xc6>
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b3f      	cmp	r3, #63	; 0x3f
 800090e:	d80c      	bhi.n	800092a <GPIO_IRQ_Interrupt_Config+0xc6>
			(*NVIC_ICER1) |=  (1 << (IRQNumber % 32)); 
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <GPIO_IRQ_Interrupt_Config+0x108>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	f002 021f 	and.w	r2, r2, #31
 800091a:	2101      	movs	r1, #1
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <GPIO_IRQ_Interrupt_Config+0x108>)
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e012      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
		}else if(IRQNumber >64 && IRQNumber < 96){   // IRQ lines from 64 - 96 
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b40      	cmp	r3, #64	; 0x40
 800092e:	d90f      	bls.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b5f      	cmp	r3, #95	; 0x5f
 8000934:	d80c      	bhi.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
			(*NVIC_ICER2) |= (1 << (IRQNumber % 64)); 
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <GPIO_IRQ_Interrupt_Config+0x10c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	4a09      	ldr	r2, [pc, #36]	; (8000970 <GPIO_IRQ_Interrupt_Config+0x10c>)
 800094a:	430b      	orrs	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	e7ff      	b.n	8000950 <GPIO_IRQ_Interrupt_Config+0xec>
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000e104 	.word	0xe000e104
 8000964:	e000e108 	.word	0xe000e108
 8000968:	e000e180 	.word	0xe000e180
 800096c:	e000e184 	.word	0xe000e184
 8000970:	e000e188 	.word	0xe000e188

08000974 <GPIO_IRQ_Priority_Config>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_IRQ_Priority_Config (uint8_t IRQNumber, uint8_t IRQPriority){
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]

	//1. Find the IPRx register assigned to the IRQNumber
	uint8_t iprx = IRQNumber /4; 
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	73fb      	strb	r3, [r7, #15]
	//2. Find the section of the iprx register assigned to the IRQNumber
	uint8_t iprx_Section = IRQNumber % 4; 
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	73bb      	strb	r3, [r7, #14]
	//*(NVIC_IPR_BASEADDR + (iprx * 4 )) |= (IRQPriority << 8 * iprx_Section);  --> Explained in Notes; Updated: don't need the 4, because NVIC_IPR_BASEADDR is a 32-bit pointer, incrementing by 1 will point to the next 32-bit register.
	
	//		To get to the corrected section of the iprx register
	//								|			To fill to the Top 4 bits of the section, as the bottom 4 bits are N.A		
	//													|
	uint8_t shift_amount = (8 * iprx_Section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3304      	adds	r3, #4
 800099a:	737b      	strb	r3, [r7, #13]


	*(NVIC_IPR_BASEADDR + (iprx)) |= (IRQPriority << shift_amount);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009a4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	79b9      	ldrb	r1, [r7, #6]
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009bc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]

	// Removed the *4 from statement above b/c the NVIC_IPR_BASEADDR is defined as a 32-bit pointer (in the device header file) as ((__vo uint32_t*)0xE000E400),
	// Therfore, an increment by 1, will move the pointer to ((__vo uint32_t*)0xE000E404), i.e. increment of 4 bytes (4*8 = 32 bits, i.e. next register). Therefore, you don't need to mulitply by 4.
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
	...

080009d0 <GPIO_IRQHandling>:
 * @return            -none
 *
 * @Note              -

*/
void GPIO_IRQHandling(uint8_t pinNumber){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]

	// Clear the EXTI's Pending Register Bit corresponding to the pinNumber
	if(EXTI->PR & (1 << pinNumber)){ // Check if the bit was actually first
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <GPIO_IRQHandling+0x3c>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d009      	beq.n	8000a00 <GPIO_IRQHandling+0x30>
			
			// Clearing the Registered Interrupt on EXTI is done by writing 1 at the bit position assigned to the Pin in the Pending Register of EXTI module
			EXTI->PR |= (1 << pinNumber);
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <GPIO_IRQHandling+0x3c>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <GPIO_IRQHandling+0x3c>)
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6153      	str	r3, [r2, #20]
	}

}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40013c00 	.word	0x40013c00

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4e0d      	ldr	r6, [pc, #52]	; (8000a48 <__libc_init_array+0x38>)
 8000a14:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__libc_init_array+0x3c>)
 8000a16:	1ba4      	subs	r4, r4, r6
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	42a5      	cmp	r5, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	4e0b      	ldr	r6, [pc, #44]	; (8000a50 <__libc_init_array+0x40>)
 8000a22:	4c0c      	ldr	r4, [pc, #48]	; (8000a54 <__libc_init_array+0x44>)
 8000a24:	f000 f820 	bl	8000a68 <_init>
 8000a28:	1ba4      	subs	r4, r4, r6
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	42a5      	cmp	r5, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a38:	4798      	blx	r3
 8000a3a:	3501      	adds	r5, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a42:	4798      	blx	r3
 8000a44:	3501      	adds	r5, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08000a80 	.word	0x08000a80
 8000a4c:	08000a80 	.word	0x08000a80
 8000a50:	08000a80 	.word	0x08000a80
 8000a54:	08000a84 	.word	0x08000a84

08000a58 <memset>:
 8000a58:	4402      	add	r2, r0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d100      	bne.n	8000a62 <memset+0xa>
 8000a60:	4770      	bx	lr
 8000a62:	f803 1b01 	strb.w	r1, [r3], #1
 8000a66:	e7f9      	b.n	8000a5c <memset+0x4>

08000a68 <_init>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	bf00      	nop
 8000a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6e:	bc08      	pop	{r3}
 8000a70:	469e      	mov	lr, r3
 8000a72:	4770      	bx	lr

08000a74 <_fini>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr
