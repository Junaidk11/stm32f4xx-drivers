
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000235c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026fc  080026fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026fc  080026fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026fc  080026fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08002774  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002774  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d85  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000575  00000000  00000000  00021e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00022510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000025dc  00000000  00000000  00022650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000148c  00000000  00000000  00024c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aae1  00000000  00000000  000260b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001050  00000000  00000000  00030c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080024f4 	.word	0x080024f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080024f4 	.word	0x080024f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SPI2_Inits>:
 * 
 * Alternate Functionality mode = 5; Needed for configuring the I/O pins for alternate functionality 
 * 
 **/

void SPI2_Inits(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0


    // Enable clock access to the peripheral before making any configurations. 
    SPI2_PERIPH_CLOCK_EN(); 
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <SPI2_Inits+0x44>)
 80002a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <SPI2_Inits+0x44>)
 80002ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002b0:	6413      	str	r3, [r2, #64]	; 0x40

    // Create SPI Handle 
    SPI_Handle_t SPI2Handle; 

    // Set BaseAddress to SPI2 
    SPI2Handle.pSPIx_BASEADDR = SPI2;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <SPI2_Inits+0x48>)
 80002b4:	603b      	str	r3, [r7, #0]

    // Configure the SPI2 Peripheral as desired. 
    SPI2Handle.SPIConfig.DeviceMode = SPI_IN_MASTER_MODE;  
 80002b6:	2301      	movs	r3, #1
 80002b8:	713b      	strb	r3, [r7, #4]
    SPI2Handle.SPIConfig.BusConfig = SPI_IN_FULL_DUPLEX_MODE; 
 80002ba:	2300      	movs	r3, #0
 80002bc:	717b      	strb	r3, [r7, #5]
    SPI2Handle.SPIConfig.DataFrameFormat = SPI_DATAFRAME_8BITS; 
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]
    SPI2Handle.SPIConfig.ClockPolarity = SPI_SCLK_LOW; 
 80002c2:	2300      	movs	r3, #0
 80002c4:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.ClockPhase = SPI_DATA_SAMPLED_ON_LEADING_EDGE; 
 80002c6:	2300      	movs	r3, #0
 80002c8:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SclkSpeed = SPI_PERIPHERAL_CLOCK_DIV8; // Serial Clock is at 2 MHz, which means Prescaler = 8, System Clock source is Internal RC oscillator, producing 16MHz
 80002ca:	2302      	movs	r3, #2
 80002cc:	71bb      	strb	r3, [r7, #6]
    SPI2Handle.SPIConfig.SlaveManagementType = SPI_SOFTWARE_SLAVE_MANAGEMENT_DI; // 1 slave, so we can disable software slave management, i.e. enable hardware slave management
 80002ce:	2300      	movs	r3, #0
 80002d0:	72bb      	strb	r3, [r7, #10]

    // Call the Init API to initialize the configured SPI2 peripheral.
    SPI_Init(&SPI2Handle);
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fdaa 	bl	8000e2e <SPI_Init>

}
 80002da:	bf00      	nop
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40003800 	.word	0x40003800

080002ec <SPI2_GPIOInits>:
void SPI2_GPIOInits(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

	// Enable clock access to GPIOB Port before making any configurations. 
	GPIOB_PERIPH_CLOCK_EN(); 
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <SPI2_GPIOInits+0x64>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <SPI2_GPIOInits+0x64>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30

	// Create a GPIO handle, which will hold the base address and Pin configurations 
	GPIO_Handle_t SPIPins; 
	SPIPins.pGPIOx_BASEADDR = GPIOB; 
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <SPI2_GPIOInits+0x68>)
 8000300:	607b      	str	r3, [r7, #4]

	// Set Pin Configurations for each I/O Pin
	SPIPins.PinConfig.PinMode = GPIO_PIN_ALTFUNC_MODE; 
 8000302:	2302      	movs	r3, #2
 8000304:	727b      	strb	r3, [r7, #9]
	SPIPins.PinConfig.PinAltFunMode = 5; 
 8000306:	2305      	movs	r3, #5
 8000308:	737b      	strb	r3, [r7, #13]
	SPIPins.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; // Output Drain Type is required for I2C -> specification insists.
 800030a:	2300      	movs	r3, #0
 800030c:	733b      	strb	r3, [r7, #12]
	SPIPins.PinConfig.PinPuPdControl = GPIO_PIN_PULL_UP;  // Don't need PU/PD for Push-pull output configuration
 800030e:	2301      	movs	r3, #1
 8000310:	72fb      	strb	r3, [r7, #11]
	SPIPins.PinConfig.PinSpeed = GPIO_PIN_HIGH_SPEED;  // Doesn't matter, can set to any speed
 8000312:	2302      	movs	r3, #2
 8000314:	72bb      	strb	r3, [r7, #10]

	// Set Pin number and call the GPIOInit to initialize each of the PBx pins.

	// SPI2_NSS
	SPIPins.PinConfig.PinNumber = GPIO_PIN_12; 
 8000316:	230c      	movs	r3, #12
 8000318:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fbc3 	bl	8000aa8 <GPIO_Init>

	// SPI2_SCLK 
	SPIPins.PinConfig.PinNumber = GPIO_PIN_13; 
 8000322:	230d      	movs	r3, #13
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fbbd 	bl	8000aa8 <GPIO_Init>

	// SPI2_MISO
	SPIPins.PinConfig.PinNumber = GPIO_PIN_14; 
 800032e:	230e      	movs	r3, #14
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fbb7 	bl	8000aa8 <GPIO_Init>
	
	// SPI2_MOSI
	SPIPins.PinConfig.PinNumber = GPIO_PIN_15;
 800033a:	230f      	movs	r3, #15
 800033c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fbb1 	bl	8000aa8 <GPIO_Init>


}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020400 	.word	0x40020400

08000358 <GPIO_ButtonInits>:

void GPIO_ButtonInits(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
    	/*   The following statements are for configuring the user button PA0 as an input pin. */

	GPIO_Handle_t gpio_user_button; 				// Instantiate a GPIO handle variable to hold pin configuration information and gain access to the API functions.
	gpio_user_button.pGPIOx_BASEADDR = GPIOA; 	// Set the base-address of the Port you're configuring - User button is connected to Port A, Pin 0.
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <GPIO_ButtonInits+0x34>)
 8000360:	607b      	str	r3, [r7, #4]

	// Now, use the Pin structure of the GPIO handle to configure the I/O pin 0 in input mode.
	gpio_user_button.PinConfig.PinNumber = GPIO_PIN_0;
 8000362:	2300      	movs	r3, #0
 8000364:	723b      	strb	r3, [r7, #8]
	gpio_user_button.PinConfig.PinMode = GPIO_PIN_INPUT_MODE; 		 // Set the pin in Output mode.
 8000366:	2300      	movs	r3, #0
 8000368:	727b      	strb	r3, [r7, #9]
	//gpio_push_pull.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; //PA0 is being configured as an input pin, this is irrelevant to it.
	gpio_user_button.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;      // Stm32f407-discovery schematic shows an external pull-down resistor, so don't need to enable internal pull-down resistor.
 800036a:	2300      	movs	r3, #0
 800036c:	72fb      	strb	r3, [r7, #11]
	gpio_user_button.PinConfig.PinSpeed = GPIO_PIN_MEDIUM_SPEED;   // Speed doesn't really matter
 800036e:	2301      	movs	r3, #1
 8000370:	72bb      	strb	r3, [r7, #10]

	// Now, enable clock access to GPIO Port D, use the RCC clock enable MACROS defined in the device specific header file or:
	// Use the clock control API defined in GPIO driver - the better option.

	GPIO_ClockControl(GPIOA, ENABLE);
 8000372:	2101      	movs	r1, #1
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <GPIO_ButtonInits+0x34>)
 8000376:	f000 faad 	bl	80008d4 <GPIO_ClockControl>

	// Now, call the Init API to configure the physical address of Port D
	GPIO_Init(&gpio_user_button);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fb93 	bl	8000aa8 <GPIO_Init>

}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40020000 	.word	0x40020000

08000390 <Delay>:

void Delay()
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
    int i = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
    for (; i < 500000 / 2; i++);
 800039a:	e002      	b.n	80003a2 <Delay+0x12>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <Delay+0x24>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	ddf8      	ble.n	800039c <Delay+0xc>
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	0003d08f 	.word	0x0003d08f

080003b8 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackByte){
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]

    if(ackByte == ACK_CODE){
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2bf5      	cmp	r3, #245	; 0xf5
 80003c6:	d101      	bne.n	80003cc <SPI_VerifyResponse+0x14>
        return 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e000      	b.n	80003ce <SPI_VerifyResponse+0x16>
    }
    return 0;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <main>:
 *        6. Wait till Button pressed again. 
 *        7. Repeat steps 3-5. 
 * 
 */ 

int main(){
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b08c      	sub	sp, #48	; 0x30
 80003dc:	af00      	add	r7, sp, #0

    /**
     *      For Semi-hosting
     */
    initialise_monitor_handles();
 80003de:	f002 f809 	bl	80023f4 <initialise_monitor_handles>

    printf("Main Function entered. \n");
 80003e2:	48dc      	ldr	r0, [pc, #880]	; (8000754 <main+0x37c>)
 80003e4:	f000 fee2 	bl	80011ac <puts>

    //              ++ INITIALIZE THE PERIPHERALS 

            // 1. Call Function to configure the I/O pin PA0 as button 
            GPIO_ButtonInits();
 80003e8:	f7ff ffb6 	bl	8000358 <GPIO_ButtonInits>

            // 2. Call Function to configure the I/O pins above to be used as SPI2 pin. 
            SPI2_GPIOInits();
 80003ec:	f7ff ff7e 	bl	80002ec <SPI2_GPIOInits>

            // 3. Call Function to Configure the SPI2 Peripheral 
            SPI2_Inits();
 80003f0:	f7ff ff56 	bl	80002a0 <SPI2_Inits>

            // 4. Set SSOE pin to enable Slave Select Output, which will tie Peripheral Enable bit to the NSS output
           // i.e. when SPI enabled, NSS will be driven low to initiate communication with the slave --> Only if the SPI is in master mode, which is the case here.

            SPI_SSOEConfig(SPI2, ENABLE);
 80003f4:	2101      	movs	r1, #1
 80003f6:	48d8      	ldr	r0, [pc, #864]	; (8000758 <main+0x380>)
 80003f8:	f000 fd9a 	bl	8000f30 <SPI_SSOEConfig>

    //              -- INITIALIZE THE PERIPHERALS 
    printf("Initialization Complete. \n");
 80003fc:	48d7      	ldr	r0, [pc, #860]	; (800075c <main+0x384>)
 80003fe:	f000 fed5 	bl	80011ac <puts>
    uint8_t dummy_read; 
    uint8_t dummy_write = 0xFF; 
 8000402:	23ff      	movs	r3, #255	; 0xff
 8000404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    while(1){

        // ++ First Command - Turn ON LED
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	48d4      	ldr	r0, [pc, #848]	; (8000760 <main+0x388>)
 800040e:	f000 fcf9 	bl	8000e04 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x32>
                printf("Button Pressed \n");
 8000418:	48d2      	ldr	r0, [pc, #840]	; (8000764 <main+0x38c>)
 800041a:	f000 fec7 	bl	80011ac <puts>
                // To avoid Button de-bouncing, add software delay
                Delay();
 800041e:	f7ff ffb7 	bl	8000390 <Delay>

                // Enable SPI2
                SPI_PeripheralControl(SPI2, ENABLE); 
 8000422:	2101      	movs	r1, #1
 8000424:	48cc      	ldr	r0, [pc, #816]	; (8000758 <main+0x380>)
 8000426:	f000 fd65 	bl	8000ef4 <SPI_PeripheralControl>

                // Send LED Control Command 
                // CMD_LED_CTRL  <Pin number> <Value>
                uint8_t command = COMMAND_LED_CTRL; 
 800042a:	2350      	movs	r3, #80	; 0x50
 800042c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED command first
                SPI_SendData(SPI2, &command, 1);
 8000430:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	48c7      	ldr	r0, [pc, #796]	; (8000758 <main+0x380>)
 800043a:	f000 fdaa 	bl	8000f92 <SPI_SendData>
                printf("Master sent: %X \n", command);
 800043e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000442:	4619      	mov	r1, r3
 8000444:	48c8      	ldr	r0, [pc, #800]	; (8000768 <main+0x390>)
 8000446:	f000 fe3d 	bl	80010c4 <iprintf>
                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 800044a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800044e:	2201      	movs	r2, #1
 8000450:	4619      	mov	r1, r3
 8000452:	48c1      	ldr	r0, [pc, #772]	; (8000758 <main+0x380>)
 8000454:	f000 fdd3 	bl	8000ffe <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 8000458:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	48bd      	ldr	r0, [pc, #756]	; (8000758 <main+0x380>)
 8000462:	f000 fd96 	bl	8000f92 <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800046a:	2201      	movs	r2, #1
 800046c:	4619      	mov	r1, r3
 800046e:	48ba      	ldr	r0, [pc, #744]	; (8000758 <main+0x380>)
 8000470:	f000 fdc5 	bl	8000ffe <SPI_ReceiveData>
                printf("Slave Response to %X: %X \n", command, slave_response);
 8000474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000478:	4619      	mov	r1, r3
 800047a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800047e:	461a      	mov	r2, r3
 8000480:	48ba      	ldr	r0, [pc, #744]	; (800076c <main+0x394>)
 8000482:	f000 fe1f 	bl	80010c4 <iprintf>

                // Check if slave responsed with ACK or NACK 

                if(SPI_VerifyResponse(slave_response)){
 8000486:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff94 	bl	80003b8 <SPI_VerifyResponse>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d013      	beq.n	80004be <main+0xe6>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument 1 is Pin number
 8000496:	2309      	movs	r3, #9
 8000498:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    arguments[1] = LED_ON;  //  Turn LED on
 800049c:	2301      	movs	r3, #1
 800049e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 2); // '2' because we're sending 2 arguments of 8 bits each.
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	2202      	movs	r2, #2
 80004a8:	4619      	mov	r1, r3
 80004aa:	48ab      	ldr	r0, [pc, #684]	; (8000758 <main+0x380>)
 80004ac:	f000 fd71 	bl	8000f92 <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 

                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 80004b0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	48a7      	ldr	r0, [pc, #668]	; (8000758 <main+0x380>)
 80004ba:	f000 fda0 	bl	8000ffe <SPI_ReceiveData>
                 *  	Connect A0 -> 0 V, Read the value returned by Arduino, should be 0
                 *  	Connect A0 -> 5 V, Read the value returned by Arduino, should be 255
                 *  	Connect A0 -> 3.3 V, Read the value returned by Arduino, should be less than 255 but greater than 128
                 */
                
                printf("Waiting for button to be pressed! \n");
 80004be:	48ac      	ldr	r0, [pc, #688]	; (8000770 <main+0x398>)
 80004c0:	f000 fe74 	bl	80011ac <puts>
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 80004c4:	bf00      	nop
 80004c6:	2100      	movs	r1, #0
 80004c8:	48a5      	ldr	r0, [pc, #660]	; (8000760 <main+0x388>)
 80004ca:	f000 fc9b 	bl	8000e04 <GPIO_ReadFromInputPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0f8      	beq.n	80004c6 <main+0xee>
                printf("Button Pressed \n");
 80004d4:	48a3      	ldr	r0, [pc, #652]	; (8000764 <main+0x38c>)
 80004d6:	f000 fe69 	bl	80011ac <puts>
                // To avoid Button de-bouncing, add software delay
                Delay();
 80004da:	f7ff ff59 	bl	8000390 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_CTRL  <Analog Pin number> 
                command = COMMAND_SENSOR_READ; 
 80004de:	2351      	movs	r3, #81	; 0x51
 80004e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send Sensor Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80004e4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	489a      	ldr	r0, [pc, #616]	; (8000758 <main+0x380>)
 80004ee:	f000 fd50 	bl	8000f92 <SPI_SendData>
                printf("Master sent: %X \n", command);
 80004f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004f6:	4619      	mov	r1, r3
 80004f8:	489b      	ldr	r0, [pc, #620]	; (8000768 <main+0x390>)
 80004fa:	f000 fde3 	bl	80010c4 <iprintf>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004fe:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4894      	ldr	r0, [pc, #592]	; (8000758 <main+0x380>)
 8000508:	f000 fd79 	bl	8000ffe <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 800050c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4890      	ldr	r0, [pc, #576]	; (8000758 <main+0x380>)
 8000516:	f000 fd3c 	bl	8000f92 <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 800051a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	488d      	ldr	r0, [pc, #564]	; (8000758 <main+0x380>)
 8000524:	f000 fd6b 	bl	8000ffe <SPI_ReceiveData>
                printf("Slave Response to %X: %X \n", command, slave_response);
 8000528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800052c:	4619      	mov	r1, r3
 800052e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000532:	461a      	mov	r2, r3
 8000534:	488d      	ldr	r0, [pc, #564]	; (800076c <main+0x394>)
 8000536:	f000 fdc5 	bl	80010c4 <iprintf>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 800053a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff3a 	bl	80003b8 <SPI_VerifyResponse>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d026      	beq.n	8000598 <main+0x1c0>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = ANALOG_PIN0; // Argument is Analog Pin number
 800054a:	2300      	movs	r3, #0
 800054c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 8000550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	487f      	ldr	r0, [pc, #508]	; (8000758 <main+0x380>)
 800055a:	f000 fd1a 	bl	8000f92 <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 800055e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	487c      	ldr	r0, [pc, #496]	; (8000758 <main+0x380>)
 8000568:	f000 fd49 	bl	8000ffe <SPI_ReceiveData>

                    // Create Delay to allow Arduino ADC to convert the Analog input to Digital value between 0-255
                    Delay();
 800056c:	f7ff ff10 	bl	8000390 <Delay>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 8000570:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4877      	ldr	r0, [pc, #476]	; (8000758 <main+0x380>)
 800057a:	f000 fd0a 	bl	8000f92 <SPI_SendData>

                    // Read Slave response - Which should be an 8-bit value between 0-255 corresponding to the voltage at pin A0 - which is used as the Sensor Input
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 800057e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	4874      	ldr	r0, [pc, #464]	; (8000758 <main+0x380>)
 8000588:	f000 fd39 	bl	8000ffe <SPI_ReceiveData>
                    printf("Slave returned Analog value as: %X\n", slave_response);
 800058c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000590:	4619      	mov	r1, r3
 8000592:	4878      	ldr	r0, [pc, #480]	; (8000774 <main+0x39c>)
 8000594:	f000 fd96 	bl	80010c4 <iprintf>

                }
        // -- Second Command - Read Sensor Value 

        // ++ Third Command - LED Read
                printf("Waiting for button to be pressed! \n");
 8000598:	4875      	ldr	r0, [pc, #468]	; (8000770 <main+0x398>)
 800059a:	f000 fe07 	bl	80011ac <puts>
                // Wait till button is pressed 
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 800059e:	bf00      	nop
 80005a0:	2100      	movs	r1, #0
 80005a2:	486f      	ldr	r0, [pc, #444]	; (8000760 <main+0x388>)
 80005a4:	f000 fc2e 	bl	8000e04 <GPIO_ReadFromInputPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f8      	beq.n	80005a0 <main+0x1c8>
                printf("Button Pressed \n");
 80005ae:	486d      	ldr	r0, [pc, #436]	; (8000764 <main+0x38c>)
 80005b0:	f000 fdfc 	bl	80011ac <puts>
                // To avoid Button de-bouncing, add software delay
                Delay();
 80005b4:	f7ff feec 	bl	8000390 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_LED_READ  <Pin number> 
                command = COMMAND_LED_READ; 
 80005b8:	2352      	movs	r3, #82	; 0x52
 80005ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 80005be:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	4864      	ldr	r0, [pc, #400]	; (8000758 <main+0x380>)
 80005c8:	f000 fce3 	bl	8000f92 <SPI_SendData>
                printf("Master sent: %X \n", command);
 80005cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005d0:	4619      	mov	r1, r3
 80005d2:	4865      	ldr	r0, [pc, #404]	; (8000768 <main+0x390>)
 80005d4:	f000 fd76 	bl	80010c4 <iprintf>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005d8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	485d      	ldr	r0, [pc, #372]	; (8000758 <main+0x380>)
 80005e2:	f000 fd0c 	bl	8000ffe <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80005e6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	485a      	ldr	r0, [pc, #360]	; (8000758 <main+0x380>)
 80005f0:	f000 fccf 	bl	8000f92 <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1); 
 80005f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005f8:	2201      	movs	r2, #1
 80005fa:	4619      	mov	r1, r3
 80005fc:	4856      	ldr	r0, [pc, #344]	; (8000758 <main+0x380>)
 80005fe:	f000 fcfe 	bl	8000ffe <SPI_ReceiveData>
                printf("Slave Response to %X: %X \n", command, slave_response);
 8000602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000606:	4619      	mov	r1, r3
 8000608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800060c:	461a      	mov	r2, r3
 800060e:	4857      	ldr	r0, [pc, #348]	; (800076c <main+0x394>)
 8000610:	f000 fd58 	bl	80010c4 <iprintf>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 8000614:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fecd 	bl	80003b8 <SPI_VerifyResponse>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d024      	beq.n	800066e <main+0x296>

                    // Recieved acknowledment from Slave, arguments of the command you sent befoe
                    arguments[0] = LED_PIN; // Argument is LED Pin
 8000624:	2309      	movs	r3, #9
 8000626:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

                    //  Send Arguments to Slave
                    SPI_SendData(SPI2, arguments, 1); // '1' because we're sending 1 argument
 800062a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	4849      	ldr	r0, [pc, #292]	; (8000758 <main+0x380>)
 8000634:	f000 fcad 	bl	8000f92 <SPI_SendData>
            
                    // Dummy read to clear RXNE flag 
                    SPI_ReceiveData(SPI2, &dummy_read, 1); 
 8000638:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4845      	ldr	r0, [pc, #276]	; (8000758 <main+0x380>)
 8000642:	f000 fcdc 	bl	8000ffe <SPI_ReceiveData>

                    //Send Dummy byte, to read slave response for the command that was send earlier.
                    //Master always initiates communication, so send dummy bytes to get slave response. 
                    SPI_SendData(SPI2, &dummy_write, 1); 
 8000646:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	4842      	ldr	r0, [pc, #264]	; (8000758 <main+0x380>)
 8000650:	f000 fc9f 	bl	8000f92 <SPI_SendData>

                    // Read Slave response - Which should be either a '1' or '0' --> Will read '1' because initially we turn the LED on.
                    SPI_ReceiveData(SPI2, &slave_response, 1); 
 8000654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	483e      	ldr	r0, [pc, #248]	; (8000758 <main+0x380>)
 800065e:	f000 fcce 	bl	8000ffe <SPI_ReceiveData>
                    printf("Slave returned Analog value as: %X\n", slave_response);
 8000662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000666:	4619      	mov	r1, r3
 8000668:	4842      	ldr	r0, [pc, #264]	; (8000774 <main+0x39c>)
 800066a:	f000 fd2b 	bl	80010c4 <iprintf>

        // -- Third Command - LED Read

        // ++ Fourth Command - Print Command
                // Wait till button is pressed 
                printf("Waiting for button to be pressed! \n");
 800066e:	4840      	ldr	r0, [pc, #256]	; (8000770 <main+0x398>)
 8000670:	f000 fd9c 	bl	80011ac <puts>
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000674:	bf00      	nop
 8000676:	2100      	movs	r1, #0
 8000678:	4839      	ldr	r0, [pc, #228]	; (8000760 <main+0x388>)
 800067a:	f000 fbc3 	bl	8000e04 <GPIO_ReadFromInputPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f8      	beq.n	8000676 <main+0x29e>
                printf("Button Pressed \n");
 8000684:	4837      	ldr	r0, [pc, #220]	; (8000764 <main+0x38c>)
 8000686:	f000 fd91 	bl	80011ac <puts>
                // To avoid Button de-bouncing, add software delay
                Delay();
 800068a:	f7ff fe81 	bl	8000390 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_PRINT <Message Length in bytes>  <The message> 
                command = COMMAND_PRINT; 
 800068e:	2353      	movs	r3, #83	; 0x53
 8000690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 8000694:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <main+0x380>)
 800069e:	f000 fc78 	bl	8000f92 <SPI_SendData>
                printf("Master sent: %X \n", command);
 80006a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006a6:	4619      	mov	r1, r3
 80006a8:	482f      	ldr	r0, [pc, #188]	; (8000768 <main+0x390>)
 80006aa:	f000 fd0b 	bl	80010c4 <iprintf>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80006ae:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <main+0x380>)
 80006b8:	f000 fca1 	bl	8000ffe <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80006bc:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	4824      	ldr	r0, [pc, #144]	; (8000758 <main+0x380>)
 80006c6:	f000 fc64 	bl	8000f92 <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1);
 80006ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	4821      	ldr	r0, [pc, #132]	; (8000758 <main+0x380>)
 80006d4:	f000 fc93 	bl	8000ffe <SPI_ReceiveData>
                printf("Slave Response to %X: %X \n", command, slave_response);
 80006d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006dc:	4619      	mov	r1, r3
 80006de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006e2:	461a      	mov	r2, r3
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <main+0x394>)
 80006e6:	f000 fced 	bl	80010c4 <iprintf>

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 80006ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fe62 	bl	80003b8 <SPI_VerifyResponse>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d022      	beq.n	8000740 <main+0x368>
                    // Recieved acknowledgment from Slave, arguments of the command you sent befoe
                    uint8_t message[] = "Hello! How is it going?"; 
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <main+0x3a0>)
 80006fc:	1d3c      	adds	r4, r7, #4
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000708:	e884 0003 	stmia.w	r4, {r0, r1}

                    // Send Message length first
                    arguments[0]= strlen((char *)message); 
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd6e 	bl	80001f0 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    SPI_SendData(SPI2, arguments, 1); // First argument only
 800071c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <main+0x380>)
 8000726:	f000 fc34 	bl	8000f92 <SPI_SendData>

                    // Send Message now
                    SPI_SendData(SPI2, message, arguments[0]);
 800072a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800072e:	461a      	mov	r2, r3
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <main+0x380>)
 8000736:	f000 fc2c 	bl	8000f92 <SPI_SendData>
                    printf("Message sent to slave! \n");
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <main+0x3a4>)
 800073c:	f000 fd36 	bl	80011ac <puts>

        // -- Fourth Command - Print Command

        // ++ Fifth Command - ID read
            // Wait till button is pressed 
                printf("Waiting for button to be pressed! \n");
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <main+0x398>)
 8000742:	f000 fd33 	bl	80011ac <puts>
                while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)); 
 8000746:	bf00      	nop
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <main+0x388>)
 800074c:	f000 fb5a 	bl	8000e04 <GPIO_ReadFromInputPin>
 8000750:	4603      	mov	r3, r0
 8000752:	e015      	b.n	8000780 <main+0x3a8>
 8000754:	0800250c 	.word	0x0800250c
 8000758:	40003800 	.word	0x40003800
 800075c:	08002524 	.word	0x08002524
 8000760:	40020000 	.word	0x40020000
 8000764:	08002540 	.word	0x08002540
 8000768:	08002550 	.word	0x08002550
 800076c:	08002564 	.word	0x08002564
 8000770:	08002580 	.word	0x08002580
 8000774:	080025a4 	.word	0x080025a4
 8000778:	08002630 	.word	0x08002630
 800077c:	080025c8 	.word	0x080025c8
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0e1      	beq.n	8000748 <main+0x370>
                printf("Button Pressed \n");
 8000784:	4837      	ldr	r0, [pc, #220]	; (8000864 <main+0x48c>)
 8000786:	f000 fd11 	bl	80011ac <puts>
                // To avoid Button de-bouncing, add software delay
                Delay();
 800078a:	f7ff fe01 	bl	8000390 <Delay>

                // Update command with "Sensor Read Command"
                // CMD_ID_READ
                command = COMMAND_ID_READ; 
 800078e:	2354      	movs	r3, #84	; 0x54
 8000790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                
                // Send LED Read Command First 
                SPI_SendData(SPI2, &command, 1);
 8000794:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4832      	ldr	r0, [pc, #200]	; (8000868 <main+0x490>)
 800079e:	f000 fbf8 	bl	8000f92 <SPI_SendData>
                printf("Master sent: %X \n", command);
 80007a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007a6:	4619      	mov	r1, r3
 80007a8:	4830      	ldr	r0, [pc, #192]	; (800086c <main+0x494>)
 80007aa:	f000 fc8b 	bl	80010c4 <iprintf>

                // Dummy read, to clear RXNE flag
                SPI_ReceiveData(SPI2, &dummy_read, 1);
 80007ae:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <main+0x490>)
 80007b8:	f000 fc21 	bl	8000ffe <SPI_ReceiveData>

                //Send Dummy byte, to read slave response for the command that was send earlier. 
                //Master always initiates communication, so send dummy bytes to get slave response. 
                SPI_SendData(SPI2, &dummy_write, 1); 
 80007bc:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <main+0x490>)
 80007c6:	f000 fbe4 	bl	8000f92 <SPI_SendData>

                // Read Slave response
                SPI_ReceiveData(SPI2, &slave_response, 1);
 80007ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	4825      	ldr	r0, [pc, #148]	; (8000868 <main+0x490>)
 80007d4:	f000 fc13 	bl	8000ffe <SPI_ReceiveData>
                printf("Slave Response to %X: %X \n", command, slave_response);
 80007d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007dc:	4619      	mov	r1, r3
 80007de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e2:	461a      	mov	r2, r3
 80007e4:	4822      	ldr	r0, [pc, #136]	; (8000870 <main+0x498>)
 80007e6:	f000 fc6d 	bl	80010c4 <iprintf>

                // To store Received Data
                uint8_t slaveData[10];

                // Check if slave responsed with ACK or NACK 
                if(SPI_VerifyResponse(slave_response)){
 80007ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fde2 	bl	80003b8 <SPI_VerifyResponse>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d020      	beq.n	800083c <main+0x464>
            
                    // We're receiving information from the arduino. Message to be received -> "ARDUINOUNO" -> 10 bytes of data
                    uint8_t dataLength = 0; 
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                    while(dataLength!=10){
 8000800:	e018      	b.n	8000834 <main+0x45c>
                        
                        //Send Dummy byte, to read slave response for the command that was send earlier. 
                        //Master always initiates communication, so send dummy bytes to get slave response.
                        SPI_SendData(SPI2, &dummy_write, 1); 
 8000802:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000806:	2201      	movs	r2, #1
 8000808:	4619      	mov	r1, r3
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <main+0x490>)
 800080c:	f000 fbc1 	bl	8000f92 <SPI_SendData>

						// Read Slave response
						SPI_ReceiveData(SPI2, &slaveData[dataLength], 1);
 8000810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000814:	f107 021c 	add.w	r2, r7, #28
 8000818:	4413      	add	r3, r2
 800081a:	2201      	movs	r2, #1
 800081c:	4619      	mov	r1, r3
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <main+0x490>)
 8000820:	f000 fbed 	bl	8000ffe <SPI_ReceiveData>
						dataLength++;
 8000824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000828:	3301      	adds	r3, #1
 800082a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        printf("Received a byte of data from slave! \n");
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <main+0x49c>)
 8000830:	f000 fcbc 	bl	80011ac <puts>
                    while(dataLength!=10){
 8000834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000838:	2b0a      	cmp	r3, #10
 800083a:	d1e2      	bne.n	8000802 <main+0x42a>
                    }
                }
        // -- Fifth Command - ID read

        // Confirm SPI2 is not busy 
        while((SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG)));  // While SPI is busy, you wait.
 800083c:	bf00      	nop
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x490>)
 8000842:	f000 fb93 	bl	8000f6c <SPI_GetFlagStatus>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f8      	bne.n	800083e <main+0x466>
        printf("SPI2 not busy anymore! \n");
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <main+0x4a0>)
 800084e:	f000 fcad 	bl	80011ac <puts>
        // SPI2 not busy anymore, disable SPI2 
        SPI_PeripheralControl(SPI2, DISABLE); 
 8000852:	2100      	movs	r1, #0
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <main+0x490>)
 8000856:	f000 fb4d 	bl	8000ef4 <SPI_PeripheralControl>
        printf("SPI2 disabled. \n");
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <main+0x4a4>)
 800085c:	f000 fca6 	bl	80011ac <puts>
    while(1){
 8000860:	e5d2      	b.n	8000408 <main+0x30>
 8000862:	bf00      	nop
 8000864:	08002540 	.word	0x08002540
 8000868:	40003800 	.word	0x40003800
 800086c:	08002550 	.word	0x08002550
 8000870:	08002564 	.word	0x08002564
 8000874:	080025e0 	.word	0x080025e0
 8000878:	08002608 	.word	0x08002608
 800087c:	08002620 	.word	0x08002620

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490e      	ldr	r1, [pc, #56]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0b      	ldr	r4, [pc, #44]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008aa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008ae:	f000 fbdd 	bl	800106c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd91 	bl	80003d8 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008c4:	08002704 	.word	0x08002704
  ldr r2, =_sbss
 80008c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008cc:	20000148 	.word	0x20000148

080008d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>
	...

080008d4 <GPIO_ClockControl>:
 * @Note              -  none

 */


void GPIO_ClockControl(GPIO_RegDef_t *pGPIO_PORT,uint8_t enable_disable ){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]

	/*
	 *  Check if the enable_disable arugment is enable or disable, and then use the
	 *  clock enable macros that we have written in the MCU specific file.
	 */
	if(enable_disable == ENABLE){
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d162      	bne.n	80009ac <GPIO_ClockControl+0xd8>

		if(pGPIO_PORT == GPIOA){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a65      	ldr	r2, [pc, #404]	; (8000a80 <GPIO_ClockControl+0x1ac>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <GPIO_ClockControl+0x28>
			GPIOA_PERIPH_CLOCK_EN(); // GPIOA enable clock access MACRO defined in MCU specific header file.
 80008ee:	4b65      	ldr	r3, [pc, #404]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a64      	ldr	r2, [pc, #400]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PERIPH_CLOCK_DI();
		}else if(pGPIO_PORT == GPIOI){
			GPIOI_PERIPH_CLOCK_DI();
		}
	}
}
 80008fa:	e0bc      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a62      	ldr	r2, [pc, #392]	; (8000a88 <GPIO_ClockControl+0x1b4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d106      	bne.n	8000912 <GPIO_ClockControl+0x3e>
			GPIOB_PERIPH_CLOCK_EN();
 8000904:	4b5f      	ldr	r3, [pc, #380]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a5e      	ldr	r2, [pc, #376]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000910:	e0b1      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a5d      	ldr	r2, [pc, #372]	; (8000a8c <GPIO_ClockControl+0x1b8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <GPIO_ClockControl+0x54>
			GPIOC_PERIPH_CLOCK_EN();
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a59      	ldr	r2, [pc, #356]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000926:	e0a6      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a59      	ldr	r2, [pc, #356]	; (8000a90 <GPIO_ClockControl+0x1bc>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <GPIO_ClockControl+0x6a>
			GPIOD_PERIPH_CLOCK_EN();
 8000930:	4b54      	ldr	r3, [pc, #336]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a53      	ldr	r2, [pc, #332]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800093c:	e09b      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a54      	ldr	r2, [pc, #336]	; (8000a94 <GPIO_ClockControl+0x1c0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <GPIO_ClockControl+0x80>
			GPIOE_PERIPH_CLOCK_EN();
 8000946:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a4e      	ldr	r2, [pc, #312]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000952:	e090      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a50      	ldr	r2, [pc, #320]	; (8000a98 <GPIO_ClockControl+0x1c4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <GPIO_ClockControl+0x96>
			GPIOF_PERIPH_CLOCK_EN();
 800095c:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000968:	e085      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4b      	ldr	r2, [pc, #300]	; (8000a9c <GPIO_ClockControl+0x1c8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <GPIO_ClockControl+0xac>
			GPIOG_PERIPH_CLOCK_EN();
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097e:	e07a      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a47      	ldr	r2, [pc, #284]	; (8000aa0 <GPIO_ClockControl+0x1cc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <GPIO_ClockControl+0xc2>
			GPIOH_PERIPH_CLOCK_EN();
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a3d      	ldr	r2, [pc, #244]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000994:	e06f      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <GPIO_ClockControl+0x1d0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d16b      	bne.n	8000a76 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_EN();
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009aa:	e064      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
	}else if(enable_disable == DISABLE){
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d161      	bne.n	8000a76 <GPIO_ClockControl+0x1a2>
		if(pGPIO_PORT == GPIOA){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <GPIO_ClockControl+0x1ac>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <GPIO_ClockControl+0xf4>
			GPIOA_PERIPH_CLOCK_DI(); // GPIOA disable clock access MACRO defined in MCU specific header file.
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009c0:	f023 0301 	bic.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c6:	e056      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOB){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <GPIO_ClockControl+0x1b4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <GPIO_ClockControl+0x10a>
			GPIOB_PERIPH_CLOCK_DI();
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009d6:	f023 0302 	bic.w	r3, r3, #2
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009dc:	e04b      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOC){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <GPIO_ClockControl+0x1b8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <GPIO_ClockControl+0x120>
			GPIOC_PERIPH_CLOCK_DI();
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009ec:	f023 0304 	bic.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f2:	e040      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOD){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <GPIO_ClockControl+0x1bc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <GPIO_ClockControl+0x136>
			GPIOD_PERIPH_CLOCK_DI();
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a02:	f023 0308 	bic.w	r3, r3, #8
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a08:	e035      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOE){
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <GPIO_ClockControl+0x1c0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <GPIO_ClockControl+0x14c>
			GPIOE_PERIPH_CLOCK_DI();
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a18:	f023 0310 	bic.w	r3, r3, #16
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1e:	e02a      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOF){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <GPIO_ClockControl+0x1c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <GPIO_ClockControl+0x162>
			GPIOF_PERIPH_CLOCK_DI();
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a2e:	f023 0320 	bic.w	r3, r3, #32
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a34:	e01f      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOG){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <GPIO_ClockControl+0x1c8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <GPIO_ClockControl+0x178>
			GPIOG_PERIPH_CLOCK_DI();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4a:	e014      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOH){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <GPIO_ClockControl+0x1cc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <GPIO_ClockControl+0x18e>
			GPIOH_PERIPH_CLOCK_DI();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a60:	e009      	b.n	8000a76 <GPIO_ClockControl+0x1a2>
		}else if(pGPIO_PORT == GPIOI){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <GPIO_ClockControl+0x1d0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d105      	bne.n	8000a76 <GPIO_ClockControl+0x1a2>
			GPIOI_PERIPH_CLOCK_DI();
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <GPIO_ClockControl+0x1b0>)
 8000a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40021400 	.word	0x40021400
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40021c00 	.word	0x40021c00
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
		
	uint32_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
						// The temp variable needs to be size of 32 bits, because MODER register is 32 bits wide.

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d820      	bhi.n	8000afe <GPIO_Init+0x56>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	617b      	str	r3, [r7, #20]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2103      	movs	r1, #3
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	400a      	ands	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e0dc      	b.n	8000cb8 <GPIO_Init+0x210>
	}else {

		// Do this for if the selected pin mode is one of the Interrupt Modes.

		if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	795b      	ldrb	r3, [r3, #5]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d117      	bne.n	8000b36 <GPIO_Init+0x8e>
			// 1. Configure the Falling Edge Trigger Selection Register  
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000b06:	4b4f      	ldr	r3, [pc, #316]	; (8000c44 <GPIO_Init+0x19c>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	7912      	ldrb	r2, [r2, #4]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	2201      	movs	r2, #1
 8000b12:	408a      	lsls	r2, r1
 8000b14:	4611      	mov	r1, r2
 8000b16:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <GPIO_Init+0x19c>)
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	60d3      	str	r3, [r2, #12]

			// Clear the Corresponding Rising Edge Trigger Selection Register - Just to be safe.   
			  EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <GPIO_Init+0x19c>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	7912      	ldrb	r2, [r2, #4]
 8000b24:	4611      	mov	r1, r2
 8000b26:	2201      	movs	r2, #1
 8000b28:	408a      	lsls	r2, r1
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a45      	ldr	r2, [pc, #276]	; (8000c44 <GPIO_Init+0x19c>)
 8000b30:	400b      	ands	r3, r1
 8000b32:	6093      	str	r3, [r2, #8]
 8000b34:	e035      	b.n	8000ba2 <GPIO_Init+0xfa>

		}else if (pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_EDGE_INTERRUPT_MODE){
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	795b      	ldrb	r3, [r3, #5]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d117      	bne.n	8000b6e <GPIO_Init+0xc6>
			// 1. Configure the Rising Edge Trigger Selection Register  
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <GPIO_Init+0x19c>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	7912      	ldrb	r2, [r2, #4]
 8000b46:	4611      	mov	r1, r2
 8000b48:	2201      	movs	r2, #1
 8000b4a:	408a      	lsls	r2, r1
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <GPIO_Init+0x19c>)
 8000b50:	430b      	orrs	r3, r1
 8000b52:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000b54:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <GPIO_Init+0x19c>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	7912      	ldrb	r2, [r2, #4]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	2201      	movs	r2, #1
 8000b60:	408a      	lsls	r2, r1
 8000b62:	43d2      	mvns	r2, r2
 8000b64:	4611      	mov	r1, r2
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <GPIO_Init+0x19c>)
 8000b68:	400b      	ands	r3, r1
 8000b6a:	60d3      	str	r3, [r2, #12]
 8000b6c:	e019      	b.n	8000ba2 <GPIO_Init+0xfa>

		}else if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_FALLING_INTERRUPT_MODE){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	795b      	ldrb	r3, [r3, #5]
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d115      	bne.n	8000ba2 <GPIO_Init+0xfa>

			// 1. Configure both Rising Edge Trigger & Falling Edge Trigger Selection Register 
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <GPIO_Init+0x19c>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	7912      	ldrb	r2, [r2, #4]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	2201      	movs	r2, #1
 8000b82:	408a      	lsls	r2, r1
 8000b84:	4611      	mov	r1, r2
 8000b86:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <GPIO_Init+0x19c>)
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 	  
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <GPIO_Init+0x19c>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	7912      	ldrb	r2, [r2, #4]
 8000b94:	4611      	mov	r1, r2
 8000b96:	2201      	movs	r2, #1
 8000b98:	408a      	lsls	r2, r1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <GPIO_Init+0x19c>)
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	60d3      	str	r3, [r2, #12]
			
				uint8_t temp1;
				uint8_t temp2; 

				// Gives the value of EXTICRx Register 
				temp1 = (pGPIOHandle->PinConfig.PinMode) / 5; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	795b      	ldrb	r3, [r3, #5]
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <GPIO_Init+0x1a0>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	74fb      	strb	r3, [r7, #19]
				// Gives the value of which field in EXTICRx to configure
				temp2 = (pGPIOHandle->PinConfig.PinMode) % 5; 
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	795a      	ldrb	r2, [r3, #5]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <GPIO_Init+0x1a0>)
 8000bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bba:	0899      	lsrs	r1, r3, #2
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	74bb      	strb	r3, [r7, #18]

				uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx_BASEADDR); // This macro will return the portCode corresponding to the baseaddress it receives.
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <GPIO_Init+0x1a4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d04f      	beq.n	8000c70 <GPIO_Init+0x1c8>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <GPIO_Init+0x1a8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d032      	beq.n	8000c40 <GPIO_Init+0x198>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <GPIO_Init+0x1ac>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d02b      	beq.n	8000c3c <GPIO_Init+0x194>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <GPIO_Init+0x1b0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d024      	beq.n	8000c38 <GPIO_Init+0x190>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <GPIO_Init+0x1b4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d01d      	beq.n	8000c34 <GPIO_Init+0x18c>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <GPIO_Init+0x1b8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d016      	beq.n	8000c30 <GPIO_Init+0x188>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <GPIO_Init+0x1bc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00f      	beq.n	8000c2c <GPIO_Init+0x184>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <GPIO_Init+0x1c0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d008      	beq.n	8000c28 <GPIO_Init+0x180>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <GPIO_Init+0x1c4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d101      	bne.n	8000c24 <GPIO_Init+0x17c>
 8000c20:	2308      	movs	r3, #8
 8000c22:	e026      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c24:	2300      	movs	r3, #0
 8000c26:	e024      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c28:	2307      	movs	r3, #7
 8000c2a:	e022      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	e020      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c30:	2305      	movs	r3, #5
 8000c32:	e01e      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e01c      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e01a      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e018      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e016      	b.n	8000c72 <GPIO_Init+0x1ca>
 8000c44:	40013c00 	.word	0x40013c00
 8000c48:	cccccccd 	.word	0xcccccccd
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40021400 	.word	0x40021400
 8000c64:	40021800 	.word	0x40021800
 8000c68:	40021c00 	.word	0x40021c00
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	2300      	movs	r3, #0
 8000c72:	747b      	strb	r3, [r7, #17]
				SYSCFG_PERIPH_CLOCK_EN();   												// Enable clock access to System Configuration Peripheral before you configure its register
 8000c74:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <GPIO_Init+0x350>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	4a5f      	ldr	r2, [pc, #380]	; (8000df8 <GPIO_Init+0x350>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6453      	str	r3, [r2, #68]	; 0x44
				//								The starting position of the field
				//										|
				SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 8000c80:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <GPIO_Init+0x354>)
 8000c82:	7cfb      	ldrb	r3, [r7, #19]
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8a:	7c79      	ldrb	r1, [r7, #17]
 8000c8c:	7cbb      	ldrb	r3, [r7, #18]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	4959      	ldr	r1, [pc, #356]	; (8000dfc <GPIO_Init+0x354>)
 8000c98:	7cfb      	ldrb	r3, [r7, #19]
 8000c9a:	4302      	orrs	r2, r0
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				
			// 3. Enable the respective EXTI line to allow interrupts to be send to the Processor via NVIC - using Interrupt Mask Register
		
			EXTI->IMR |= (1<< pGPIOHandle->PinConfig.PinNumber); // This will Enable the EXTI line corresponding to the Pin number. 
 8000ca2:	4b57      	ldr	r3, [pc, #348]	; (8000e00 <GPIO_Init+0x358>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	7912      	ldrb	r2, [r2, #4]
 8000caa:	4611      	mov	r1, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	408a      	lsls	r2, r1
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a53      	ldr	r2, [pc, #332]	; (8000e00 <GPIO_Init+0x358>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
			
	}

	
	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2103      	movs	r1, #3
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	400a      	ands	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6899      	ldr	r1, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	79db      	ldrb	r3, [r3, #7]
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (2* pGPIOHandle->PinConfig.PinNumber));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2103      	movs	r1, #3
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68d9      	ldr	r1, [r3, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a1b      	ldrb	r3, [r3, #8]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2301      	movs	r3, #1
 8000d62:	408b      	lsls	r3, r1
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d131      	bne.n	8000dec <GPIO_Init+0x344>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint8_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	743b      	strb	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	73fb      	strb	r3, [r7, #15]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	7c3a      	ldrb	r2, [r7, #16]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7c3a      	ldrb	r2, [r7, #16]
 8000dba:	4001      	ands	r1, r0
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	7c3a      	ldrb	r2, [r7, #16]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7a5b      	ldrb	r3, [r3, #9]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	7c3a      	ldrb	r2, [r7, #16]
 8000de4:	4301      	orrs	r1, r0
 8000de6:	3208      	adds	r2, #8
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			}*/

	}

}
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40013c00 	.word	0x40013c00

08000e04 <GPIO_ReadFromInputPin>:
 * @return            -0 or 1
 *
 * @Note              -

*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIO_PORT, uint8_t pinNumber){
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
//					Grab the Input Data Register, followed by leftshifting the desired bit to the LSB position, followed by masking the remaining bits from Bit 0 - Bit 31, followed by typecasting the uint32_t  as uint8_t, to avoid compiler error.
//							|
	value = (uint8_t) ((pGPIO_PORT->IDR >> pinNumber) & 0x00000001);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  

 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000e2e:	b480      	push	{r7}
 8000e30:	b085      	sub	sp, #20
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]

    // Configure SPI_CR1 register first. 

    uint32_t tempReg = 0; // Set all the bits corresponding to CR1 register, followed by assigned this value to the CR1 register. 
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

    // 1. Configure Device Mode
    
    tempReg |= ((pSPIHandle->SPIConfig.DeviceMode) << SPI_CR1_MSTR); // '2' Because bit 2 of CR1 is used for configuring Master or Slave mode. 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	791b      	ldrb	r3, [r3, #4]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    /* Not very clear --> Need to REVIEW spi communication type configurations */ 

    // 2. Configure Bus Configuration, i.e. SPI communication type
    if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_FULL_DUPLEX_MODE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <SPI_Init+0x2c>
    {
        // Set BIDIMODE bit of CR1 as '0' -> Will configure 2-line unidirection data mode
        // resulting in separate line for RX and TX
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e021      	b.n	8000e9e <SPI_Init+0x70>
        
        // RXONLY bit is by default = '0' which means Receive and Transmit.
    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_HALF_DUPLEX_MODE){
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d104      	bne.n	8000e6c <SPI_Init+0x3e>
        // Set BIDIMODE bit of CR1 as '1' -> will configure 1-line bidirection data mode, same line for RX and TX 
        tempReg |= (1 << SPI_CR1_BIDIMODE); 
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e018      	b.n	8000e9e <SPI_Init+0x70>

    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_TX_ONLY){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d108      	bne.n	8000e86 <SPI_Init+0x58>

        // Clear BIDIMODE bit of CR1 to '0' -> 2-line bidirection data mode, different line for RX & TX
        tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e7a:	60fb      	str	r3, [r7, #12]
        // Clear RXONLY bit to '0', basically configuring Full-duplex mode with Transmission ONLY, and ignoring Receive 
        tempReg &= ~(1<<SPI_CR1_RXONLY);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e00b      	b.n	8000e9e <SPI_Init+0x70>
        

    }else if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_RX_ONLY){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	795b      	ldrb	r3, [r3, #5]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d107      	bne.n	8000e9e <SPI_Init+0x70>
        // Clear BIDIMODE bit of CR1 to '0' -> 2-line unidirectional data mode, i.e. Full duplex SPI communication type
        tempReg &= ~(1<<SPI_CR1_BIDIMODE); 
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e94:	60fb      	str	r3, [r7, #12]
        // Set RXONLY bit to force clock generation,i.e. if the device is master, you want to only RECEIVE.
        tempReg |= (1<<SPI_CR1_RXONLY);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9c:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure Serial Clock but setting Baudrate. 
    tempReg |= ((pSPIHandle->SPIConfig.SclkSpeed) << SPI_CR1_BR);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    // 4. Configure Data Frame Format
    tempReg |= ((pSPIHandle->SPIConfig.DataFrameFormat) << SPI_CR1_DFF); 
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	79db      	ldrb	r3, [r3, #7]
 8000eb0:	02db      	lsls	r3, r3, #11
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]

    // 5. Configure ClockPolarity (CPOL)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPolarity) << SPI_CR1_CPOL); 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7a1b      	ldrb	r3, [r3, #8]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    // 6. Configure ClockPhase (CPHA)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPhase) << SPI_CR1_CPHA); 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7a5b      	ldrb	r3, [r3, #9]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

    // 7. Configure Software Slave Management 
    tempReg |= ((pSPIHandle->SPIConfig.SlaveManagementType) << SPI_CR1_SSM); 
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a9b      	ldrb	r3, [r3, #10]
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]

    // Assign tempReg to your SPIx's CR1 register.
    pSPIHandle->pSPIx_BASEADDR->CR1 = tempReg;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	601a      	str	r2, [r3, #0]

}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SPI_PeripheralControl>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable == ENABLE){
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d106      	bne.n	8000f14 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000f12:	e008      	b.n	8000f26 <SPI_PeripheralControl+0x32>
    }else if(Enable_Disable == DISABLE){
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d105      	bne.n	8000f26 <SPI_PeripheralControl+0x32>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SPI_SSOEConfig>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable==ENABLE){
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d106      	bne.n	8000f50 <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f043 0204 	orr.w	r2, r3, #4
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	605a      	str	r2, [r3, #4]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8000f4e:	e008      	b.n	8000f62 <SPI_SSOEConfig+0x32>
    }else if(Enable_Disable == DISABLE){
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d105      	bne.n	8000f62 <SPI_SSOEConfig+0x32>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 0204 	bic.w	r2, r3, #4
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <SPI_GetFlagStatus>:
 *
 * @return            -  Either '1' or '0' 
 *
 * @Note              - None
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]

    if(pSPIx->SR & FlagName){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <SPI_SendData>:
 *                       This is a "Blocking" implementation of SPI send, you wait till TXE is set, before you can push data into the Tx Buffer.
 *                        It is also called Polling method, because we're waiting till Transmit buffer gets empty, the function will stay there.                        
 *                        There are problems with this method of implementation, what if something wrong with the hardware and the TXE flag is NEVER set, then the system 
                        will be stuck here forever, this when you need a WATCHDOG module to reset the system if it becomes non-responsive for a certain time period. 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLength){
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]

    while(DataLength > 0){
 8000f9e:	e027      	b.n	8000ff0 <SPI_SendData+0x5e>
        //1. Wait until TXE is set
                    // while( !(pSPIx->SR & (1 << 1)) ); // Checking if TXE flag is set in the Status Register, implement the condition using a function defined in this source. 
        while(! SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG));  // Same as above statement, but a much cleaner method of implementation. If TXNE, you stay here, if empty, you push data into Tx Buffer
 8000fa0:	bf00      	nop
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ffe1 	bl	8000f6c <SPI_GetFlagStatus>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f8      	beq.n	8000fa2 <SPI_SendData+0x10>
    
        //2. Check DFF bit CR1 to determine how many bytes to upload in the DR, which will push the data bytes to the Tx Buffer
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00e      	beq.n	8000fda <SPI_SendData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data. Without the uint16_t* typecast, you would be dereferencing a byte of data. 
            //                  |
            pSPIx->DR = *((uint16_t *)pTxBuffer);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	60da      	str	r2, [r3, #12]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pTxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	e00a      	b.n	8000ff0 <SPI_SendData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to upload a byte at a time. 
            pSPIx->DR = *(pTxBuffer); // Don't need typecasting as pointer is of 8-bit type. 
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	60da      	str	r2, [r3, #12]
            DataLength--; 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
            pTxBuffer++; 
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
    while(DataLength > 0){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1d4      	bne.n	8000fa0 <SPI_SendData+0xe>
        }
        
    }

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <SPI_ReceiveData>:
 * @return            -  None
 *
 * @Note              -  uint32_t is a standared for defining data length.

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLength){
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]

     while(DataLength > 0){
 800100a:	e027      	b.n	800105c <SPI_ReceiveData+0x5e>
        //1. Wait until RXNE is set, which RX Buffer in the SPI block is not Empty, there is new data available 
                    // while( !(pSPIx->SR & (0 << 1)) ); // Checking if RXNE flag is set in the Status Register, implement the condition using a function defined in this source. 

    	 while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );  // Same as above statement, but a much cleaner method of implementation.
 800100c:	bf00      	nop
 800100e:	2101      	movs	r1, #1
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff ffab 	bl	8000f6c <SPI_GetFlagStatus>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f8      	beq.n	800100e <SPI_ReceiveData+0x10>
        
        //2. Check DFF bit CR1 to determine how many bytes to Download/grab/read from the DR, which will push the data bytes from the SPI RX buffer to the RX buffer of the program
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00e      	beq.n	8001046 <SPI_ReceiveData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data - in this case you will download/read 16-bits of data from SPI's RX buffer. Without the uint16_t* typecast, you would be storing a byte of data.
            //                  |
            *((uint16_t *)pRxBuffer) = pSPIx->DR;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	b29a      	uxth	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	801a      	strh	r2, [r3, #0]
             
            // Pushed 2 bytes of Data into Rx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
            DataLength--; 
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pRxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3301      	adds	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	e00a      	b.n	800105c <SPI_ReceiveData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to read a byte at a time from the SPI's RX buffer 
            *(pRxBuffer) = pSPIx->DR; // Don't need type-casting as pointer is of 8-bit type.
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	701a      	strb	r2, [r3, #0]
            DataLength--; 
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
            pRxBuffer++; 
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3301      	adds	r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
     while(DataLength > 0){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1d4      	bne.n	800100c <SPI_ReceiveData+0xe>
        }
        
    }

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <__libc_init_array>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4e0d      	ldr	r6, [pc, #52]	; (80010a4 <__libc_init_array+0x38>)
 8001070:	4c0d      	ldr	r4, [pc, #52]	; (80010a8 <__libc_init_array+0x3c>)
 8001072:	1ba4      	subs	r4, r4, r6
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	2500      	movs	r5, #0
 8001078:	42a5      	cmp	r5, r4
 800107a:	d109      	bne.n	8001090 <__libc_init_array+0x24>
 800107c:	4e0b      	ldr	r6, [pc, #44]	; (80010ac <__libc_init_array+0x40>)
 800107e:	4c0c      	ldr	r4, [pc, #48]	; (80010b0 <__libc_init_array+0x44>)
 8001080:	f001 fa38 	bl	80024f4 <_init>
 8001084:	1ba4      	subs	r4, r4, r6
 8001086:	10a4      	asrs	r4, r4, #2
 8001088:	2500      	movs	r5, #0
 800108a:	42a5      	cmp	r5, r4
 800108c:	d105      	bne.n	800109a <__libc_init_array+0x2e>
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001094:	4798      	blx	r3
 8001096:	3501      	adds	r5, #1
 8001098:	e7ee      	b.n	8001078 <__libc_init_array+0xc>
 800109a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800109e:	4798      	blx	r3
 80010a0:	3501      	adds	r5, #1
 80010a2:	e7f2      	b.n	800108a <__libc_init_array+0x1e>
 80010a4:	080026fc 	.word	0x080026fc
 80010a8:	080026fc 	.word	0x080026fc
 80010ac:	080026fc 	.word	0x080026fc
 80010b0:	08002700 	.word	0x08002700

080010b4 <memset>:
 80010b4:	4402      	add	r2, r0
 80010b6:	4603      	mov	r3, r0
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d100      	bne.n	80010be <memset+0xa>
 80010bc:	4770      	bx	lr
 80010be:	f803 1b01 	strb.w	r1, [r3], #1
 80010c2:	e7f9      	b.n	80010b8 <memset+0x4>

080010c4 <iprintf>:
 80010c4:	b40f      	push	{r0, r1, r2, r3}
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <iprintf+0x2c>)
 80010c8:	b513      	push	{r0, r1, r4, lr}
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	b124      	cbz	r4, 80010d8 <iprintf+0x14>
 80010ce:	69a3      	ldr	r3, [r4, #24]
 80010d0:	b913      	cbnz	r3, 80010d8 <iprintf+0x14>
 80010d2:	4620      	mov	r0, r4
 80010d4:	f000 fa22 	bl	800151c <__sinit>
 80010d8:	ab05      	add	r3, sp, #20
 80010da:	9a04      	ldr	r2, [sp, #16]
 80010dc:	68a1      	ldr	r1, [r4, #8]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4620      	mov	r0, r4
 80010e2:	f000 fbd9 	bl	8001898 <_vfiprintf_r>
 80010e6:	b002      	add	sp, #8
 80010e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010ec:	b004      	add	sp, #16
 80010ee:	4770      	bx	lr
 80010f0:	20000000 	.word	0x20000000

080010f4 <_puts_r>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	460e      	mov	r6, r1
 80010f8:	4605      	mov	r5, r0
 80010fa:	b118      	cbz	r0, 8001104 <_puts_r+0x10>
 80010fc:	6983      	ldr	r3, [r0, #24]
 80010fe:	b90b      	cbnz	r3, 8001104 <_puts_r+0x10>
 8001100:	f000 fa0c 	bl	800151c <__sinit>
 8001104:	69ab      	ldr	r3, [r5, #24]
 8001106:	68ac      	ldr	r4, [r5, #8]
 8001108:	b913      	cbnz	r3, 8001110 <_puts_r+0x1c>
 800110a:	4628      	mov	r0, r5
 800110c:	f000 fa06 	bl	800151c <__sinit>
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <_puts_r+0xac>)
 8001112:	429c      	cmp	r4, r3
 8001114:	d117      	bne.n	8001146 <_puts_r+0x52>
 8001116:	686c      	ldr	r4, [r5, #4]
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	071b      	lsls	r3, r3, #28
 800111c:	d51d      	bpl.n	800115a <_puts_r+0x66>
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	b1db      	cbz	r3, 800115a <_puts_r+0x66>
 8001122:	3e01      	subs	r6, #1
 8001124:	68a3      	ldr	r3, [r4, #8]
 8001126:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800112a:	3b01      	subs	r3, #1
 800112c:	60a3      	str	r3, [r4, #8]
 800112e:	b9e9      	cbnz	r1, 800116c <_puts_r+0x78>
 8001130:	2b00      	cmp	r3, #0
 8001132:	da2e      	bge.n	8001192 <_puts_r+0x9e>
 8001134:	4622      	mov	r2, r4
 8001136:	210a      	movs	r1, #10
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f83f 	bl	80011bc <__swbuf_r>
 800113e:	3001      	adds	r0, #1
 8001140:	d011      	beq.n	8001166 <_puts_r+0x72>
 8001142:	200a      	movs	r0, #10
 8001144:	e011      	b.n	800116a <_puts_r+0x76>
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <_puts_r+0xb0>)
 8001148:	429c      	cmp	r4, r3
 800114a:	d101      	bne.n	8001150 <_puts_r+0x5c>
 800114c:	68ac      	ldr	r4, [r5, #8]
 800114e:	e7e3      	b.n	8001118 <_puts_r+0x24>
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_puts_r+0xb4>)
 8001152:	429c      	cmp	r4, r3
 8001154:	bf08      	it	eq
 8001156:	68ec      	ldreq	r4, [r5, #12]
 8001158:	e7de      	b.n	8001118 <_puts_r+0x24>
 800115a:	4621      	mov	r1, r4
 800115c:	4628      	mov	r0, r5
 800115e:	f000 f87f 	bl	8001260 <__swsetup_r>
 8001162:	2800      	cmp	r0, #0
 8001164:	d0dd      	beq.n	8001122 <_puts_r+0x2e>
 8001166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	2b00      	cmp	r3, #0
 800116e:	da04      	bge.n	800117a <_puts_r+0x86>
 8001170:	69a2      	ldr	r2, [r4, #24]
 8001172:	429a      	cmp	r2, r3
 8001174:	dc06      	bgt.n	8001184 <_puts_r+0x90>
 8001176:	290a      	cmp	r1, #10
 8001178:	d004      	beq.n	8001184 <_puts_r+0x90>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	6022      	str	r2, [r4, #0]
 8001180:	7019      	strb	r1, [r3, #0]
 8001182:	e7cf      	b.n	8001124 <_puts_r+0x30>
 8001184:	4622      	mov	r2, r4
 8001186:	4628      	mov	r0, r5
 8001188:	f000 f818 	bl	80011bc <__swbuf_r>
 800118c:	3001      	adds	r0, #1
 800118e:	d1c9      	bne.n	8001124 <_puts_r+0x30>
 8001190:	e7e9      	b.n	8001166 <_puts_r+0x72>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	200a      	movs	r0, #10
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	6022      	str	r2, [r4, #0]
 800119a:	7018      	strb	r0, [r3, #0]
 800119c:	e7e5      	b.n	800116a <_puts_r+0x76>
 800119e:	bf00      	nop
 80011a0:	0800266c 	.word	0x0800266c
 80011a4:	0800268c 	.word	0x0800268c
 80011a8:	0800264c 	.word	0x0800264c

080011ac <puts>:
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <puts+0xc>)
 80011ae:	4601      	mov	r1, r0
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	f7ff bf9f 	b.w	80010f4 <_puts_r>
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <__swbuf_r>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	460e      	mov	r6, r1
 80011c0:	4614      	mov	r4, r2
 80011c2:	4605      	mov	r5, r0
 80011c4:	b118      	cbz	r0, 80011ce <__swbuf_r+0x12>
 80011c6:	6983      	ldr	r3, [r0, #24]
 80011c8:	b90b      	cbnz	r3, 80011ce <__swbuf_r+0x12>
 80011ca:	f000 f9a7 	bl	800151c <__sinit>
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <__swbuf_r+0x98>)
 80011d0:	429c      	cmp	r4, r3
 80011d2:	d12a      	bne.n	800122a <__swbuf_r+0x6e>
 80011d4:	686c      	ldr	r4, [r5, #4]
 80011d6:	69a3      	ldr	r3, [r4, #24]
 80011d8:	60a3      	str	r3, [r4, #8]
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	071a      	lsls	r2, r3, #28
 80011de:	d52e      	bpl.n	800123e <__swbuf_r+0x82>
 80011e0:	6923      	ldr	r3, [r4, #16]
 80011e2:	b363      	cbz	r3, 800123e <__swbuf_r+0x82>
 80011e4:	6923      	ldr	r3, [r4, #16]
 80011e6:	6820      	ldr	r0, [r4, #0]
 80011e8:	1ac0      	subs	r0, r0, r3
 80011ea:	6963      	ldr	r3, [r4, #20]
 80011ec:	b2f6      	uxtb	r6, r6
 80011ee:	4283      	cmp	r3, r0
 80011f0:	4637      	mov	r7, r6
 80011f2:	dc04      	bgt.n	80011fe <__swbuf_r+0x42>
 80011f4:	4621      	mov	r1, r4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f926 	bl	8001448 <_fflush_r>
 80011fc:	bb28      	cbnz	r0, 800124a <__swbuf_r+0x8e>
 80011fe:	68a3      	ldr	r3, [r4, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60a3      	str	r3, [r4, #8]
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	6022      	str	r2, [r4, #0]
 800120a:	701e      	strb	r6, [r3, #0]
 800120c:	6963      	ldr	r3, [r4, #20]
 800120e:	3001      	adds	r0, #1
 8001210:	4283      	cmp	r3, r0
 8001212:	d004      	beq.n	800121e <__swbuf_r+0x62>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	07db      	lsls	r3, r3, #31
 8001218:	d519      	bpl.n	800124e <__swbuf_r+0x92>
 800121a:	2e0a      	cmp	r6, #10
 800121c:	d117      	bne.n	800124e <__swbuf_r+0x92>
 800121e:	4621      	mov	r1, r4
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f911 	bl	8001448 <_fflush_r>
 8001226:	b190      	cbz	r0, 800124e <__swbuf_r+0x92>
 8001228:	e00f      	b.n	800124a <__swbuf_r+0x8e>
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <__swbuf_r+0x9c>)
 800122c:	429c      	cmp	r4, r3
 800122e:	d101      	bne.n	8001234 <__swbuf_r+0x78>
 8001230:	68ac      	ldr	r4, [r5, #8]
 8001232:	e7d0      	b.n	80011d6 <__swbuf_r+0x1a>
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <__swbuf_r+0xa0>)
 8001236:	429c      	cmp	r4, r3
 8001238:	bf08      	it	eq
 800123a:	68ec      	ldreq	r4, [r5, #12]
 800123c:	e7cb      	b.n	80011d6 <__swbuf_r+0x1a>
 800123e:	4621      	mov	r1, r4
 8001240:	4628      	mov	r0, r5
 8001242:	f000 f80d 	bl	8001260 <__swsetup_r>
 8001246:	2800      	cmp	r0, #0
 8001248:	d0cc      	beq.n	80011e4 <__swbuf_r+0x28>
 800124a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800124e:	4638      	mov	r0, r7
 8001250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001252:	bf00      	nop
 8001254:	0800266c 	.word	0x0800266c
 8001258:	0800268c 	.word	0x0800268c
 800125c:	0800264c 	.word	0x0800264c

08001260 <__swsetup_r>:
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <__swsetup_r+0xcc>)
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	681d      	ldr	r5, [r3, #0]
 8001266:	4606      	mov	r6, r0
 8001268:	460c      	mov	r4, r1
 800126a:	b125      	cbz	r5, 8001276 <__swsetup_r+0x16>
 800126c:	69ab      	ldr	r3, [r5, #24]
 800126e:	b913      	cbnz	r3, 8001276 <__swsetup_r+0x16>
 8001270:	4628      	mov	r0, r5
 8001272:	f000 f953 	bl	800151c <__sinit>
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <__swsetup_r+0xd0>)
 8001278:	429c      	cmp	r4, r3
 800127a:	d10f      	bne.n	800129c <__swsetup_r+0x3c>
 800127c:	686c      	ldr	r4, [r5, #4]
 800127e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001282:	b29a      	uxth	r2, r3
 8001284:	0715      	lsls	r5, r2, #28
 8001286:	d42c      	bmi.n	80012e2 <__swsetup_r+0x82>
 8001288:	06d0      	lsls	r0, r2, #27
 800128a:	d411      	bmi.n	80012b0 <__swsetup_r+0x50>
 800128c:	2209      	movs	r2, #9
 800128e:	6032      	str	r2, [r6, #0]
 8001290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129a:	e03e      	b.n	800131a <__swsetup_r+0xba>
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <__swsetup_r+0xd4>)
 800129e:	429c      	cmp	r4, r3
 80012a0:	d101      	bne.n	80012a6 <__swsetup_r+0x46>
 80012a2:	68ac      	ldr	r4, [r5, #8]
 80012a4:	e7eb      	b.n	800127e <__swsetup_r+0x1e>
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <__swsetup_r+0xd8>)
 80012a8:	429c      	cmp	r4, r3
 80012aa:	bf08      	it	eq
 80012ac:	68ec      	ldreq	r4, [r5, #12]
 80012ae:	e7e6      	b.n	800127e <__swsetup_r+0x1e>
 80012b0:	0751      	lsls	r1, r2, #29
 80012b2:	d512      	bpl.n	80012da <__swsetup_r+0x7a>
 80012b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b6:	b141      	cbz	r1, 80012ca <__swsetup_r+0x6a>
 80012b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012bc:	4299      	cmp	r1, r3
 80012be:	d002      	beq.n	80012c6 <__swsetup_r+0x66>
 80012c0:	4630      	mov	r0, r6
 80012c2:	f000 fa19 	bl	80016f8 <_free_r>
 80012c6:	2300      	movs	r3, #0
 80012c8:	6363      	str	r3, [r4, #52]	; 0x34
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012d0:	81a3      	strh	r3, [r4, #12]
 80012d2:	2300      	movs	r3, #0
 80012d4:	6063      	str	r3, [r4, #4]
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	81a3      	strh	r3, [r4, #12]
 80012e2:	6923      	ldr	r3, [r4, #16]
 80012e4:	b94b      	cbnz	r3, 80012fa <__swsetup_r+0x9a>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d003      	beq.n	80012fa <__swsetup_r+0x9a>
 80012f2:	4621      	mov	r1, r4
 80012f4:	4630      	mov	r0, r6
 80012f6:	f000 f9bf 	bl	8001678 <__smakebuf_r>
 80012fa:	89a2      	ldrh	r2, [r4, #12]
 80012fc:	f012 0301 	ands.w	r3, r2, #1
 8001300:	d00c      	beq.n	800131c <__swsetup_r+0xbc>
 8001302:	2300      	movs	r3, #0
 8001304:	60a3      	str	r3, [r4, #8]
 8001306:	6963      	ldr	r3, [r4, #20]
 8001308:	425b      	negs	r3, r3
 800130a:	61a3      	str	r3, [r4, #24]
 800130c:	6923      	ldr	r3, [r4, #16]
 800130e:	b953      	cbnz	r3, 8001326 <__swsetup_r+0xc6>
 8001310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001314:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001318:	d1ba      	bne.n	8001290 <__swsetup_r+0x30>
 800131a:	bd70      	pop	{r4, r5, r6, pc}
 800131c:	0792      	lsls	r2, r2, #30
 800131e:	bf58      	it	pl
 8001320:	6963      	ldrpl	r3, [r4, #20]
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	e7f2      	b.n	800130c <__swsetup_r+0xac>
 8001326:	2000      	movs	r0, #0
 8001328:	e7f7      	b.n	800131a <__swsetup_r+0xba>
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	0800266c 	.word	0x0800266c
 8001334:	0800268c 	.word	0x0800268c
 8001338:	0800264c 	.word	0x0800264c

0800133c <__sflush_r>:
 800133c:	898a      	ldrh	r2, [r1, #12]
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	4605      	mov	r5, r0
 8001344:	0710      	lsls	r0, r2, #28
 8001346:	460c      	mov	r4, r1
 8001348:	d458      	bmi.n	80013fc <__sflush_r+0xc0>
 800134a:	684b      	ldr	r3, [r1, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dc05      	bgt.n	800135c <__sflush_r+0x20>
 8001350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	dc02      	bgt.n	800135c <__sflush_r+0x20>
 8001356:	2000      	movs	r0, #0
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800135c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800135e:	2e00      	cmp	r6, #0
 8001360:	d0f9      	beq.n	8001356 <__sflush_r+0x1a>
 8001362:	2300      	movs	r3, #0
 8001364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001368:	682f      	ldr	r7, [r5, #0]
 800136a:	6a21      	ldr	r1, [r4, #32]
 800136c:	602b      	str	r3, [r5, #0]
 800136e:	d032      	beq.n	80013d6 <__sflush_r+0x9a>
 8001370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	075a      	lsls	r2, r3, #29
 8001376:	d505      	bpl.n	8001384 <__sflush_r+0x48>
 8001378:	6863      	ldr	r3, [r4, #4]
 800137a:	1ac0      	subs	r0, r0, r3
 800137c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800137e:	b10b      	cbz	r3, 8001384 <__sflush_r+0x48>
 8001380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001382:	1ac0      	subs	r0, r0, r3
 8001384:	2300      	movs	r3, #0
 8001386:	4602      	mov	r2, r0
 8001388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800138a:	6a21      	ldr	r1, [r4, #32]
 800138c:	4628      	mov	r0, r5
 800138e:	47b0      	blx	r6
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	d106      	bne.n	80013a4 <__sflush_r+0x68>
 8001396:	6829      	ldr	r1, [r5, #0]
 8001398:	291d      	cmp	r1, #29
 800139a:	d848      	bhi.n	800142e <__sflush_r+0xf2>
 800139c:	4a29      	ldr	r2, [pc, #164]	; (8001444 <__sflush_r+0x108>)
 800139e:	40ca      	lsrs	r2, r1
 80013a0:	07d6      	lsls	r6, r2, #31
 80013a2:	d544      	bpl.n	800142e <__sflush_r+0xf2>
 80013a4:	2200      	movs	r2, #0
 80013a6:	6062      	str	r2, [r4, #4]
 80013a8:	04d9      	lsls	r1, r3, #19
 80013aa:	6922      	ldr	r2, [r4, #16]
 80013ac:	6022      	str	r2, [r4, #0]
 80013ae:	d504      	bpl.n	80013ba <__sflush_r+0x7e>
 80013b0:	1c42      	adds	r2, r0, #1
 80013b2:	d101      	bne.n	80013b8 <__sflush_r+0x7c>
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	b903      	cbnz	r3, 80013ba <__sflush_r+0x7e>
 80013b8:	6560      	str	r0, [r4, #84]	; 0x54
 80013ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013bc:	602f      	str	r7, [r5, #0]
 80013be:	2900      	cmp	r1, #0
 80013c0:	d0c9      	beq.n	8001356 <__sflush_r+0x1a>
 80013c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013c6:	4299      	cmp	r1, r3
 80013c8:	d002      	beq.n	80013d0 <__sflush_r+0x94>
 80013ca:	4628      	mov	r0, r5
 80013cc:	f000 f994 	bl	80016f8 <_free_r>
 80013d0:	2000      	movs	r0, #0
 80013d2:	6360      	str	r0, [r4, #52]	; 0x34
 80013d4:	e7c0      	b.n	8001358 <__sflush_r+0x1c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	4628      	mov	r0, r5
 80013da:	47b0      	blx	r6
 80013dc:	1c41      	adds	r1, r0, #1
 80013de:	d1c8      	bne.n	8001372 <__sflush_r+0x36>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0c5      	beq.n	8001372 <__sflush_r+0x36>
 80013e6:	2b1d      	cmp	r3, #29
 80013e8:	d001      	beq.n	80013ee <__sflush_r+0xb2>
 80013ea:	2b16      	cmp	r3, #22
 80013ec:	d101      	bne.n	80013f2 <__sflush_r+0xb6>
 80013ee:	602f      	str	r7, [r5, #0]
 80013f0:	e7b1      	b.n	8001356 <__sflush_r+0x1a>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f8:	81a3      	strh	r3, [r4, #12]
 80013fa:	e7ad      	b.n	8001358 <__sflush_r+0x1c>
 80013fc:	690f      	ldr	r7, [r1, #16]
 80013fe:	2f00      	cmp	r7, #0
 8001400:	d0a9      	beq.n	8001356 <__sflush_r+0x1a>
 8001402:	0793      	lsls	r3, r2, #30
 8001404:	680e      	ldr	r6, [r1, #0]
 8001406:	bf08      	it	eq
 8001408:	694b      	ldreq	r3, [r1, #20]
 800140a:	600f      	str	r7, [r1, #0]
 800140c:	bf18      	it	ne
 800140e:	2300      	movne	r3, #0
 8001410:	eba6 0807 	sub.w	r8, r6, r7
 8001414:	608b      	str	r3, [r1, #8]
 8001416:	f1b8 0f00 	cmp.w	r8, #0
 800141a:	dd9c      	ble.n	8001356 <__sflush_r+0x1a>
 800141c:	4643      	mov	r3, r8
 800141e:	463a      	mov	r2, r7
 8001420:	6a21      	ldr	r1, [r4, #32]
 8001422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001424:	4628      	mov	r0, r5
 8001426:	47b0      	blx	r6
 8001428:	2800      	cmp	r0, #0
 800142a:	dc06      	bgt.n	800143a <__sflush_r+0xfe>
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001432:	81a3      	strh	r3, [r4, #12]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001438:	e78e      	b.n	8001358 <__sflush_r+0x1c>
 800143a:	4407      	add	r7, r0
 800143c:	eba8 0800 	sub.w	r8, r8, r0
 8001440:	e7e9      	b.n	8001416 <__sflush_r+0xda>
 8001442:	bf00      	nop
 8001444:	20400001 	.word	0x20400001

08001448 <_fflush_r>:
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	690b      	ldr	r3, [r1, #16]
 800144c:	4605      	mov	r5, r0
 800144e:	460c      	mov	r4, r1
 8001450:	b1db      	cbz	r3, 800148a <_fflush_r+0x42>
 8001452:	b118      	cbz	r0, 800145c <_fflush_r+0x14>
 8001454:	6983      	ldr	r3, [r0, #24]
 8001456:	b90b      	cbnz	r3, 800145c <_fflush_r+0x14>
 8001458:	f000 f860 	bl	800151c <__sinit>
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <_fflush_r+0x48>)
 800145e:	429c      	cmp	r4, r3
 8001460:	d109      	bne.n	8001476 <_fflush_r+0x2e>
 8001462:	686c      	ldr	r4, [r5, #4]
 8001464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001468:	b17b      	cbz	r3, 800148a <_fflush_r+0x42>
 800146a:	4621      	mov	r1, r4
 800146c:	4628      	mov	r0, r5
 800146e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001472:	f7ff bf63 	b.w	800133c <__sflush_r>
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_fflush_r+0x4c>)
 8001478:	429c      	cmp	r4, r3
 800147a:	d101      	bne.n	8001480 <_fflush_r+0x38>
 800147c:	68ac      	ldr	r4, [r5, #8]
 800147e:	e7f1      	b.n	8001464 <_fflush_r+0x1c>
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <_fflush_r+0x50>)
 8001482:	429c      	cmp	r4, r3
 8001484:	bf08      	it	eq
 8001486:	68ec      	ldreq	r4, [r5, #12]
 8001488:	e7ec      	b.n	8001464 <_fflush_r+0x1c>
 800148a:	2000      	movs	r0, #0
 800148c:	bd38      	pop	{r3, r4, r5, pc}
 800148e:	bf00      	nop
 8001490:	0800266c 	.word	0x0800266c
 8001494:	0800268c 	.word	0x0800268c
 8001498:	0800264c 	.word	0x0800264c

0800149c <std>:
 800149c:	2300      	movs	r3, #0
 800149e:	b510      	push	{r4, lr}
 80014a0:	4604      	mov	r4, r0
 80014a2:	e9c0 3300 	strd	r3, r3, [r0]
 80014a6:	6083      	str	r3, [r0, #8]
 80014a8:	8181      	strh	r1, [r0, #12]
 80014aa:	6643      	str	r3, [r0, #100]	; 0x64
 80014ac:	81c2      	strh	r2, [r0, #14]
 80014ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014b2:	6183      	str	r3, [r0, #24]
 80014b4:	4619      	mov	r1, r3
 80014b6:	2208      	movs	r2, #8
 80014b8:	305c      	adds	r0, #92	; 0x5c
 80014ba:	f7ff fdfb 	bl	80010b4 <memset>
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <std+0x38>)
 80014c0:	6263      	str	r3, [r4, #36]	; 0x24
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <std+0x3c>)
 80014c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <std+0x40>)
 80014c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <std+0x44>)
 80014cc:	6224      	str	r4, [r4, #32]
 80014ce:	6323      	str	r3, [r4, #48]	; 0x30
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	08001df5 	.word	0x08001df5
 80014d8:	08001e17 	.word	0x08001e17
 80014dc:	08001e4f 	.word	0x08001e4f
 80014e0:	08001e73 	.word	0x08001e73

080014e4 <_cleanup_r>:
 80014e4:	4901      	ldr	r1, [pc, #4]	; (80014ec <_cleanup_r+0x8>)
 80014e6:	f000 b885 	b.w	80015f4 <_fwalk_reent>
 80014ea:	bf00      	nop
 80014ec:	08001449 	.word	0x08001449

080014f0 <__sfmoreglue>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	1e4a      	subs	r2, r1, #1
 80014f4:	2568      	movs	r5, #104	; 0x68
 80014f6:	4355      	muls	r5, r2
 80014f8:	460e      	mov	r6, r1
 80014fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014fe:	f000 f949 	bl	8001794 <_malloc_r>
 8001502:	4604      	mov	r4, r0
 8001504:	b140      	cbz	r0, 8001518 <__sfmoreglue+0x28>
 8001506:	2100      	movs	r1, #0
 8001508:	e9c0 1600 	strd	r1, r6, [r0]
 800150c:	300c      	adds	r0, #12
 800150e:	60a0      	str	r0, [r4, #8]
 8001510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001514:	f7ff fdce 	bl	80010b4 <memset>
 8001518:	4620      	mov	r0, r4
 800151a:	bd70      	pop	{r4, r5, r6, pc}

0800151c <__sinit>:
 800151c:	6983      	ldr	r3, [r0, #24]
 800151e:	b510      	push	{r4, lr}
 8001520:	4604      	mov	r4, r0
 8001522:	bb33      	cbnz	r3, 8001572 <__sinit+0x56>
 8001524:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001528:	6503      	str	r3, [r0, #80]	; 0x50
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <__sinit+0x58>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <__sinit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6282      	str	r2, [r0, #40]	; 0x28
 8001532:	4298      	cmp	r0, r3
 8001534:	bf04      	itt	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	6183      	streq	r3, [r0, #24]
 800153a:	f000 f81f 	bl	800157c <__sfp>
 800153e:	6060      	str	r0, [r4, #4]
 8001540:	4620      	mov	r0, r4
 8001542:	f000 f81b 	bl	800157c <__sfp>
 8001546:	60a0      	str	r0, [r4, #8]
 8001548:	4620      	mov	r0, r4
 800154a:	f000 f817 	bl	800157c <__sfp>
 800154e:	2200      	movs	r2, #0
 8001550:	60e0      	str	r0, [r4, #12]
 8001552:	2104      	movs	r1, #4
 8001554:	6860      	ldr	r0, [r4, #4]
 8001556:	f7ff ffa1 	bl	800149c <std>
 800155a:	2201      	movs	r2, #1
 800155c:	2109      	movs	r1, #9
 800155e:	68a0      	ldr	r0, [r4, #8]
 8001560:	f7ff ff9c 	bl	800149c <std>
 8001564:	2202      	movs	r2, #2
 8001566:	2112      	movs	r1, #18
 8001568:	68e0      	ldr	r0, [r4, #12]
 800156a:	f7ff ff97 	bl	800149c <std>
 800156e:	2301      	movs	r3, #1
 8001570:	61a3      	str	r3, [r4, #24]
 8001572:	bd10      	pop	{r4, pc}
 8001574:	08002648 	.word	0x08002648
 8001578:	080014e5 	.word	0x080014e5

0800157c <__sfp>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <__sfp+0x70>)
 8001580:	681e      	ldr	r6, [r3, #0]
 8001582:	69b3      	ldr	r3, [r6, #24]
 8001584:	4607      	mov	r7, r0
 8001586:	b913      	cbnz	r3, 800158e <__sfp+0x12>
 8001588:	4630      	mov	r0, r6
 800158a:	f7ff ffc7 	bl	800151c <__sinit>
 800158e:	3648      	adds	r6, #72	; 0x48
 8001590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001594:	3b01      	subs	r3, #1
 8001596:	d503      	bpl.n	80015a0 <__sfp+0x24>
 8001598:	6833      	ldr	r3, [r6, #0]
 800159a:	b133      	cbz	r3, 80015aa <__sfp+0x2e>
 800159c:	6836      	ldr	r6, [r6, #0]
 800159e:	e7f7      	b.n	8001590 <__sfp+0x14>
 80015a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015a4:	b16d      	cbz	r5, 80015c2 <__sfp+0x46>
 80015a6:	3468      	adds	r4, #104	; 0x68
 80015a8:	e7f4      	b.n	8001594 <__sfp+0x18>
 80015aa:	2104      	movs	r1, #4
 80015ac:	4638      	mov	r0, r7
 80015ae:	f7ff ff9f 	bl	80014f0 <__sfmoreglue>
 80015b2:	6030      	str	r0, [r6, #0]
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d1f1      	bne.n	800159c <__sfp+0x20>
 80015b8:	230c      	movs	r3, #12
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4604      	mov	r4, r0
 80015be:	4620      	mov	r0, r4
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <__sfp+0x74>)
 80015c4:	6665      	str	r5, [r4, #100]	; 0x64
 80015c6:	e9c4 5500 	strd	r5, r5, [r4]
 80015ca:	60a5      	str	r5, [r4, #8]
 80015cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80015d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4629      	mov	r1, r5
 80015d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015dc:	f7ff fd6a 	bl	80010b4 <memset>
 80015e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015e8:	e7e9      	b.n	80015be <__sfp+0x42>
 80015ea:	bf00      	nop
 80015ec:	08002648 	.word	0x08002648
 80015f0:	ffff0001 	.word	0xffff0001

080015f4 <_fwalk_reent>:
 80015f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015f8:	4680      	mov	r8, r0
 80015fa:	4689      	mov	r9, r1
 80015fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001600:	2600      	movs	r6, #0
 8001602:	b914      	cbnz	r4, 800160a <_fwalk_reent+0x16>
 8001604:	4630      	mov	r0, r6
 8001606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800160a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800160e:	3f01      	subs	r7, #1
 8001610:	d501      	bpl.n	8001616 <_fwalk_reent+0x22>
 8001612:	6824      	ldr	r4, [r4, #0]
 8001614:	e7f5      	b.n	8001602 <_fwalk_reent+0xe>
 8001616:	89ab      	ldrh	r3, [r5, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d907      	bls.n	800162c <_fwalk_reent+0x38>
 800161c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001620:	3301      	adds	r3, #1
 8001622:	d003      	beq.n	800162c <_fwalk_reent+0x38>
 8001624:	4629      	mov	r1, r5
 8001626:	4640      	mov	r0, r8
 8001628:	47c8      	blx	r9
 800162a:	4306      	orrs	r6, r0
 800162c:	3568      	adds	r5, #104	; 0x68
 800162e:	e7ee      	b.n	800160e <_fwalk_reent+0x1a>

08001630 <__swhatbuf_r>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	460e      	mov	r6, r1
 8001634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001638:	2900      	cmp	r1, #0
 800163a:	b096      	sub	sp, #88	; 0x58
 800163c:	4614      	mov	r4, r2
 800163e:	461d      	mov	r5, r3
 8001640:	da07      	bge.n	8001652 <__swhatbuf_r+0x22>
 8001642:	2300      	movs	r3, #0
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	89b3      	ldrh	r3, [r6, #12]
 8001648:	061a      	lsls	r2, r3, #24
 800164a:	d410      	bmi.n	800166e <__swhatbuf_r+0x3e>
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	e00e      	b.n	8001670 <__swhatbuf_r+0x40>
 8001652:	466a      	mov	r2, sp
 8001654:	f000 fc34 	bl	8001ec0 <_fstat_r>
 8001658:	2800      	cmp	r0, #0
 800165a:	dbf2      	blt.n	8001642 <__swhatbuf_r+0x12>
 800165c:	9a01      	ldr	r2, [sp, #4]
 800165e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001666:	425a      	negs	r2, r3
 8001668:	415a      	adcs	r2, r3
 800166a:	602a      	str	r2, [r5, #0]
 800166c:	e7ee      	b.n	800164c <__swhatbuf_r+0x1c>
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	2000      	movs	r0, #0
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	b016      	add	sp, #88	; 0x58
 8001676:	bd70      	pop	{r4, r5, r6, pc}

08001678 <__smakebuf_r>:
 8001678:	898b      	ldrh	r3, [r1, #12]
 800167a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800167c:	079d      	lsls	r5, r3, #30
 800167e:	4606      	mov	r6, r0
 8001680:	460c      	mov	r4, r1
 8001682:	d507      	bpl.n	8001694 <__smakebuf_r+0x1c>
 8001684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001688:	6023      	str	r3, [r4, #0]
 800168a:	6123      	str	r3, [r4, #16]
 800168c:	2301      	movs	r3, #1
 800168e:	6163      	str	r3, [r4, #20]
 8001690:	b002      	add	sp, #8
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	ab01      	add	r3, sp, #4
 8001696:	466a      	mov	r2, sp
 8001698:	f7ff ffca 	bl	8001630 <__swhatbuf_r>
 800169c:	9900      	ldr	r1, [sp, #0]
 800169e:	4605      	mov	r5, r0
 80016a0:	4630      	mov	r0, r6
 80016a2:	f000 f877 	bl	8001794 <_malloc_r>
 80016a6:	b948      	cbnz	r0, 80016bc <__smakebuf_r+0x44>
 80016a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ac:	059a      	lsls	r2, r3, #22
 80016ae:	d4ef      	bmi.n	8001690 <__smakebuf_r+0x18>
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	81a3      	strh	r3, [r4, #12]
 80016ba:	e7e3      	b.n	8001684 <__smakebuf_r+0xc>
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <__smakebuf_r+0x7c>)
 80016be:	62b3      	str	r3, [r6, #40]	; 0x28
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	6020      	str	r0, [r4, #0]
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	81a3      	strh	r3, [r4, #12]
 80016ca:	9b00      	ldr	r3, [sp, #0]
 80016cc:	6163      	str	r3, [r4, #20]
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	6120      	str	r0, [r4, #16]
 80016d2:	b15b      	cbz	r3, 80016ec <__smakebuf_r+0x74>
 80016d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d8:	4630      	mov	r0, r6
 80016da:	f000 fc03 	bl	8001ee4 <_isatty_r>
 80016de:	b128      	cbz	r0, 80016ec <__smakebuf_r+0x74>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	431d      	orrs	r5, r3
 80016f0:	81a5      	strh	r5, [r4, #12]
 80016f2:	e7cd      	b.n	8001690 <__smakebuf_r+0x18>
 80016f4:	080014e5 	.word	0x080014e5

080016f8 <_free_r>:
 80016f8:	b538      	push	{r3, r4, r5, lr}
 80016fa:	4605      	mov	r5, r0
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d045      	beq.n	800178c <_free_r+0x94>
 8001700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001704:	1f0c      	subs	r4, r1, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	bfb8      	it	lt
 800170a:	18e4      	addlt	r4, r4, r3
 800170c:	f000 fc0c 	bl	8001f28 <__malloc_lock>
 8001710:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <_free_r+0x98>)
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	4610      	mov	r0, r2
 8001716:	b933      	cbnz	r3, 8001726 <_free_r+0x2e>
 8001718:	6063      	str	r3, [r4, #4]
 800171a:	6014      	str	r4, [r2, #0]
 800171c:	4628      	mov	r0, r5
 800171e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001722:	f000 bc02 	b.w	8001f2a <__malloc_unlock>
 8001726:	42a3      	cmp	r3, r4
 8001728:	d90c      	bls.n	8001744 <_free_r+0x4c>
 800172a:	6821      	ldr	r1, [r4, #0]
 800172c:	1862      	adds	r2, r4, r1
 800172e:	4293      	cmp	r3, r2
 8001730:	bf04      	itt	eq
 8001732:	681a      	ldreq	r2, [r3, #0]
 8001734:	685b      	ldreq	r3, [r3, #4]
 8001736:	6063      	str	r3, [r4, #4]
 8001738:	bf04      	itt	eq
 800173a:	1852      	addeq	r2, r2, r1
 800173c:	6022      	streq	r2, [r4, #0]
 800173e:	6004      	str	r4, [r0, #0]
 8001740:	e7ec      	b.n	800171c <_free_r+0x24>
 8001742:	4613      	mov	r3, r2
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	b10a      	cbz	r2, 800174c <_free_r+0x54>
 8001748:	42a2      	cmp	r2, r4
 800174a:	d9fa      	bls.n	8001742 <_free_r+0x4a>
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	1858      	adds	r0, r3, r1
 8001750:	42a0      	cmp	r0, r4
 8001752:	d10b      	bne.n	800176c <_free_r+0x74>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	4401      	add	r1, r0
 8001758:	1858      	adds	r0, r3, r1
 800175a:	4282      	cmp	r2, r0
 800175c:	6019      	str	r1, [r3, #0]
 800175e:	d1dd      	bne.n	800171c <_free_r+0x24>
 8001760:	6810      	ldr	r0, [r2, #0]
 8001762:	6852      	ldr	r2, [r2, #4]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	4401      	add	r1, r0
 8001768:	6019      	str	r1, [r3, #0]
 800176a:	e7d7      	b.n	800171c <_free_r+0x24>
 800176c:	d902      	bls.n	8001774 <_free_r+0x7c>
 800176e:	230c      	movs	r3, #12
 8001770:	602b      	str	r3, [r5, #0]
 8001772:	e7d3      	b.n	800171c <_free_r+0x24>
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	1821      	adds	r1, r4, r0
 8001778:	428a      	cmp	r2, r1
 800177a:	bf04      	itt	eq
 800177c:	6811      	ldreq	r1, [r2, #0]
 800177e:	6852      	ldreq	r2, [r2, #4]
 8001780:	6062      	str	r2, [r4, #4]
 8001782:	bf04      	itt	eq
 8001784:	1809      	addeq	r1, r1, r0
 8001786:	6021      	streq	r1, [r4, #0]
 8001788:	605c      	str	r4, [r3, #4]
 800178a:	e7c7      	b.n	800171c <_free_r+0x24>
 800178c:	bd38      	pop	{r3, r4, r5, pc}
 800178e:	bf00      	nop
 8001790:	2000008c 	.word	0x2000008c

08001794 <_malloc_r>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	1ccd      	adds	r5, r1, #3
 8001798:	f025 0503 	bic.w	r5, r5, #3
 800179c:	3508      	adds	r5, #8
 800179e:	2d0c      	cmp	r5, #12
 80017a0:	bf38      	it	cc
 80017a2:	250c      	movcc	r5, #12
 80017a4:	2d00      	cmp	r5, #0
 80017a6:	4606      	mov	r6, r0
 80017a8:	db01      	blt.n	80017ae <_malloc_r+0x1a>
 80017aa:	42a9      	cmp	r1, r5
 80017ac:	d903      	bls.n	80017b6 <_malloc_r+0x22>
 80017ae:	230c      	movs	r3, #12
 80017b0:	6033      	str	r3, [r6, #0]
 80017b2:	2000      	movs	r0, #0
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
 80017b6:	f000 fbb7 	bl	8001f28 <__malloc_lock>
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <_malloc_r+0xac>)
 80017bc:	6814      	ldr	r4, [r2, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	b991      	cbnz	r1, 80017e8 <_malloc_r+0x54>
 80017c2:	4c20      	ldr	r4, [pc, #128]	; (8001844 <_malloc_r+0xb0>)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	b91b      	cbnz	r3, 80017d0 <_malloc_r+0x3c>
 80017c8:	4630      	mov	r0, r6
 80017ca:	f000 fb03 	bl	8001dd4 <_sbrk_r>
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	4629      	mov	r1, r5
 80017d2:	4630      	mov	r0, r6
 80017d4:	f000 fafe 	bl	8001dd4 <_sbrk_r>
 80017d8:	1c43      	adds	r3, r0, #1
 80017da:	d124      	bne.n	8001826 <_malloc_r+0x92>
 80017dc:	230c      	movs	r3, #12
 80017de:	6033      	str	r3, [r6, #0]
 80017e0:	4630      	mov	r0, r6
 80017e2:	f000 fba2 	bl	8001f2a <__malloc_unlock>
 80017e6:	e7e4      	b.n	80017b2 <_malloc_r+0x1e>
 80017e8:	680b      	ldr	r3, [r1, #0]
 80017ea:	1b5b      	subs	r3, r3, r5
 80017ec:	d418      	bmi.n	8001820 <_malloc_r+0x8c>
 80017ee:	2b0b      	cmp	r3, #11
 80017f0:	d90f      	bls.n	8001812 <_malloc_r+0x7e>
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	50cd      	str	r5, [r1, r3]
 80017f6:	18cc      	adds	r4, r1, r3
 80017f8:	4630      	mov	r0, r6
 80017fa:	f000 fb96 	bl	8001f2a <__malloc_unlock>
 80017fe:	f104 000b 	add.w	r0, r4, #11
 8001802:	1d23      	adds	r3, r4, #4
 8001804:	f020 0007 	bic.w	r0, r0, #7
 8001808:	1ac3      	subs	r3, r0, r3
 800180a:	d0d3      	beq.n	80017b4 <_malloc_r+0x20>
 800180c:	425a      	negs	r2, r3
 800180e:	50e2      	str	r2, [r4, r3]
 8001810:	e7d0      	b.n	80017b4 <_malloc_r+0x20>
 8001812:	428c      	cmp	r4, r1
 8001814:	684b      	ldr	r3, [r1, #4]
 8001816:	bf16      	itet	ne
 8001818:	6063      	strne	r3, [r4, #4]
 800181a:	6013      	streq	r3, [r2, #0]
 800181c:	460c      	movne	r4, r1
 800181e:	e7eb      	b.n	80017f8 <_malloc_r+0x64>
 8001820:	460c      	mov	r4, r1
 8001822:	6849      	ldr	r1, [r1, #4]
 8001824:	e7cc      	b.n	80017c0 <_malloc_r+0x2c>
 8001826:	1cc4      	adds	r4, r0, #3
 8001828:	f024 0403 	bic.w	r4, r4, #3
 800182c:	42a0      	cmp	r0, r4
 800182e:	d005      	beq.n	800183c <_malloc_r+0xa8>
 8001830:	1a21      	subs	r1, r4, r0
 8001832:	4630      	mov	r0, r6
 8001834:	f000 face 	bl	8001dd4 <_sbrk_r>
 8001838:	3001      	adds	r0, #1
 800183a:	d0cf      	beq.n	80017dc <_malloc_r+0x48>
 800183c:	6025      	str	r5, [r4, #0]
 800183e:	e7db      	b.n	80017f8 <_malloc_r+0x64>
 8001840:	2000008c 	.word	0x2000008c
 8001844:	20000090 	.word	0x20000090

08001848 <__sfputc_r>:
 8001848:	6893      	ldr	r3, [r2, #8]
 800184a:	3b01      	subs	r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	b410      	push	{r4}
 8001850:	6093      	str	r3, [r2, #8]
 8001852:	da07      	bge.n	8001864 <__sfputc_r+0x1c>
 8001854:	6994      	ldr	r4, [r2, #24]
 8001856:	42a3      	cmp	r3, r4
 8001858:	db01      	blt.n	800185e <__sfputc_r+0x16>
 800185a:	290a      	cmp	r1, #10
 800185c:	d102      	bne.n	8001864 <__sfputc_r+0x1c>
 800185e:	bc10      	pop	{r4}
 8001860:	f7ff bcac 	b.w	80011bc <__swbuf_r>
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	1c58      	adds	r0, r3, #1
 8001868:	6010      	str	r0, [r2, #0]
 800186a:	7019      	strb	r1, [r3, #0]
 800186c:	4608      	mov	r0, r1
 800186e:	bc10      	pop	{r4}
 8001870:	4770      	bx	lr

08001872 <__sfputs_r>:
 8001872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001874:	4606      	mov	r6, r0
 8001876:	460f      	mov	r7, r1
 8001878:	4614      	mov	r4, r2
 800187a:	18d5      	adds	r5, r2, r3
 800187c:	42ac      	cmp	r4, r5
 800187e:	d101      	bne.n	8001884 <__sfputs_r+0x12>
 8001880:	2000      	movs	r0, #0
 8001882:	e007      	b.n	8001894 <__sfputs_r+0x22>
 8001884:	463a      	mov	r2, r7
 8001886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800188a:	4630      	mov	r0, r6
 800188c:	f7ff ffdc 	bl	8001848 <__sfputc_r>
 8001890:	1c43      	adds	r3, r0, #1
 8001892:	d1f3      	bne.n	800187c <__sfputs_r+0xa>
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001898 <_vfiprintf_r>:
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189c:	460c      	mov	r4, r1
 800189e:	b09d      	sub	sp, #116	; 0x74
 80018a0:	4617      	mov	r7, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	4606      	mov	r6, r0
 80018a6:	b118      	cbz	r0, 80018b0 <_vfiprintf_r+0x18>
 80018a8:	6983      	ldr	r3, [r0, #24]
 80018aa:	b90b      	cbnz	r3, 80018b0 <_vfiprintf_r+0x18>
 80018ac:	f7ff fe36 	bl	800151c <__sinit>
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <_vfiprintf_r+0x20c>)
 80018b2:	429c      	cmp	r4, r3
 80018b4:	d158      	bne.n	8001968 <_vfiprintf_r+0xd0>
 80018b6:	6874      	ldr	r4, [r6, #4]
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	0718      	lsls	r0, r3, #28
 80018bc:	d55e      	bpl.n	800197c <_vfiprintf_r+0xe4>
 80018be:	6923      	ldr	r3, [r4, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d05b      	beq.n	800197c <_vfiprintf_r+0xe4>
 80018c4:	2300      	movs	r3, #0
 80018c6:	9309      	str	r3, [sp, #36]	; 0x24
 80018c8:	2320      	movs	r3, #32
 80018ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018ce:	2330      	movs	r3, #48	; 0x30
 80018d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018d4:	9503      	str	r5, [sp, #12]
 80018d6:	f04f 0b01 	mov.w	fp, #1
 80018da:	46b8      	mov	r8, r7
 80018dc:	4645      	mov	r5, r8
 80018de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80018e2:	b10b      	cbz	r3, 80018e8 <_vfiprintf_r+0x50>
 80018e4:	2b25      	cmp	r3, #37	; 0x25
 80018e6:	d154      	bne.n	8001992 <_vfiprintf_r+0xfa>
 80018e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80018ec:	d00b      	beq.n	8001906 <_vfiprintf_r+0x6e>
 80018ee:	4653      	mov	r3, sl
 80018f0:	463a      	mov	r2, r7
 80018f2:	4621      	mov	r1, r4
 80018f4:	4630      	mov	r0, r6
 80018f6:	f7ff ffbc 	bl	8001872 <__sfputs_r>
 80018fa:	3001      	adds	r0, #1
 80018fc:	f000 80c2 	beq.w	8001a84 <_vfiprintf_r+0x1ec>
 8001900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001902:	4453      	add	r3, sl
 8001904:	9309      	str	r3, [sp, #36]	; 0x24
 8001906:	f898 3000 	ldrb.w	r3, [r8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80ba 	beq.w	8001a84 <_vfiprintf_r+0x1ec>
 8001910:	2300      	movs	r3, #0
 8001912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800191a:	9304      	str	r3, [sp, #16]
 800191c:	9307      	str	r3, [sp, #28]
 800191e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001922:	931a      	str	r3, [sp, #104]	; 0x68
 8001924:	46a8      	mov	r8, r5
 8001926:	2205      	movs	r2, #5
 8001928:	f818 1b01 	ldrb.w	r1, [r8], #1
 800192c:	485e      	ldr	r0, [pc, #376]	; (8001aa8 <_vfiprintf_r+0x210>)
 800192e:	f7fe fc67 	bl	8000200 <memchr>
 8001932:	9b04      	ldr	r3, [sp, #16]
 8001934:	bb78      	cbnz	r0, 8001996 <_vfiprintf_r+0xfe>
 8001936:	06d9      	lsls	r1, r3, #27
 8001938:	bf44      	itt	mi
 800193a:	2220      	movmi	r2, #32
 800193c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001940:	071a      	lsls	r2, r3, #28
 8001942:	bf44      	itt	mi
 8001944:	222b      	movmi	r2, #43	; 0x2b
 8001946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800194a:	782a      	ldrb	r2, [r5, #0]
 800194c:	2a2a      	cmp	r2, #42	; 0x2a
 800194e:	d02a      	beq.n	80019a6 <_vfiprintf_r+0x10e>
 8001950:	9a07      	ldr	r2, [sp, #28]
 8001952:	46a8      	mov	r8, r5
 8001954:	2000      	movs	r0, #0
 8001956:	250a      	movs	r5, #10
 8001958:	4641      	mov	r1, r8
 800195a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800195e:	3b30      	subs	r3, #48	; 0x30
 8001960:	2b09      	cmp	r3, #9
 8001962:	d969      	bls.n	8001a38 <_vfiprintf_r+0x1a0>
 8001964:	b360      	cbz	r0, 80019c0 <_vfiprintf_r+0x128>
 8001966:	e024      	b.n	80019b2 <_vfiprintf_r+0x11a>
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <_vfiprintf_r+0x214>)
 800196a:	429c      	cmp	r4, r3
 800196c:	d101      	bne.n	8001972 <_vfiprintf_r+0xda>
 800196e:	68b4      	ldr	r4, [r6, #8]
 8001970:	e7a2      	b.n	80018b8 <_vfiprintf_r+0x20>
 8001972:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <_vfiprintf_r+0x218>)
 8001974:	429c      	cmp	r4, r3
 8001976:	bf08      	it	eq
 8001978:	68f4      	ldreq	r4, [r6, #12]
 800197a:	e79d      	b.n	80018b8 <_vfiprintf_r+0x20>
 800197c:	4621      	mov	r1, r4
 800197e:	4630      	mov	r0, r6
 8001980:	f7ff fc6e 	bl	8001260 <__swsetup_r>
 8001984:	2800      	cmp	r0, #0
 8001986:	d09d      	beq.n	80018c4 <_vfiprintf_r+0x2c>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	b01d      	add	sp, #116	; 0x74
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001992:	46a8      	mov	r8, r5
 8001994:	e7a2      	b.n	80018dc <_vfiprintf_r+0x44>
 8001996:	4a44      	ldr	r2, [pc, #272]	; (8001aa8 <_vfiprintf_r+0x210>)
 8001998:	1a80      	subs	r0, r0, r2
 800199a:	fa0b f000 	lsl.w	r0, fp, r0
 800199e:	4318      	orrs	r0, r3
 80019a0:	9004      	str	r0, [sp, #16]
 80019a2:	4645      	mov	r5, r8
 80019a4:	e7be      	b.n	8001924 <_vfiprintf_r+0x8c>
 80019a6:	9a03      	ldr	r2, [sp, #12]
 80019a8:	1d11      	adds	r1, r2, #4
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	9103      	str	r1, [sp, #12]
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	db01      	blt.n	80019b6 <_vfiprintf_r+0x11e>
 80019b2:	9207      	str	r2, [sp, #28]
 80019b4:	e004      	b.n	80019c0 <_vfiprintf_r+0x128>
 80019b6:	4252      	negs	r2, r2
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	9207      	str	r2, [sp, #28]
 80019be:	9304      	str	r3, [sp, #16]
 80019c0:	f898 3000 	ldrb.w	r3, [r8]
 80019c4:	2b2e      	cmp	r3, #46	; 0x2e
 80019c6:	d10e      	bne.n	80019e6 <_vfiprintf_r+0x14e>
 80019c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80019cc:	2b2a      	cmp	r3, #42	; 0x2a
 80019ce:	d138      	bne.n	8001a42 <_vfiprintf_r+0x1aa>
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	9203      	str	r2, [sp, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80019e0:	f108 0802 	add.w	r8, r8, #2
 80019e4:	9305      	str	r3, [sp, #20]
 80019e6:	4d33      	ldr	r5, [pc, #204]	; (8001ab4 <_vfiprintf_r+0x21c>)
 80019e8:	f898 1000 	ldrb.w	r1, [r8]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7fe fc06 	bl	8000200 <memchr>
 80019f4:	b140      	cbz	r0, 8001a08 <_vfiprintf_r+0x170>
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	1b40      	subs	r0, r0, r5
 80019fa:	fa03 f000 	lsl.w	r0, r3, r0
 80019fe:	9b04      	ldr	r3, [sp, #16]
 8001a00:	4303      	orrs	r3, r0
 8001a02:	f108 0801 	add.w	r8, r8, #1
 8001a06:	9304      	str	r3, [sp, #16]
 8001a08:	f898 1000 	ldrb.w	r1, [r8]
 8001a0c:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <_vfiprintf_r+0x220>)
 8001a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a12:	2206      	movs	r2, #6
 8001a14:	f108 0701 	add.w	r7, r8, #1
 8001a18:	f7fe fbf2 	bl	8000200 <memchr>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d037      	beq.n	8001a90 <_vfiprintf_r+0x1f8>
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <_vfiprintf_r+0x224>)
 8001a22:	bb1b      	cbnz	r3, 8001a6c <_vfiprintf_r+0x1d4>
 8001a24:	9b03      	ldr	r3, [sp, #12]
 8001a26:	3307      	adds	r3, #7
 8001a28:	f023 0307 	bic.w	r3, r3, #7
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a32:	444b      	add	r3, r9
 8001a34:	9309      	str	r3, [sp, #36]	; 0x24
 8001a36:	e750      	b.n	80018da <_vfiprintf_r+0x42>
 8001a38:	fb05 3202 	mla	r2, r5, r2, r3
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	4688      	mov	r8, r1
 8001a40:	e78a      	b.n	8001958 <_vfiprintf_r+0xc0>
 8001a42:	2300      	movs	r3, #0
 8001a44:	f108 0801 	add.w	r8, r8, #1
 8001a48:	9305      	str	r3, [sp, #20]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	250a      	movs	r5, #10
 8001a4e:	4640      	mov	r0, r8
 8001a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a54:	3a30      	subs	r2, #48	; 0x30
 8001a56:	2a09      	cmp	r2, #9
 8001a58:	d903      	bls.n	8001a62 <_vfiprintf_r+0x1ca>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0c3      	beq.n	80019e6 <_vfiprintf_r+0x14e>
 8001a5e:	9105      	str	r1, [sp, #20]
 8001a60:	e7c1      	b.n	80019e6 <_vfiprintf_r+0x14e>
 8001a62:	fb05 2101 	mla	r1, r5, r1, r2
 8001a66:	2301      	movs	r3, #1
 8001a68:	4680      	mov	r8, r0
 8001a6a:	e7f0      	b.n	8001a4e <_vfiprintf_r+0x1b6>
 8001a6c:	ab03      	add	r3, sp, #12
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4622      	mov	r2, r4
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_vfiprintf_r+0x228>)
 8001a74:	a904      	add	r1, sp, #16
 8001a76:	4630      	mov	r0, r6
 8001a78:	f3af 8000 	nop.w
 8001a7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a80:	4681      	mov	r9, r0
 8001a82:	d1d5      	bne.n	8001a30 <_vfiprintf_r+0x198>
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	065b      	lsls	r3, r3, #25
 8001a88:	f53f af7e 	bmi.w	8001988 <_vfiprintf_r+0xf0>
 8001a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a8e:	e77d      	b.n	800198c <_vfiprintf_r+0xf4>
 8001a90:	ab03      	add	r3, sp, #12
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4622      	mov	r2, r4
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <_vfiprintf_r+0x228>)
 8001a98:	a904      	add	r1, sp, #16
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 f888 	bl	8001bb0 <_printf_i>
 8001aa0:	e7ec      	b.n	8001a7c <_vfiprintf_r+0x1e4>
 8001aa2:	bf00      	nop
 8001aa4:	0800266c 	.word	0x0800266c
 8001aa8:	080026ac 	.word	0x080026ac
 8001aac:	0800268c 	.word	0x0800268c
 8001ab0:	0800264c 	.word	0x0800264c
 8001ab4:	080026b2 	.word	0x080026b2
 8001ab8:	080026b6 	.word	0x080026b6
 8001abc:	00000000 	.word	0x00000000
 8001ac0:	08001873 	.word	0x08001873

08001ac4 <_printf_common>:
 8001ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac8:	4691      	mov	r9, r2
 8001aca:	461f      	mov	r7, r3
 8001acc:	688a      	ldr	r2, [r1, #8]
 8001ace:	690b      	ldr	r3, [r1, #16]
 8001ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	bfb8      	it	lt
 8001ad8:	4613      	movlt	r3, r2
 8001ada:	f8c9 3000 	str.w	r3, [r9]
 8001ade:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ae2:	4606      	mov	r6, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	b112      	cbz	r2, 8001aee <_printf_common+0x2a>
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c9 3000 	str.w	r3, [r9]
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	0699      	lsls	r1, r3, #26
 8001af2:	bf42      	ittt	mi
 8001af4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001af8:	3302      	addmi	r3, #2
 8001afa:	f8c9 3000 	strmi.w	r3, [r9]
 8001afe:	6825      	ldr	r5, [r4, #0]
 8001b00:	f015 0506 	ands.w	r5, r5, #6
 8001b04:	d107      	bne.n	8001b16 <_printf_common+0x52>
 8001b06:	f104 0a19 	add.w	sl, r4, #25
 8001b0a:	68e3      	ldr	r3, [r4, #12]
 8001b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	42ab      	cmp	r3, r5
 8001b14:	dc28      	bgt.n	8001b68 <_printf_common+0xa4>
 8001b16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	3300      	adds	r3, #0
 8001b1e:	bf18      	it	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	0692      	lsls	r2, r2, #26
 8001b24:	d42d      	bmi.n	8001b82 <_printf_common+0xbe>
 8001b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b2a:	4639      	mov	r1, r7
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	47c0      	blx	r8
 8001b30:	3001      	adds	r0, #1
 8001b32:	d020      	beq.n	8001b76 <_printf_common+0xb2>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	68e5      	ldr	r5, [r4, #12]
 8001b38:	f8d9 2000 	ldr.w	r2, [r9]
 8001b3c:	f003 0306 	and.w	r3, r3, #6
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	bf08      	it	eq
 8001b44:	1aad      	subeq	r5, r5, r2
 8001b46:	68a3      	ldr	r3, [r4, #8]
 8001b48:	6922      	ldr	r2, [r4, #16]
 8001b4a:	bf0c      	ite	eq
 8001b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b50:	2500      	movne	r5, #0
 8001b52:	4293      	cmp	r3, r2
 8001b54:	bfc4      	itt	gt
 8001b56:	1a9b      	subgt	r3, r3, r2
 8001b58:	18ed      	addgt	r5, r5, r3
 8001b5a:	f04f 0900 	mov.w	r9, #0
 8001b5e:	341a      	adds	r4, #26
 8001b60:	454d      	cmp	r5, r9
 8001b62:	d11a      	bne.n	8001b9a <_printf_common+0xd6>
 8001b64:	2000      	movs	r0, #0
 8001b66:	e008      	b.n	8001b7a <_printf_common+0xb6>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	4630      	mov	r0, r6
 8001b70:	47c0      	blx	r8
 8001b72:	3001      	adds	r0, #1
 8001b74:	d103      	bne.n	8001b7e <_printf_common+0xba>
 8001b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7c3      	b.n	8001b0a <_printf_common+0x46>
 8001b82:	18e1      	adds	r1, r4, r3
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	2030      	movs	r0, #48	; 0x30
 8001b88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b8c:	4422      	add	r2, r4
 8001b8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b96:	3302      	adds	r3, #2
 8001b98:	e7c5      	b.n	8001b26 <_printf_common+0x62>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	4639      	mov	r1, r7
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	47c0      	blx	r8
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	d0e6      	beq.n	8001b76 <_printf_common+0xb2>
 8001ba8:	f109 0901 	add.w	r9, r9, #1
 8001bac:	e7d8      	b.n	8001b60 <_printf_common+0x9c>
	...

08001bb0 <_printf_i>:
 8001bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bb8:	460c      	mov	r4, r1
 8001bba:	7e09      	ldrb	r1, [r1, #24]
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	296e      	cmp	r1, #110	; 0x6e
 8001bc0:	4617      	mov	r7, r2
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	4698      	mov	r8, r3
 8001bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bc8:	f000 80b3 	beq.w	8001d32 <_printf_i+0x182>
 8001bcc:	d822      	bhi.n	8001c14 <_printf_i+0x64>
 8001bce:	2963      	cmp	r1, #99	; 0x63
 8001bd0:	d036      	beq.n	8001c40 <_printf_i+0x90>
 8001bd2:	d80a      	bhi.n	8001bea <_printf_i+0x3a>
 8001bd4:	2900      	cmp	r1, #0
 8001bd6:	f000 80b9 	beq.w	8001d4c <_printf_i+0x19c>
 8001bda:	2958      	cmp	r1, #88	; 0x58
 8001bdc:	f000 8083 	beq.w	8001ce6 <_printf_i+0x136>
 8001be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001be4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001be8:	e032      	b.n	8001c50 <_printf_i+0xa0>
 8001bea:	2964      	cmp	r1, #100	; 0x64
 8001bec:	d001      	beq.n	8001bf2 <_printf_i+0x42>
 8001bee:	2969      	cmp	r1, #105	; 0x69
 8001bf0:	d1f6      	bne.n	8001be0 <_printf_i+0x30>
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	0605      	lsls	r5, r0, #24
 8001bf8:	f103 0104 	add.w	r1, r3, #4
 8001bfc:	d52a      	bpl.n	8001c54 <_printf_i+0xa4>
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da03      	bge.n	8001c0e <_printf_i+0x5e>
 8001c06:	222d      	movs	r2, #45	; 0x2d
 8001c08:	425b      	negs	r3, r3
 8001c0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c0e:	486f      	ldr	r0, [pc, #444]	; (8001dcc <_printf_i+0x21c>)
 8001c10:	220a      	movs	r2, #10
 8001c12:	e039      	b.n	8001c88 <_printf_i+0xd8>
 8001c14:	2973      	cmp	r1, #115	; 0x73
 8001c16:	f000 809d 	beq.w	8001d54 <_printf_i+0x1a4>
 8001c1a:	d808      	bhi.n	8001c2e <_printf_i+0x7e>
 8001c1c:	296f      	cmp	r1, #111	; 0x6f
 8001c1e:	d020      	beq.n	8001c62 <_printf_i+0xb2>
 8001c20:	2970      	cmp	r1, #112	; 0x70
 8001c22:	d1dd      	bne.n	8001be0 <_printf_i+0x30>
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f043 0320 	orr.w	r3, r3, #32
 8001c2a:	6023      	str	r3, [r4, #0]
 8001c2c:	e003      	b.n	8001c36 <_printf_i+0x86>
 8001c2e:	2975      	cmp	r1, #117	; 0x75
 8001c30:	d017      	beq.n	8001c62 <_printf_i+0xb2>
 8001c32:	2978      	cmp	r1, #120	; 0x78
 8001c34:	d1d4      	bne.n	8001be0 <_printf_i+0x30>
 8001c36:	2378      	movs	r3, #120	; 0x78
 8001c38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c3c:	4864      	ldr	r0, [pc, #400]	; (8001dd0 <_printf_i+0x220>)
 8001c3e:	e055      	b.n	8001cec <_printf_i+0x13c>
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	1d19      	adds	r1, r3, #4
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6011      	str	r1, [r2, #0]
 8001c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c50:	2301      	movs	r3, #1
 8001c52:	e08c      	b.n	8001d6e <_printf_i+0x1be>
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6011      	str	r1, [r2, #0]
 8001c58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c5c:	bf18      	it	ne
 8001c5e:	b21b      	sxthne	r3, r3
 8001c60:	e7cf      	b.n	8001c02 <_printf_i+0x52>
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	6825      	ldr	r5, [r4, #0]
 8001c66:	1d18      	adds	r0, r3, #4
 8001c68:	6010      	str	r0, [r2, #0]
 8001c6a:	0628      	lsls	r0, r5, #24
 8001c6c:	d501      	bpl.n	8001c72 <_printf_i+0xc2>
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e002      	b.n	8001c78 <_printf_i+0xc8>
 8001c72:	0668      	lsls	r0, r5, #25
 8001c74:	d5fb      	bpl.n	8001c6e <_printf_i+0xbe>
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4854      	ldr	r0, [pc, #336]	; (8001dcc <_printf_i+0x21c>)
 8001c7a:	296f      	cmp	r1, #111	; 0x6f
 8001c7c:	bf14      	ite	ne
 8001c7e:	220a      	movne	r2, #10
 8001c80:	2208      	moveq	r2, #8
 8001c82:	2100      	movs	r1, #0
 8001c84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c88:	6865      	ldr	r5, [r4, #4]
 8001c8a:	60a5      	str	r5, [r4, #8]
 8001c8c:	2d00      	cmp	r5, #0
 8001c8e:	f2c0 8095 	blt.w	8001dbc <_printf_i+0x20c>
 8001c92:	6821      	ldr	r1, [r4, #0]
 8001c94:	f021 0104 	bic.w	r1, r1, #4
 8001c98:	6021      	str	r1, [r4, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d13d      	bne.n	8001d1a <_printf_i+0x16a>
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	f040 808e 	bne.w	8001dc0 <_printf_i+0x210>
 8001ca4:	4665      	mov	r5, ip
 8001ca6:	2a08      	cmp	r2, #8
 8001ca8:	d10b      	bne.n	8001cc2 <_printf_i+0x112>
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	07db      	lsls	r3, r3, #31
 8001cae:	d508      	bpl.n	8001cc2 <_printf_i+0x112>
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	6862      	ldr	r2, [r4, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	bfde      	ittt	le
 8001cb8:	2330      	movle	r3, #48	; 0x30
 8001cba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001cc2:	ebac 0305 	sub.w	r3, ip, r5
 8001cc6:	6123      	str	r3, [r4, #16]
 8001cc8:	f8cd 8000 	str.w	r8, [sp]
 8001ccc:	463b      	mov	r3, r7
 8001cce:	aa03      	add	r2, sp, #12
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f7ff fef6 	bl	8001ac4 <_printf_common>
 8001cd8:	3001      	adds	r0, #1
 8001cda:	d14d      	bne.n	8001d78 <_printf_i+0x1c8>
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce0:	b005      	add	sp, #20
 8001ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce6:	4839      	ldr	r0, [pc, #228]	; (8001dcc <_printf_i+0x21c>)
 8001ce8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	6821      	ldr	r1, [r4, #0]
 8001cf0:	1d1d      	adds	r5, r3, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6015      	str	r5, [r2, #0]
 8001cf6:	060a      	lsls	r2, r1, #24
 8001cf8:	d50b      	bpl.n	8001d12 <_printf_i+0x162>
 8001cfa:	07ca      	lsls	r2, r1, #31
 8001cfc:	bf44      	itt	mi
 8001cfe:	f041 0120 	orrmi.w	r1, r1, #32
 8001d02:	6021      	strmi	r1, [r4, #0]
 8001d04:	b91b      	cbnz	r3, 8001d0e <_printf_i+0x15e>
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	f022 0220 	bic.w	r2, r2, #32
 8001d0c:	6022      	str	r2, [r4, #0]
 8001d0e:	2210      	movs	r2, #16
 8001d10:	e7b7      	b.n	8001c82 <_printf_i+0xd2>
 8001d12:	064d      	lsls	r5, r1, #25
 8001d14:	bf48      	it	mi
 8001d16:	b29b      	uxthmi	r3, r3
 8001d18:	e7ef      	b.n	8001cfa <_printf_i+0x14a>
 8001d1a:	4665      	mov	r5, ip
 8001d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d20:	fb02 3311 	mls	r3, r2, r1, r3
 8001d24:	5cc3      	ldrb	r3, [r0, r3]
 8001d26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	d1f5      	bne.n	8001d1c <_printf_i+0x16c>
 8001d30:	e7b9      	b.n	8001ca6 <_printf_i+0xf6>
 8001d32:	6813      	ldr	r3, [r2, #0]
 8001d34:	6825      	ldr	r5, [r4, #0]
 8001d36:	6961      	ldr	r1, [r4, #20]
 8001d38:	1d18      	adds	r0, r3, #4
 8001d3a:	6010      	str	r0, [r2, #0]
 8001d3c:	0628      	lsls	r0, r5, #24
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	d501      	bpl.n	8001d46 <_printf_i+0x196>
 8001d42:	6019      	str	r1, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <_printf_i+0x19c>
 8001d46:	066a      	lsls	r2, r5, #25
 8001d48:	d5fb      	bpl.n	8001d42 <_printf_i+0x192>
 8001d4a:	8019      	strh	r1, [r3, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6123      	str	r3, [r4, #16]
 8001d50:	4665      	mov	r5, ip
 8001d52:	e7b9      	b.n	8001cc8 <_printf_i+0x118>
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	1d19      	adds	r1, r3, #4
 8001d58:	6011      	str	r1, [r2, #0]
 8001d5a:	681d      	ldr	r5, [r3, #0]
 8001d5c:	6862      	ldr	r2, [r4, #4]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7fe fa4d 	bl	8000200 <memchr>
 8001d66:	b108      	cbz	r0, 8001d6c <_printf_i+0x1bc>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	6060      	str	r0, [r4, #4]
 8001d6c:	6863      	ldr	r3, [r4, #4]
 8001d6e:	6123      	str	r3, [r4, #16]
 8001d70:	2300      	movs	r3, #0
 8001d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d76:	e7a7      	b.n	8001cc8 <_printf_i+0x118>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	462a      	mov	r2, r5
 8001d7c:	4639      	mov	r1, r7
 8001d7e:	4630      	mov	r0, r6
 8001d80:	47c0      	blx	r8
 8001d82:	3001      	adds	r0, #1
 8001d84:	d0aa      	beq.n	8001cdc <_printf_i+0x12c>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	079b      	lsls	r3, r3, #30
 8001d8a:	d413      	bmi.n	8001db4 <_printf_i+0x204>
 8001d8c:	68e0      	ldr	r0, [r4, #12]
 8001d8e:	9b03      	ldr	r3, [sp, #12]
 8001d90:	4298      	cmp	r0, r3
 8001d92:	bfb8      	it	lt
 8001d94:	4618      	movlt	r0, r3
 8001d96:	e7a3      	b.n	8001ce0 <_printf_i+0x130>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	464a      	mov	r2, r9
 8001d9c:	4639      	mov	r1, r7
 8001d9e:	4630      	mov	r0, r6
 8001da0:	47c0      	blx	r8
 8001da2:	3001      	adds	r0, #1
 8001da4:	d09a      	beq.n	8001cdc <_printf_i+0x12c>
 8001da6:	3501      	adds	r5, #1
 8001da8:	68e3      	ldr	r3, [r4, #12]
 8001daa:	9a03      	ldr	r2, [sp, #12]
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	42ab      	cmp	r3, r5
 8001db0:	dcf2      	bgt.n	8001d98 <_printf_i+0x1e8>
 8001db2:	e7eb      	b.n	8001d8c <_printf_i+0x1dc>
 8001db4:	2500      	movs	r5, #0
 8001db6:	f104 0919 	add.w	r9, r4, #25
 8001dba:	e7f5      	b.n	8001da8 <_printf_i+0x1f8>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ac      	bne.n	8001d1a <_printf_i+0x16a>
 8001dc0:	7803      	ldrb	r3, [r0, #0]
 8001dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dca:	e76c      	b.n	8001ca6 <_printf_i+0xf6>
 8001dcc:	080026bd 	.word	0x080026bd
 8001dd0:	080026ce 	.word	0x080026ce

08001dd4 <_sbrk_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4c06      	ldr	r4, [pc, #24]	; (8001df0 <_sbrk_r+0x1c>)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4605      	mov	r5, r0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	f000 f9bc 	bl	800215c <_sbrk>
 8001de4:	1c43      	adds	r3, r0, #1
 8001de6:	d102      	bne.n	8001dee <_sbrk_r+0x1a>
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	b103      	cbz	r3, 8001dee <_sbrk_r+0x1a>
 8001dec:	602b      	str	r3, [r5, #0]
 8001dee:	bd38      	pop	{r3, r4, r5, pc}
 8001df0:	20000144 	.word	0x20000144

08001df4 <__sread>:
 8001df4:	b510      	push	{r4, lr}
 8001df6:	460c      	mov	r4, r1
 8001df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dfc:	f000 f896 	bl	8001f2c <_read_r>
 8001e00:	2800      	cmp	r0, #0
 8001e02:	bfab      	itete	ge
 8001e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e06:	89a3      	ldrhlt	r3, [r4, #12]
 8001e08:	181b      	addge	r3, r3, r0
 8001e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e0e:	bfac      	ite	ge
 8001e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e12:	81a3      	strhlt	r3, [r4, #12]
 8001e14:	bd10      	pop	{r4, pc}

08001e16 <__swrite>:
 8001e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1a:	461f      	mov	r7, r3
 8001e1c:	898b      	ldrh	r3, [r1, #12]
 8001e1e:	05db      	lsls	r3, r3, #23
 8001e20:	4605      	mov	r5, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4616      	mov	r6, r2
 8001e26:	d505      	bpl.n	8001e34 <__swrite+0x1e>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e30:	f000 f868 	bl	8001f04 <_lseek_r>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	4632      	mov	r2, r6
 8001e42:	463b      	mov	r3, r7
 8001e44:	4628      	mov	r0, r5
 8001e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4a:	f000 b817 	b.w	8001e7c <_write_r>

08001e4e <__sseek>:
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	460c      	mov	r4, r1
 8001e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e56:	f000 f855 	bl	8001f04 <_lseek_r>
 8001e5a:	1c43      	adds	r3, r0, #1
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	bf15      	itete	ne
 8001e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e6a:	81a3      	strheq	r3, [r4, #12]
 8001e6c:	bf18      	it	ne
 8001e6e:	81a3      	strhne	r3, [r4, #12]
 8001e70:	bd10      	pop	{r4, pc}

08001e72 <__sclose>:
 8001e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e76:	f000 b813 	b.w	8001ea0 <_close_r>
	...

08001e7c <_write_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4c07      	ldr	r4, [pc, #28]	; (8001e9c <_write_r+0x20>)
 8001e80:	4605      	mov	r5, r0
 8001e82:	4608      	mov	r0, r1
 8001e84:	4611      	mov	r1, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	6022      	str	r2, [r4, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 f911 	bl	80020b2 <_write>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_write_r+0x1e>
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_write_r+0x1e>
 8001e98:	602b      	str	r3, [r5, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	20000144 	.word	0x20000144

08001ea0 <_close_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4c06      	ldr	r4, [pc, #24]	; (8001ebc <_close_r+0x1c>)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	f000 f930 	bl	8002110 <_close>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d102      	bne.n	8001eba <_close_r+0x1a>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	b103      	cbz	r3, 8001eba <_close_r+0x1a>
 8001eb8:	602b      	str	r3, [r5, #0]
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	20000144 	.word	0x20000144

08001ec0 <_fstat_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4c07      	ldr	r4, [pc, #28]	; (8001ee0 <_fstat_r+0x20>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	6023      	str	r3, [r4, #0]
 8001ece:	f000 f98a 	bl	80021e6 <_fstat>
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	d102      	bne.n	8001edc <_fstat_r+0x1c>
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	b103      	cbz	r3, 8001edc <_fstat_r+0x1c>
 8001eda:	602b      	str	r3, [r5, #0]
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000144 	.word	0x20000144

08001ee4 <_isatty_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4c06      	ldr	r4, [pc, #24]	; (8001f00 <_isatty_r+0x1c>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4605      	mov	r5, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	f000 fade 	bl	80024b0 <_isatty>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_isatty_r+0x1a>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_isatty_r+0x1a>
 8001efc:	602b      	str	r3, [r5, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	20000144 	.word	0x20000144

08001f04 <_lseek_r>:
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	4c07      	ldr	r4, [pc, #28]	; (8001f24 <_lseek_r+0x20>)
 8001f08:	4605      	mov	r5, r0
 8001f0a:	4608      	mov	r0, r1
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	2200      	movs	r2, #0
 8001f10:	6022      	str	r2, [r4, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f000 f8bb 	bl	800208e <_lseek>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d102      	bne.n	8001f22 <_lseek_r+0x1e>
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	b103      	cbz	r3, 8001f22 <_lseek_r+0x1e>
 8001f20:	602b      	str	r3, [r5, #0]
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	20000144 	.word	0x20000144

08001f28 <__malloc_lock>:
 8001f28:	4770      	bx	lr

08001f2a <__malloc_unlock>:
 8001f2a:	4770      	bx	lr

08001f2c <_read_r>:
 8001f2c:	b538      	push	{r3, r4, r5, lr}
 8001f2e:	4c07      	ldr	r4, [pc, #28]	; (8001f4c <_read_r+0x20>)
 8001f30:	4605      	mov	r5, r0
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	2200      	movs	r2, #0
 8001f38:	6022      	str	r2, [r4, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f000 f850 	bl	8001fe0 <_read>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_read_r+0x1e>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_read_r+0x1e>
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	20000144 	.word	0x20000144

08001f50 <findslot>:
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <findslot+0x2c>)
 8001f52:	b510      	push	{r4, lr}
 8001f54:	4604      	mov	r4, r0
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	b118      	cbz	r0, 8001f62 <findslot+0x12>
 8001f5a:	6983      	ldr	r3, [r0, #24]
 8001f5c:	b90b      	cbnz	r3, 8001f62 <findslot+0x12>
 8001f5e:	f7ff fadd 	bl	800151c <__sinit>
 8001f62:	2c13      	cmp	r4, #19
 8001f64:	d807      	bhi.n	8001f76 <findslot+0x26>
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <findslot+0x30>)
 8001f68:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <findslot+0x26>
 8001f70:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f74:	bd10      	pop	{r4, pc}
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7fc      	b.n	8001f74 <findslot+0x24>
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	200000a4 	.word	0x200000a4

08001f84 <checkerror>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	4605      	mov	r5, r0
 8001f8a:	d109      	bne.n	8001fa0 <checkerror+0x1c>
 8001f8c:	f000 faac 	bl	80024e8 <__errno>
 8001f90:	2413      	movs	r4, #19
 8001f92:	4606      	mov	r6, r0
 8001f94:	2700      	movs	r7, #0
 8001f96:	4620      	mov	r0, r4
 8001f98:	4639      	mov	r1, r7
 8001f9a:	beab      	bkpt	0x00ab
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	6034      	str	r4, [r6, #0]
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fa4 <error>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	4605      	mov	r5, r0
 8001fa8:	f000 fa9e 	bl	80024e8 <__errno>
 8001fac:	2413      	movs	r4, #19
 8001fae:	4606      	mov	r6, r0
 8001fb0:	2700      	movs	r7, #0
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	beab      	bkpt	0x00ab
 8001fb8:	4604      	mov	r4, r0
 8001fba:	6034      	str	r4, [r6, #0]
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fc0 <_swiread>:
 8001fc0:	b530      	push	{r4, r5, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2406      	movs	r4, #6
 8001fcc:	ad01      	add	r5, sp, #4
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	beab      	bkpt	0x00ab
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff ffd4 	bl	8001f84 <checkerror>
 8001fdc:	b005      	add	sp, #20
 8001fde:	bd30      	pop	{r4, r5, pc}

08001fe0 <_read>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	460e      	mov	r6, r1
 8001fe4:	4615      	mov	r5, r2
 8001fe6:	f7ff ffb3 	bl	8001f50 <findslot>
 8001fea:	4604      	mov	r4, r0
 8001fec:	b930      	cbnz	r0, 8001ffc <_read+0x1c>
 8001fee:	f000 fa7b 	bl	80024e8 <__errno>
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	6003      	str	r3, [r0, #0]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	462a      	mov	r2, r5
 8001ffe:	4631      	mov	r1, r6
 8002000:	6800      	ldr	r0, [r0, #0]
 8002002:	f7ff ffdd 	bl	8001fc0 <_swiread>
 8002006:	1c43      	adds	r3, r0, #1
 8002008:	bf1f      	itttt	ne
 800200a:	6863      	ldrne	r3, [r4, #4]
 800200c:	1a28      	subne	r0, r5, r0
 800200e:	181b      	addne	r3, r3, r0
 8002010:	6063      	strne	r3, [r4, #4]
 8002012:	e7f2      	b.n	8001ffa <_read+0x1a>

08002014 <_swilseek>:
 8002014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002016:	460c      	mov	r4, r1
 8002018:	4616      	mov	r6, r2
 800201a:	f7ff ff99 	bl	8001f50 <findslot>
 800201e:	4605      	mov	r5, r0
 8002020:	b940      	cbnz	r0, 8002034 <_swilseek+0x20>
 8002022:	f000 fa61 	bl	80024e8 <__errno>
 8002026:	2309      	movs	r3, #9
 8002028:	6003      	str	r3, [r0, #0]
 800202a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800202e:	4620      	mov	r0, r4
 8002030:	b003      	add	sp, #12
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002034:	2e02      	cmp	r6, #2
 8002036:	d903      	bls.n	8002040 <_swilseek+0x2c>
 8002038:	f000 fa56 	bl	80024e8 <__errno>
 800203c:	2316      	movs	r3, #22
 800203e:	e7f3      	b.n	8002028 <_swilseek+0x14>
 8002040:	2e01      	cmp	r6, #1
 8002042:	d112      	bne.n	800206a <_swilseek+0x56>
 8002044:	6843      	ldr	r3, [r0, #4]
 8002046:	18e4      	adds	r4, r4, r3
 8002048:	d4f6      	bmi.n	8002038 <_swilseek+0x24>
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	260a      	movs	r6, #10
 800204e:	e9cd 3400 	strd	r3, r4, [sp]
 8002052:	466f      	mov	r7, sp
 8002054:	4630      	mov	r0, r6
 8002056:	4639      	mov	r1, r7
 8002058:	beab      	bkpt	0x00ab
 800205a:	4606      	mov	r6, r0
 800205c:	4630      	mov	r0, r6
 800205e:	f7ff ff91 	bl	8001f84 <checkerror>
 8002062:	2800      	cmp	r0, #0
 8002064:	dbe1      	blt.n	800202a <_swilseek+0x16>
 8002066:	606c      	str	r4, [r5, #4]
 8002068:	e7e1      	b.n	800202e <_swilseek+0x1a>
 800206a:	2e02      	cmp	r6, #2
 800206c:	d1ed      	bne.n	800204a <_swilseek+0x36>
 800206e:	af02      	add	r7, sp, #8
 8002070:	6803      	ldr	r3, [r0, #0]
 8002072:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002076:	260c      	movs	r6, #12
 8002078:	4630      	mov	r0, r6
 800207a:	4639      	mov	r1, r7
 800207c:	beab      	bkpt	0x00ab
 800207e:	4606      	mov	r6, r0
 8002080:	4630      	mov	r0, r6
 8002082:	f7ff ff7f 	bl	8001f84 <checkerror>
 8002086:	1c43      	adds	r3, r0, #1
 8002088:	d0cf      	beq.n	800202a <_swilseek+0x16>
 800208a:	4404      	add	r4, r0
 800208c:	e7dd      	b.n	800204a <_swilseek+0x36>

0800208e <_lseek>:
 800208e:	f7ff bfc1 	b.w	8002014 <_swilseek>

08002092 <_swiwrite>:
 8002092:	b530      	push	{r4, r5, lr}
 8002094:	b085      	sub	sp, #20
 8002096:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800209a:	9203      	str	r2, [sp, #12]
 800209c:	2405      	movs	r4, #5
 800209e:	ad01      	add	r5, sp, #4
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	beab      	bkpt	0x00ab
 80020a6:	4604      	mov	r4, r0
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff ff6b 	bl	8001f84 <checkerror>
 80020ae:	b005      	add	sp, #20
 80020b0:	bd30      	pop	{r4, r5, pc}

080020b2 <_write>:
 80020b2:	b570      	push	{r4, r5, r6, lr}
 80020b4:	460e      	mov	r6, r1
 80020b6:	4615      	mov	r5, r2
 80020b8:	f7ff ff4a 	bl	8001f50 <findslot>
 80020bc:	4604      	mov	r4, r0
 80020be:	b930      	cbnz	r0, 80020ce <_write+0x1c>
 80020c0:	f000 fa12 	bl	80024e8 <__errno>
 80020c4:	2309      	movs	r3, #9
 80020c6:	6003      	str	r3, [r0, #0]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	462a      	mov	r2, r5
 80020d0:	4631      	mov	r1, r6
 80020d2:	6800      	ldr	r0, [r0, #0]
 80020d4:	f7ff ffdd 	bl	8002092 <_swiwrite>
 80020d8:	1e02      	subs	r2, r0, #0
 80020da:	dbf5      	blt.n	80020c8 <_write+0x16>
 80020dc:	6863      	ldr	r3, [r4, #4]
 80020de:	1aa8      	subs	r0, r5, r2
 80020e0:	4403      	add	r3, r0
 80020e2:	42aa      	cmp	r2, r5
 80020e4:	6063      	str	r3, [r4, #4]
 80020e6:	d1f1      	bne.n	80020cc <_write+0x1a>
 80020e8:	2000      	movs	r0, #0
 80020ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020ee:	f7ff bf59 	b.w	8001fa4 <error>

080020f2 <_swiclose>:
 80020f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020f4:	ad02      	add	r5, sp, #8
 80020f6:	2402      	movs	r4, #2
 80020f8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	beab      	bkpt	0x00ab
 8002102:	4604      	mov	r4, r0
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff3d 	bl	8001f84 <checkerror>
 800210a:	b003      	add	sp, #12
 800210c:	bd30      	pop	{r4, r5, pc}
	...

08002110 <_close>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4605      	mov	r5, r0
 8002114:	f7ff ff1c 	bl	8001f50 <findslot>
 8002118:	4604      	mov	r4, r0
 800211a:	b930      	cbnz	r0, 800212a <_close+0x1a>
 800211c:	f000 f9e4 	bl	80024e8 <__errno>
 8002120:	2309      	movs	r3, #9
 8002122:	6003      	str	r3, [r0, #0]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	bd38      	pop	{r3, r4, r5, pc}
 800212a:	3d01      	subs	r5, #1
 800212c:	2d01      	cmp	r5, #1
 800212e:	d809      	bhi.n	8002144 <_close+0x34>
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <_close+0x48>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d104      	bne.n	8002144 <_close+0x34>
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213e:	6003      	str	r3, [r0, #0]
 8002140:	2000      	movs	r0, #0
 8002142:	e7f1      	b.n	8002128 <_close+0x18>
 8002144:	6820      	ldr	r0, [r4, #0]
 8002146:	f7ff ffd4 	bl	80020f2 <_swiclose>
 800214a:	2800      	cmp	r0, #0
 800214c:	d1ec      	bne.n	8002128 <_close+0x18>
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	e7e8      	b.n	8002128 <_close+0x18>
 8002156:	bf00      	nop
 8002158:	200000a4 	.word	0x200000a4

0800215c <_sbrk>:
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <_sbrk+0x38>)
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	b510      	push	{r4, lr}
 8002162:	4602      	mov	r2, r0
 8002164:	b909      	cbnz	r1, 800216a <_sbrk+0xe>
 8002166:	490c      	ldr	r1, [pc, #48]	; (8002198 <_sbrk+0x3c>)
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	4669      	mov	r1, sp
 800216e:	4402      	add	r2, r0
 8002170:	428a      	cmp	r2, r1
 8002172:	d806      	bhi.n	8002182 <_sbrk+0x26>
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <_sbrk+0x40>)
 8002176:	4c0a      	ldr	r4, [pc, #40]	; (80021a0 <_sbrk+0x44>)
 8002178:	6809      	ldr	r1, [r1, #0]
 800217a:	42a1      	cmp	r1, r4
 800217c:	d008      	beq.n	8002190 <_sbrk+0x34>
 800217e:	428a      	cmp	r2, r1
 8002180:	d906      	bls.n	8002190 <_sbrk+0x34>
 8002182:	f000 f9b1 	bl	80024e8 <__errno>
 8002186:	230c      	movs	r3, #12
 8002188:	6003      	str	r3, [r0, #0]
 800218a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800218e:	bd10      	pop	{r4, pc}
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e7fc      	b.n	800218e <_sbrk+0x32>
 8002194:	20000094 	.word	0x20000094
 8002198:	20000148 	.word	0x20000148
 800219c:	20000064 	.word	0x20000064
 80021a0:	cafedead 	.word	0xcafedead

080021a4 <_swistat>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	460c      	mov	r4, r1
 80021a8:	f7ff fed2 	bl	8001f50 <findslot>
 80021ac:	4606      	mov	r6, r0
 80021ae:	b930      	cbnz	r0, 80021be <_swistat+0x1a>
 80021b0:	f000 f99a 	bl	80024e8 <__errno>
 80021b4:	2309      	movs	r3, #9
 80021b6:	6003      	str	r3, [r0, #0]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021c4:	6063      	str	r3, [r4, #4]
 80021c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ca:	6463      	str	r3, [r4, #68]	; 0x44
 80021cc:	250c      	movs	r5, #12
 80021ce:	4628      	mov	r0, r5
 80021d0:	4631      	mov	r1, r6
 80021d2:	beab      	bkpt	0x00ab
 80021d4:	4605      	mov	r5, r0
 80021d6:	4628      	mov	r0, r5
 80021d8:	f7ff fed4 	bl	8001f84 <checkerror>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	bf1c      	itt	ne
 80021e0:	6120      	strne	r0, [r4, #16]
 80021e2:	2000      	movne	r0, #0
 80021e4:	e7ea      	b.n	80021bc <_swistat+0x18>

080021e6 <_fstat>:
 80021e6:	460b      	mov	r3, r1
 80021e8:	b510      	push	{r4, lr}
 80021ea:	2100      	movs	r1, #0
 80021ec:	4604      	mov	r4, r0
 80021ee:	2258      	movs	r2, #88	; 0x58
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff5f 	bl	80010b4 <memset>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4620      	mov	r0, r4
 80021fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021fe:	f7ff bfd1 	b.w	80021a4 <_swistat>

08002202 <_stat>:
 8002202:	b538      	push	{r3, r4, r5, lr}
 8002204:	460d      	mov	r5, r1
 8002206:	4604      	mov	r4, r0
 8002208:	2258      	movs	r2, #88	; 0x58
 800220a:	2100      	movs	r1, #0
 800220c:	4628      	mov	r0, r5
 800220e:	f7fe ff51 	bl	80010b4 <memset>
 8002212:	4620      	mov	r0, r4
 8002214:	2100      	movs	r1, #0
 8002216:	f000 f811 	bl	800223c <_swiopen>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	4604      	mov	r4, r0
 800221e:	d00b      	beq.n	8002238 <_stat+0x36>
 8002220:	686b      	ldr	r3, [r5, #4]
 8002222:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002226:	606b      	str	r3, [r5, #4]
 8002228:	4629      	mov	r1, r5
 800222a:	f7ff ffbb 	bl	80021a4 <_swistat>
 800222e:	4605      	mov	r5, r0
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ff6d 	bl	8002110 <_close>
 8002236:	462c      	mov	r4, r5
 8002238:	4620      	mov	r0, r4
 800223a:	bd38      	pop	{r3, r4, r5, pc}

0800223c <_swiopen>:
 800223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <_swiopen+0xb4>)
 8002242:	b096      	sub	sp, #88	; 0x58
 8002244:	4682      	mov	sl, r0
 8002246:	460e      	mov	r6, r1
 8002248:	2500      	movs	r5, #0
 800224a:	4698      	mov	r8, r3
 800224c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002250:	1c61      	adds	r1, r4, #1
 8002252:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002256:	d036      	beq.n	80022c6 <_swiopen+0x8a>
 8002258:	3501      	adds	r5, #1
 800225a:	2d14      	cmp	r5, #20
 800225c:	d1f6      	bne.n	800224c <_swiopen+0x10>
 800225e:	f000 f943 	bl	80024e8 <__errno>
 8002262:	2318      	movs	r3, #24
 8002264:	6003      	str	r3, [r0, #0]
 8002266:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800226a:	e03c      	b.n	80022e6 <_swiopen+0xaa>
 800226c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002270:	f240 6301 	movw	r3, #1537	; 0x601
 8002274:	07b2      	lsls	r2, r6, #30
 8002276:	bf48      	it	mi
 8002278:	f044 0402 	orrmi.w	r4, r4, #2
 800227c:	421e      	tst	r6, r3
 800227e:	bf18      	it	ne
 8002280:	f044 0404 	orrne.w	r4, r4, #4
 8002284:	0733      	lsls	r3, r6, #28
 8002286:	bf48      	it	mi
 8002288:	f024 0404 	bicmi.w	r4, r4, #4
 800228c:	4650      	mov	r0, sl
 800228e:	bf48      	it	mi
 8002290:	f044 0408 	orrmi.w	r4, r4, #8
 8002294:	f8cd a000 	str.w	sl, [sp]
 8002298:	f7fd ffaa 	bl	80001f0 <strlen>
 800229c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80022a0:	2401      	movs	r4, #1
 80022a2:	4620      	mov	r0, r4
 80022a4:	4649      	mov	r1, r9
 80022a6:	beab      	bkpt	0x00ab
 80022a8:	4604      	mov	r4, r0
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	db06      	blt.n	80022bc <_swiopen+0x80>
 80022ae:	4447      	add	r7, r8
 80022b0:	2300      	movs	r3, #0
 80022b2:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	462c      	mov	r4, r5
 80022ba:	e014      	b.n	80022e6 <_swiopen+0xaa>
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff fe71 	bl	8001fa4 <error>
 80022c2:	4604      	mov	r4, r0
 80022c4:	e00f      	b.n	80022e6 <_swiopen+0xaa>
 80022c6:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80022ca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80022ce:	46e9      	mov	r9, sp
 80022d0:	d1cc      	bne.n	800226c <_swiopen+0x30>
 80022d2:	4649      	mov	r1, r9
 80022d4:	4650      	mov	r0, sl
 80022d6:	f7ff ff94 	bl	8002202 <_stat>
 80022da:	3001      	adds	r0, #1
 80022dc:	d0c6      	beq.n	800226c <_swiopen+0x30>
 80022de:	f000 f903 	bl	80024e8 <__errno>
 80022e2:	2311      	movs	r3, #17
 80022e4:	6003      	str	r3, [r0, #0]
 80022e6:	4620      	mov	r0, r4
 80022e8:	b016      	add	sp, #88	; 0x58
 80022ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ee:	bf00      	nop
 80022f0:	200000a4 	.word	0x200000a4

080022f4 <_get_semihosting_exts>:
 80022f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80022f8:	4607      	mov	r7, r0
 80022fa:	4688      	mov	r8, r1
 80022fc:	4829      	ldr	r0, [pc, #164]	; (80023a4 <_get_semihosting_exts+0xb0>)
 80022fe:	2100      	movs	r1, #0
 8002300:	4615      	mov	r5, r2
 8002302:	f7ff ff9b 	bl	800223c <_swiopen>
 8002306:	462a      	mov	r2, r5
 8002308:	4604      	mov	r4, r0
 800230a:	2100      	movs	r1, #0
 800230c:	4638      	mov	r0, r7
 800230e:	f7fe fed1 	bl	80010b4 <memset>
 8002312:	1c63      	adds	r3, r4, #1
 8002314:	d015      	beq.n	8002342 <_get_semihosting_exts+0x4e>
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fe1a 	bl	8001f50 <findslot>
 800231c:	260c      	movs	r6, #12
 800231e:	4681      	mov	r9, r0
 8002320:	4630      	mov	r0, r6
 8002322:	4649      	mov	r1, r9
 8002324:	beab      	bkpt	0x00ab
 8002326:	4606      	mov	r6, r0
 8002328:	4630      	mov	r0, r6
 800232a:	f7ff fe2b 	bl	8001f84 <checkerror>
 800232e:	2803      	cmp	r0, #3
 8002330:	dd02      	ble.n	8002338 <_get_semihosting_exts+0x44>
 8002332:	3803      	subs	r0, #3
 8002334:	42a8      	cmp	r0, r5
 8002336:	dc08      	bgt.n	800234a <_get_semihosting_exts+0x56>
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff fee9 	bl	8002110 <_close>
 800233e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002342:	4620      	mov	r0, r4
 8002344:	b003      	add	sp, #12
 8002346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800234a:	2204      	movs	r2, #4
 800234c:	eb0d 0102 	add.w	r1, sp, r2
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff fe45 	bl	8001fe0 <_read>
 8002356:	2803      	cmp	r0, #3
 8002358:	ddee      	ble.n	8002338 <_get_semihosting_exts+0x44>
 800235a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800235e:	2b53      	cmp	r3, #83	; 0x53
 8002360:	d1ea      	bne.n	8002338 <_get_semihosting_exts+0x44>
 8002362:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002366:	2b48      	cmp	r3, #72	; 0x48
 8002368:	d1e6      	bne.n	8002338 <_get_semihosting_exts+0x44>
 800236a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800236e:	2b46      	cmp	r3, #70	; 0x46
 8002370:	d1e2      	bne.n	8002338 <_get_semihosting_exts+0x44>
 8002372:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002376:	2b42      	cmp	r3, #66	; 0x42
 8002378:	d1de      	bne.n	8002338 <_get_semihosting_exts+0x44>
 800237a:	2201      	movs	r2, #1
 800237c:	4641      	mov	r1, r8
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff fe48 	bl	8002014 <_swilseek>
 8002384:	2800      	cmp	r0, #0
 8002386:	dbd7      	blt.n	8002338 <_get_semihosting_exts+0x44>
 8002388:	462a      	mov	r2, r5
 800238a:	4639      	mov	r1, r7
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fe27 	bl	8001fe0 <_read>
 8002392:	4605      	mov	r5, r0
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff febb 	bl	8002110 <_close>
 800239a:	4628      	mov	r0, r5
 800239c:	f7ff fdf2 	bl	8001f84 <checkerror>
 80023a0:	4604      	mov	r4, r0
 80023a2:	e7ce      	b.n	8002342 <_get_semihosting_exts+0x4e>
 80023a4:	080026df 	.word	0x080026df

080023a8 <initialise_semihosting_exts>:
 80023a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023aa:	4d0a      	ldr	r5, [pc, #40]	; (80023d4 <initialise_semihosting_exts+0x2c>)
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <initialise_semihosting_exts+0x30>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	2201      	movs	r2, #1
 80023b2:	a801      	add	r0, sp, #4
 80023b4:	6029      	str	r1, [r5, #0]
 80023b6:	6022      	str	r2, [r4, #0]
 80023b8:	f7ff ff9c 	bl	80022f4 <_get_semihosting_exts>
 80023bc:	2800      	cmp	r0, #0
 80023be:	dd07      	ble.n	80023d0 <initialise_semihosting_exts+0x28>
 80023c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	602a      	str	r2, [r5, #0]
 80023ce:	6023      	str	r3, [r4, #0]
 80023d0:	b003      	add	sp, #12
 80023d2:	bd30      	pop	{r4, r5, pc}
 80023d4:	20000068 	.word	0x20000068
 80023d8:	2000006c 	.word	0x2000006c

080023dc <_has_ext_stdout_stderr>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	4c04      	ldr	r4, [pc, #16]	; (80023f0 <_has_ext_stdout_stderr+0x14>)
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	da01      	bge.n	80023ea <_has_ext_stdout_stderr+0xe>
 80023e6:	f7ff ffdf 	bl	80023a8 <initialise_semihosting_exts>
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	bd10      	pop	{r4, pc}
 80023ee:	bf00      	nop
 80023f0:	2000006c 	.word	0x2000006c

080023f4 <initialise_monitor_handles>:
 80023f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80024ac <initialise_monitor_handles+0xb8>
 80023fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002402:	2303      	movs	r3, #3
 8002404:	2400      	movs	r4, #0
 8002406:	9303      	str	r3, [sp, #12]
 8002408:	f10d 0804 	add.w	r8, sp, #4
 800240c:	9402      	str	r4, [sp, #8]
 800240e:	2501      	movs	r5, #1
 8002410:	4628      	mov	r0, r5
 8002412:	4641      	mov	r1, r8
 8002414:	beab      	bkpt	0x00ab
 8002416:	4605      	mov	r5, r0
 8002418:	4e20      	ldr	r6, [pc, #128]	; (800249c <initialise_monitor_handles+0xa8>)
 800241a:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <initialise_monitor_handles+0xac>)
 800241c:	6035      	str	r5, [r6, #0]
 800241e:	4623      	mov	r3, r4
 8002420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002424:	4614      	mov	r4, r2
 8002426:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800242a:	3301      	adds	r3, #1
 800242c:	2b14      	cmp	r3, #20
 800242e:	d1fa      	bne.n	8002426 <initialise_monitor_handles+0x32>
 8002430:	f7ff ffd4 	bl	80023dc <_has_ext_stdout_stderr>
 8002434:	4d1b      	ldr	r5, [pc, #108]	; (80024a4 <initialise_monitor_handles+0xb0>)
 8002436:	b1d0      	cbz	r0, 800246e <initialise_monitor_handles+0x7a>
 8002438:	f04f 0a03 	mov.w	sl, #3
 800243c:	2304      	movs	r3, #4
 800243e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002442:	2701      	movs	r7, #1
 8002444:	f8cd a00c 	str.w	sl, [sp, #12]
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	4638      	mov	r0, r7
 800244c:	4641      	mov	r1, r8
 800244e:	beab      	bkpt	0x00ab
 8002450:	4683      	mov	fp, r0
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <initialise_monitor_handles+0xb4>)
 8002454:	f8cd 9004 	str.w	r9, [sp, #4]
 8002458:	f8c3 b000 	str.w	fp, [r3]
 800245c:	2308      	movs	r3, #8
 800245e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	4638      	mov	r0, r7
 8002466:	4641      	mov	r1, r8
 8002468:	beab      	bkpt	0x00ab
 800246a:	4607      	mov	r7, r0
 800246c:	602f      	str	r7, [r5, #0]
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	bf02      	ittt	eq
 8002474:	4b0c      	ldreq	r3, [pc, #48]	; (80024a8 <initialise_monitor_handles+0xb4>)
 8002476:	681b      	ldreq	r3, [r3, #0]
 8002478:	602b      	streq	r3, [r5, #0]
 800247a:	6833      	ldr	r3, [r6, #0]
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	2600      	movs	r6, #0
 8002480:	6066      	str	r6, [r4, #4]
 8002482:	f7ff ffab 	bl	80023dc <_has_ext_stdout_stderr>
 8002486:	b130      	cbz	r0, 8002496 <initialise_monitor_handles+0xa2>
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <initialise_monitor_handles+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002496:	b005      	add	sp, #20
 8002498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249c:	2000009c 	.word	0x2000009c
 80024a0:	200000a4 	.word	0x200000a4
 80024a4:	20000098 	.word	0x20000098
 80024a8:	200000a0 	.word	0x200000a0
 80024ac:	080026f5 	.word	0x080026f5

080024b0 <_isatty>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	f7ff fd4d 	bl	8001f50 <findslot>
 80024b6:	2509      	movs	r5, #9
 80024b8:	4604      	mov	r4, r0
 80024ba:	b920      	cbnz	r0, 80024c6 <_isatty+0x16>
 80024bc:	f000 f814 	bl	80024e8 <__errno>
 80024c0:	6005      	str	r5, [r0, #0]
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	4628      	mov	r0, r5
 80024c8:	4621      	mov	r1, r4
 80024ca:	beab      	bkpt	0x00ab
 80024cc:	4604      	mov	r4, r0
 80024ce:	2c01      	cmp	r4, #1
 80024d0:	d0f7      	beq.n	80024c2 <_isatty+0x12>
 80024d2:	f000 f809 	bl	80024e8 <__errno>
 80024d6:	2400      	movs	r4, #0
 80024d8:	4606      	mov	r6, r0
 80024da:	2513      	movs	r5, #19
 80024dc:	4628      	mov	r0, r5
 80024de:	4621      	mov	r1, r4
 80024e0:	beab      	bkpt	0x00ab
 80024e2:	4605      	mov	r5, r0
 80024e4:	6035      	str	r5, [r6, #0]
 80024e6:	e7ec      	b.n	80024c2 <_isatty+0x12>

080024e8 <__errno>:
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <__errno+0x8>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
