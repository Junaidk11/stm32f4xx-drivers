
stm32f4xx-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000748  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080008f0  080008f0  000108f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000900  08000900  00010908  2**0
                  CONTENTS
  4 .ARM          00000000  08000900  08000900  00010908  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000900  08000908  00010908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000900  08000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000908  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000908  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000197f  00000000  00000000  00010932  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000475  00000000  00000000  000122b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00012848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002087  00000000  00000000  00012930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011bd  00000000  00000000  000149b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000095f7  00000000  00000000  00015b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f16b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b8  00000000  00000000  0001f1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008d8 	.word	0x080008d8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080008d8 	.word	0x080008d8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
 * 
 * Alternate Functionality mode = 5; Needed for configuring the I/O pins for alternate functionality 
 * 
 **/

void SPI2_GPIOInits(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0

	// Enable clock access to GPIOB Port before making any configurations. 
	GPIOB_PERIPH_CLOCK_EN(); 
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <SPI2_GPIOInits+0x64>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a16      	ldr	r2, [pc, #88]	; (800025c <SPI2_GPIOInits+0x64>)
 8000204:	f043 0302 	orr.w	r3, r3, #2
 8000208:	6313      	str	r3, [r2, #48]	; 0x30

	// Create a GPIO handle, which will hold the base address and Pin configurations 
	GPIO_Handle_t SPIPins; 
	SPIPins.pGPIOx_BASEADDR = GPIOB; 
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <SPI2_GPIOInits+0x68>)
 800020c:	607b      	str	r3, [r7, #4]

	// Set Pin Configurations for each I/O Pin
	SPIPins.PinConfig.PinMode = GPIO_PIN_ALTFUNC_MODE; 
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.PinConfig.PinAltFunMode = 5; 
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.PinConfig.PinOType = GPIO_PUSH_PULL_OUTPUT_CONFIG; // Output Drain Type is required for I2C -> specification insists.
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.PinConfig.PinPuPdControl = GPIO_PIN_NO_PUPD;  // Don't need PU/PD for Push-pull output configuration
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.PinConfig.PinSpeed = GPIO_PIN_HIGH_SPEED;  // Doesn't matter, can set to any speed
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	// Set Pin number and call the GPIOInit to initialize each of the PBx pins.

	// SPI2_NSS
	SPIPins.PinConfig.PinNumber = GPIO_PIN_12; 
 8000222:	230c      	movs	r3, #12
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f89b 	bl	8000364 <GPIO_Init>

	// SPI2_SCLK 
	SPIPins.PinConfig.PinNumber = GPIO_PIN_13; 
 800022e:	230d      	movs	r3, #13
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f895 	bl	8000364 <GPIO_Init>

	// SPI2_MISO
	SPIPins.PinConfig.PinNumber = GPIO_PIN_14; 
 800023a:	230e      	movs	r3, #14
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f88f 	bl	8000364 <GPIO_Init>
	
	// SPI2_MOSI
	SPIPins.PinConfig.PinNumber = GPIO_PIN_15;
 8000246:	230f      	movs	r3, #15
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); 
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f889 	bl	8000364 <GPIO_Init>


}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:

void SPI2_Inits(){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0


		// Enable clock access to the peripheral before making any configurations. 
		SPI2_PERIPH_CLOCK_EN(); 
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <SPI2_Inits+0x44>)
 800026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <SPI2_Inits+0x44>)
 8000270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000274:	6413      	str	r3, [r2, #64]	; 0x40

		// Create SPI Handle 
		SPI_Handle_t SPI2Handle; 

		// Set BaseAddress to SPI2 
		SPI2Handle.pSPIx_BASEADDR = SPI2;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SPI2_Inits+0x48>)
 8000278:	607b      	str	r3, [r7, #4]

		// Configure the SPI2 Peripheral as desired. 
		SPI2Handle.SPIConfig.DeviceMode = SPI_IN_MASTER_MODE;  
 800027a:	2301      	movs	r3, #1
 800027c:	723b      	strb	r3, [r7, #8]
		SPI2Handle.SPIConfig.BusConfig = SPI_IN_FULL_DUPLEX_MODE; 
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
		SPI2Handle.SPIConfig.DataFrameFormat = SPI_DATAFRAME_8BITS; 
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]
		SPI2Handle.SPIConfig.ClockPolarity = SPI_SCLK_LOW; 
 8000286:	2300      	movs	r3, #0
 8000288:	733b      	strb	r3, [r7, #12]
		SPI2Handle.SPIConfig.ClockPhase = SPI_DATA_SAMPLED_ON_LEADING_EDGE; 
 800028a:	2300      	movs	r3, #0
 800028c:	737b      	strb	r3, [r7, #13]
		SPI2Handle.SPIConfig.SclkSpeed = SPI_PERIPHERAL_CLOCK_DIV2; // Serial Clock is at lowest possible at 8 MHz as Prescaler = 2, System Clock source is Internal RC oscillator, producing 16MHz
 800028e:	2300      	movs	r3, #0
 8000290:	72bb      	strb	r3, [r7, #10]
		SPI2Handle.SPIConfig.SlaveManagementType = SPI_SOFTWARE_SLAVE_MANAGEMENT_EN; // No actually slaves, so we can enable software slave management. 
 8000292:	2301      	movs	r3, #1
 8000294:	73bb      	strb	r3, [r7, #14]

		// Call the Init API to initialize the configured SPI2 peripheral.
		SPI_Init(&SPI2Handle);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fa11 	bl	80006c0 <SPI_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40003800 	.word	0x40003800

080002b0 <main>:
int main(){
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 
	// 1. Call Function to configure the I/O pins above to be used as SPI2 pin. 
	SPI2_GPIOInits();
 80002b6:	f7ff ff9f 	bl	80001f8 <SPI2_GPIOInits>

	// 2. Call Function to Configure the SPI2 Peripheral 
	SPI2_Inits();
 80002ba:	f7ff ffd3 	bl	8000264 <SPI2_Inits>

	// 3. Enable the SPI Peripheral

	SPI_PeripheralControl(SPI2, ENABLE); 
 80002be:	2101      	movs	r1, #1
 80002c0:	4811      	ldr	r0, [pc, #68]	; (8000308 <main+0x58>)
 80002c2:	f000 fa60 	bl	8000786 <SPI_PeripheralControl>
	// 4. SSI is set 1, this will pull the Master's NSS pin to High, internally. This will prevent MODF (MODE FAULT) error. 
	/* MODF error is set in the SPI_CR1_SR, to indicate that the master's NSS pin was driven to Low, 
	*  which means a different master has taken over the Bus and will generate the clock.
	*  to avoid the MODF error, when there is no slave configured in the network and Software slave management is configured, the NSS pin of the Master is internally pulled High to avoid MODF error.  
	*/
	SPI_SSIConfig(SPI2, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <main+0x58>)
 80002ca:	f000 fa7a 	bl	80007c2 <SPI_SSIConfig>

	// 5. Data to send
	char data[] ="HELLO WORLD!"; 
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <main+0x5c>)
 80002d0:	463c      	mov	r4, r7
 80002d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d4:	c407      	stmia	r4!, {r0, r1, r2}
 80002d6:	7023      	strb	r3, [r4, #0]

	// 6. Call SPI_SendData Function
	SPI_SendData(SPI2,(uint8_t *)data,strlen(data)); 
 80002d8:	463b      	mov	r3, r7
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff84 	bl	80001e8 <strlen>
 80002e0:	4602      	mov	r2, r0
 80002e2:	463b      	mov	r3, r7
 80002e4:	4619      	mov	r1, r3
 80002e6:	4808      	ldr	r0, [pc, #32]	; (8000308 <main+0x58>)
 80002e8:	f000 fa9c 	bl	8000824 <SPI_SendData>

	// 7. Test SPI Busy Flag before closing the SPI peripheral 
	// SPI_SR_BSY flag is controlled by hardware and it is cleared when SPI is not busy
    while(SPI_GetFlagStatus(SPI2, SPI_SR_BSY)){} // SPI busy, you stay here
 80002ec:	bf00      	nop
 80002ee:	2107      	movs	r1, #7
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <main+0x58>)
 80002f2:	f000 fa84 	bl	80007fe <SPI_GetFlagStatus>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f8      	bne.n	80002ee <main+0x3e>
	
	// 8. Disable SPI Peripheral 
	SPI_PeripheralControl(SPI2, DISABLE);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4802      	ldr	r0, [pc, #8]	; (8000308 <main+0x58>)
 8000300:	f000 fa41 	bl	8000786 <SPI_PeripheralControl>

	while(1);
 8000304:	e7fe      	b.n	8000304 <main+0x54>
 8000306:	bf00      	nop
 8000308:	40003800 	.word	0x40003800
 800030c:	080008f0 	.word	0x080008f0

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490e      	ldr	r1, [pc, #56]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0b      	ldr	r4, [pc, #44]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 faa7 	bl	8000890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffb5 	bl	80002b0 <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	08000908 	.word	0x08000908
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000364:	b480      	push	{r7}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
		
	uint32_t temp = 0;   // Use this temp variable to store the value that will be assigned to the register of the specific GPIO Port
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
						// The temp variable needs to be size of 32 bits, because MODER register is 32 bits wide.

	if(pGPIOHandle->PinConfig.PinMode <= GPIO_PIN_ANALOG_MODE){ // i.e. the GPIO pin mode selected is a non-interrupt mode
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	795b      	ldrb	r3, [r3, #5]
 8000374:	2b03      	cmp	r3, #3
 8000376:	d820      	bhi.n	80003ba <GPIO_Init+0x56>

				// 1. configure the mode of GPIO pin
//			The info filled by the user before calling the API function.
								// |
				temp = (pGPIOHandle->PinConfig.PinMode << (2 * pGPIOHandle->PinConfig.PinNumber)); // GPIO's MODE register has 2 bits dedicated to each pin of the PORT, hence the need for '2' for shifting to the right pin.
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	461a      	mov	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	617b      	str	r3, [r7, #20]

				// Clear the desired bits before setting them.
//														  | the 0x3 is because we're clearing 2 bits, which in decimal is a 3. Also, the left shift argument is to clear the respective field.
				pGPIOHandle->pGPIOx_BASEADDR->MODER &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	2103      	movs	r1, #3
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	4619      	mov	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	400a      	ands	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
//			Grabs the Physical Memory address dedicated to Mode register of your desired GPIO Port
								// |
				pGPIOHandle->pGPIOx_BASEADDR->MODER |= temp; 		// Assign temp value to the MODER register using the base-address of your PORT.
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	6819      	ldr	r1, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	430a      	orrs	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	e0dc      	b.n	8000574 <GPIO_Init+0x210>
	}else {

		// Do this for if the selected pin mode is one of the Interrupt Modes.

		if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_FALLING_EDGE_INTERRUPT_MODE){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d117      	bne.n	80003f2 <GPIO_Init+0x8e>
			// 1. Configure the Falling Edge Trigger Selection Register  
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 80003c2:	4b4f      	ldr	r3, [pc, #316]	; (8000500 <GPIO_Init+0x19c>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	7912      	ldrb	r2, [r2, #4]
 80003ca:	4611      	mov	r1, r2
 80003cc:	2201      	movs	r2, #1
 80003ce:	408a      	lsls	r2, r1
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a4b      	ldr	r2, [pc, #300]	; (8000500 <GPIO_Init+0x19c>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	60d3      	str	r3, [r2, #12]

			// Clear the Corresponding Rising Edge Trigger Selection Register - Just to be safe.   
			  EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 80003d8:	4b49      	ldr	r3, [pc, #292]	; (8000500 <GPIO_Init+0x19c>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7912      	ldrb	r2, [r2, #4]
 80003e0:	4611      	mov	r1, r2
 80003e2:	2201      	movs	r2, #1
 80003e4:	408a      	lsls	r2, r1
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a45      	ldr	r2, [pc, #276]	; (8000500 <GPIO_Init+0x19c>)
 80003ec:	400b      	ands	r3, r1
 80003ee:	6093      	str	r3, [r2, #8]
 80003f0:	e035      	b.n	800045e <GPIO_Init+0xfa>

		}else if (pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_EDGE_INTERRUPT_MODE){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	795b      	ldrb	r3, [r3, #5]
 80003f6:	2b05      	cmp	r3, #5
 80003f8:	d117      	bne.n	800042a <GPIO_Init+0xc6>
			// 1. Configure the Rising Edge Trigger Selection Register  
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 80003fa:	4b41      	ldr	r3, [pc, #260]	; (8000500 <GPIO_Init+0x19c>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a3d      	ldr	r2, [pc, #244]	; (8000500 <GPIO_Init+0x19c>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber); 
 8000410:	4b3b      	ldr	r3, [pc, #236]	; (8000500 <GPIO_Init+0x19c>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	7912      	ldrb	r2, [r2, #4]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	43d2      	mvns	r2, r2
 8000420:	4611      	mov	r1, r2
 8000422:	4a37      	ldr	r2, [pc, #220]	; (8000500 <GPIO_Init+0x19c>)
 8000424:	400b      	ands	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
 8000428:	e019      	b.n	800045e <GPIO_Init+0xfa>

		}else if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_INPUT_RISING_FALLING_INTERRUPT_MODE){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	2b06      	cmp	r3, #6
 8000430:	d115      	bne.n	800045e <GPIO_Init+0xfa>

			// 1. Configure both Rising Edge Trigger & Falling Edge Trigger Selection Register 
			  EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <GPIO_Init+0x19c>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a2f      	ldr	r2, [pc, #188]	; (8000500 <GPIO_Init+0x19c>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6093      	str	r3, [r2, #8]

			// Clear the Corresponding Falling Edge Trigger Selection Register - Just to be safe.   
			  EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber); 	  
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <GPIO_Init+0x19c>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	4611      	mov	r1, r2
 8000458:	4a29      	ldr	r2, [pc, #164]	; (8000500 <GPIO_Init+0x19c>)
 800045a:	430b      	orrs	r3, r1
 800045c:	60d3      	str	r3, [r2, #12]
			
				uint8_t temp1;
				uint8_t temp2; 

				// Gives the value of EXTICRx Register 
				temp1 = (pGPIOHandle->PinConfig.PinMode) / 5; 
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	4a28      	ldr	r2, [pc, #160]	; (8000504 <GPIO_Init+0x1a0>)
 8000464:	fba2 2303 	umull	r2, r3, r2, r3
 8000468:	089b      	lsrs	r3, r3, #2
 800046a:	74fb      	strb	r3, [r7, #19]
				// Gives the value of which field in EXTICRx to configure
				temp2 = (pGPIOHandle->PinConfig.PinMode) % 5; 
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795a      	ldrb	r2, [r3, #5]
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <GPIO_Init+0x1a0>)
 8000472:	fba3 1302 	umull	r1, r3, r3, r2
 8000476:	0899      	lsrs	r1, r3, #2
 8000478:	460b      	mov	r3, r1
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	440b      	add	r3, r1
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	74bb      	strb	r3, [r7, #18]

				uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx_BASEADDR); // This macro will return the portCode corresponding to the baseaddress it receives.
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a20      	ldr	r2, [pc, #128]	; (8000508 <GPIO_Init+0x1a4>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d04f      	beq.n	800052c <GPIO_Init+0x1c8>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1e      	ldr	r2, [pc, #120]	; (800050c <GPIO_Init+0x1a8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d032      	beq.n	80004fc <GPIO_Init+0x198>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <GPIO_Init+0x1ac>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d02b      	beq.n	80004f8 <GPIO_Init+0x194>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <GPIO_Init+0x1b0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d024      	beq.n	80004f4 <GPIO_Init+0x190>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <GPIO_Init+0x1b4>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d01d      	beq.n	80004f0 <GPIO_Init+0x18c>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a18      	ldr	r2, [pc, #96]	; (800051c <GPIO_Init+0x1b8>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d016      	beq.n	80004ec <GPIO_Init+0x188>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a17      	ldr	r2, [pc, #92]	; (8000520 <GPIO_Init+0x1bc>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d00f      	beq.n	80004e8 <GPIO_Init+0x184>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a15      	ldr	r2, [pc, #84]	; (8000524 <GPIO_Init+0x1c0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d008      	beq.n	80004e4 <GPIO_Init+0x180>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <GPIO_Init+0x1c4>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d101      	bne.n	80004e0 <GPIO_Init+0x17c>
 80004dc:	2308      	movs	r3, #8
 80004de:	e026      	b.n	800052e <GPIO_Init+0x1ca>
 80004e0:	2300      	movs	r3, #0
 80004e2:	e024      	b.n	800052e <GPIO_Init+0x1ca>
 80004e4:	2307      	movs	r3, #7
 80004e6:	e022      	b.n	800052e <GPIO_Init+0x1ca>
 80004e8:	2306      	movs	r3, #6
 80004ea:	e020      	b.n	800052e <GPIO_Init+0x1ca>
 80004ec:	2305      	movs	r3, #5
 80004ee:	e01e      	b.n	800052e <GPIO_Init+0x1ca>
 80004f0:	2304      	movs	r3, #4
 80004f2:	e01c      	b.n	800052e <GPIO_Init+0x1ca>
 80004f4:	2303      	movs	r3, #3
 80004f6:	e01a      	b.n	800052e <GPIO_Init+0x1ca>
 80004f8:	2302      	movs	r3, #2
 80004fa:	e018      	b.n	800052e <GPIO_Init+0x1ca>
 80004fc:	2301      	movs	r3, #1
 80004fe:	e016      	b.n	800052e <GPIO_Init+0x1ca>
 8000500:	40013c00 	.word	0x40013c00
 8000504:	cccccccd 	.word	0xcccccccd
 8000508:	40020000 	.word	0x40020000
 800050c:	40020400 	.word	0x40020400
 8000510:	40020800 	.word	0x40020800
 8000514:	40020c00 	.word	0x40020c00
 8000518:	40021000 	.word	0x40021000
 800051c:	40021400 	.word	0x40021400
 8000520:	40021800 	.word	0x40021800
 8000524:	40021c00 	.word	0x40021c00
 8000528:	40022000 	.word	0x40022000
 800052c:	2300      	movs	r3, #0
 800052e:	747b      	strb	r3, [r7, #17]
				SYSCFG_PERIPH_CLOCK_EN();   												// Enable clock access to System Configuration Peripheral before you configure its register
 8000530:	4b60      	ldr	r3, [pc, #384]	; (80006b4 <GPIO_Init+0x350>)
 8000532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000534:	4a5f      	ldr	r2, [pc, #380]	; (80006b4 <GPIO_Init+0x350>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6453      	str	r3, [r2, #68]	; 0x44
				//								The starting position of the field
				//										|
				SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 800053c:	4a5e      	ldr	r2, [pc, #376]	; (80006b8 <GPIO_Init+0x354>)
 800053e:	7cfb      	ldrb	r3, [r7, #19]
 8000540:	3302      	adds	r3, #2
 8000542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000546:	7c79      	ldrb	r1, [r7, #17]
 8000548:	7cbb      	ldrb	r3, [r7, #18]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	4618      	mov	r0, r3
 8000552:	4959      	ldr	r1, [pc, #356]	; (80006b8 <GPIO_Init+0x354>)
 8000554:	7cfb      	ldrb	r3, [r7, #19]
 8000556:	4302      	orrs	r2, r0
 8000558:	3302      	adds	r3, #2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				
			// 3. Enable the respective EXTI line to allow interrupts to be send to the Processor via NVIC - using Interrupt Mask Register
		
			EXTI->IMR |= (1<< pGPIOHandle->PinConfig.PinNumber); // This will Enable the EXTI line corresponding to the Pin number. 
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <GPIO_Init+0x358>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4a53      	ldr	r2, [pc, #332]	; (80006bc <GPIO_Init+0x358>)
 8000570:	430b      	orrs	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
			
	}

	
	// 2. Configure slew rate of the GPIO pin
	temp = 0; 			// Reset temp, can use temp for next register's value.
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinSpeed << (2 * pGPIOHandle->PinConfig.PinNumber)); // Set the value to be assigned to the Speed register.
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	799b      	ldrb	r3, [r3, #6]
 800057c:	461a      	mov	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them
	//											| two bits dedicated for each pin.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->PinConfig.PinNumber));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2103      	movs	r1, #3
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	400a      	ands	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]

	// Setting the bits after clearing them first.
	pGPIOHandle->pGPIOx_BASEADDR->OSPEEDR |= temp; 		// Assign the value temp to the speed register of your specific GPIO port.
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6899      	ldr	r1, [r3, #8]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down resistor settings of the pin - to avoid floating state
	temp = 0;     		// Rest temp
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinPuPdControl << (2 * pGPIOHandle->PinConfig.PinNumber));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	79db      	ldrb	r3, [r3, #7]
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR &= ~(0x3 << (2* pGPIOHandle->PinConfig.PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68da      	ldr	r2, [r3, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	60da      	str	r2, [r3, #12]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->PUPDR |= temp;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68d9      	ldr	r1, [r3, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]

	// 4. configure the output type of the pin
	temp = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->PinConfig.PinOType << (pGPIOHandle->PinConfig.PinNumber)); // The Output type register has 1 bit dedicated for each pin of the port.
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a1b      	ldrb	r3, [r3, #8]
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]

	// Clear the bits before setting them.
	//										   | 1 bit field for each pin - check the Reference manual
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER &= ~(0x1 << (pGPIOHandle->PinConfig.PinNumber));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	2301      	movs	r3, #1
 800061e:	408b      	lsls	r3, r1
 8000620:	43db      	mvns	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	400a      	ands	r2, r1
 800062a:	605a      	str	r2, [r3, #4]
	// Set the bits
	pGPIOHandle->pGPIOx_BASEADDR->OTYPER |= temp;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6859      	ldr	r1, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	430a      	orrs	r2, r1
 800063a:	605a      	str	r2, [r3, #4]

	// 5. configue the alternate functionality of the GPIO pin.

	if(pGPIOHandle->PinConfig.PinMode == GPIO_PIN_ALTFUNC_MODE){ // Only configure the Alternate Functionality if the user has set the Pin mode to be in Alternate Function mode, else skip this part.
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d131      	bne.n	80006a8 <GPIO_Init+0x344>
				// The value that will be set in the 4 bits is placed by the user in the PinAltFunMode field of the GPIO_PinConfig_t structure.

			// First we need to decide which AFR register to use, this will decided using the PinNumber field set by the user in the GPIO_PinConfig_t structure.
			// Since, each pin is given 4 bits, and each AFR register has 8 pins dedicated, integer division of PinNumber by 8, will give the dedicated AFR register for the pin.
			uint8_t temp1, temp2; // reset temp  //You can also use uint8_t instead of uint32_t - how?? AFR is 32 bits long.
			temp1 = (pGPIOHandle->PinConfig.PinNumber) / 8;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	743b      	strb	r3, [r7, #16]

			// Now, to find the field of the dedicated AFR register to configure, you find the remainder of the PinNumber divided by 8, and shift the value in PinAltFunMode of field by 4 times that value. (4 times b/c each pin has 4 bits dedicated to it, in each AFR register)
			temp2 = (pGPIOHandle->PinConfig.PinNumber) % 8;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	f003 0307 	and.w	r3, r3, #7
 8000654:	73fb      	strb	r3, [r7, #15]

			// Clear the bits before setting them.
			//											   | 4-bit field, all 4 bits in Decimal number = 15 == F
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] &= ~(0xF << (4 *(temp2)));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	7c3a      	ldrb	r2, [r7, #16]
 800065c:	3208      	adds	r2, #8
 800065e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	220f      	movs	r2, #15
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	7c3a      	ldrb	r2, [r7, #16]
 8000676:	4001      	ands	r1, r0
 8000678:	3208      	adds	r2, #8
 800067a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// Set the bits
			// Now configure the physical address dedicated to setting the alternate functionality mode.
			pGPIOHandle->pGPIOx_BASEADDR->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4 *(temp2)));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7c3a      	ldrb	r2, [r7, #16]
 8000684:	3208      	adds	r2, #8
 8000686:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	7a5b      	ldrb	r3, [r3, #9]
 800068e:	461a      	mov	r2, r3
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	4618      	mov	r0, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7c3a      	ldrb	r2, [r7, #16]
 80006a0:	4301      	orrs	r1, r0
 80006a2:	3208      	adds	r2, #8
 80006a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			}*/

	}

}
 80006a8:	bf00      	nop
 80006aa:	371c      	adds	r7, #28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40013800 	.word	0x40013800
 80006bc:	40013c00 	.word	0x40013c00

080006c0 <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  

 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

    // Configure SPI_CR1 register first. 

    uint32_t tempReg = 0; // Set all the bits corresponding to CR1 register, followed by assigned this value to the CR1 register. 
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]

    // 1. Configure Device Mode
    
    tempReg |= ((pSPIHandle->SPIConfig.DeviceMode) << SPI_CR1_MSTR); // '2' Because bit 2 of CR1 is used for configuring Master or Slave mode. 
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]

    /* Not very clear --> Need to REVIEW spi communication type configurations */ 

    // 2. Configure Bus Configuration, i.e. SPI communication type
    if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_FULL_DUPLEX_MODE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d104      	bne.n	80006ec <SPI_Init+0x2c>
    {
        // Set BIDIMODE bit of CR1 as '0' -> Will configure 2-line unidirection data mode
        // resulting in separate line for RX and TX
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e021      	b.n	8000730 <SPI_Init+0x70>
        
        // RXONLY bit is by default = '0' which means Receive and Transmit.
    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_HALF_DUPLEX_MODE){
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d104      	bne.n	80006fe <SPI_Init+0x3e>
        // Set BIDIMODE bit of CR1 as '1' -> will configure 1-line bidirection data mode, same line for RX and TX 
        tempReg |= (1 << SPI_CR1_BIDIMODE); 
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e018      	b.n	8000730 <SPI_Init+0x70>

    }else if (pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_TX_ONLY){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b03      	cmp	r3, #3
 8000704:	d108      	bne.n	8000718 <SPI_Init+0x58>

        // Clear BIDIMODE bit of CR1 to '0' -> 2-line bidirection data mode, different line for RX & TX
        tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800070c:	60fb      	str	r3, [r7, #12]
        // Clear RXONLY bit to '0', basically configuring Full-duplex mode with Transmission ONLY, and ignoring Receive 
        tempReg &= ~(1<<SPI_CR1_RXONLY);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00b      	b.n	8000730 <SPI_Init+0x70>
        

    }else if(pSPIHandle->SPIConfig.BusConfig == SPI_IN_SIMPLEX_RX_ONLY){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d107      	bne.n	8000730 <SPI_Init+0x70>
        // Clear BIDIMODE bit of CR1 to '0' -> 2-line unidirectional data mode, i.e. Full duplex SPI communication type
        tempReg &= ~(1<<SPI_CR1_BIDIMODE); 
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000726:	60fb      	str	r3, [r7, #12]
        // Set RXONLY bit to force clock generation,i.e. if the device is master, you want to only RECEIVE.
        tempReg |= (1<<SPI_CR1_RXONLY);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800072e:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure Serial Clock but setting Baudrate. 
    tempReg |= ((pSPIHandle->SPIConfig.SclkSpeed) << SPI_CR1_BR);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	799b      	ldrb	r3, [r3, #6]
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4313      	orrs	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]

    // 4. Configure Data Frame Format
    tempReg |= ((pSPIHandle->SPIConfig.DataFrameFormat) << SPI_CR1_DFF); 
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	79db      	ldrb	r3, [r3, #7]
 8000742:	02db      	lsls	r3, r3, #11
 8000744:	461a      	mov	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

    // 5. Configure ClockPolarity (CPOL)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPolarity) << SPI_CR1_CPOL); 
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4313      	orrs	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]

    // 6. Configure ClockPhase (CPHA)
    tempReg |= ((pSPIHandle->SPIConfig.ClockPhase) << SPI_CR1_CPHA); 
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7a5b      	ldrb	r3, [r3, #9]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4313      	orrs	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]

    // 7. Configure Software Slave Management 
    tempReg |= ((pSPIHandle->SPIConfig.SlaveManagementType) << SPI_CR1_SSM); 
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7a9b      	ldrb	r3, [r3, #10]
 800076a:	025b      	lsls	r3, r3, #9
 800076c:	461a      	mov	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4313      	orrs	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]

    // Assign tempReg to your SPIx's CR1 register.
    pSPIHandle->pSPIx_BASEADDR->CR1 = tempReg;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	601a      	str	r2, [r3, #0]

}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SPI_PeripheralControl>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable == ENABLE){
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d106      	bne.n	80007a6 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
    }else if(Enable_Disable == DISABLE){
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 80007a4:	e008      	b.n	80007b8 <SPI_PeripheralControl+0x32>
    }else if(Enable_Disable == DISABLE){
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <SPI_PeripheralControl+0x32>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <SPI_SSIConfig>:
 *
 * @return            -  None 
 *
 * @Note              - None
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t Enable_Disable){
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	70fb      	strb	r3, [r7, #3]

    if(Enable_Disable==ENABLE){
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d106      	bne.n	80007e2 <SPI_SSIConfig+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	601a      	str	r2, [r3, #0]
    }else if(Enable_Disable==DISABLE){
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
    }
}
 80007e0:	e008      	b.n	80007f4 <SPI_SSIConfig+0x32>
    }else if(Enable_Disable==DISABLE){
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d105      	bne.n	80007f4 <SPI_SSIConfig+0x32>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <SPI_GetFlagStatus>:
 *
 * @return            -  Either '1' or '0' 
 *
 * @Note              - None
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

    if(pSPIx->SR & FlagName){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4013      	ands	r3, r2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 8000814:	2301      	movs	r3, #1
 8000816:	e000      	b.n	800081a <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SPI_SendData>:
 *                       This is a "Blocking" implementation of SPI send, you wait till TXE is set, before you can push data into the Tx Buffer.
 *                        It is also called Polling method, because we're waiting till Transmit buffer gets empty, the function will stay there.                        
 *                        There are problems with this method of implementation, what if something wrong with the hardware and the TXE flag is NEVER set, then the system 
                        will be stuck here forever, this when you need a WATCHDOG module to reset the system if it becomes non-responsive for a certain time period. 
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLength){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]

    while(DataLength > 0){
 8000830:	e027      	b.n	8000882 <SPI_SendData+0x5e>
        //1. Wait until TXE is set
                    // while( !(pSPIx->SR & (1 << 1)) ); // Checking if TXE flag is set in the Status Register, implement the condition using a function defined in this source. 
        while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG));  // Same as above statement, but a much cleaner method of implementation. 
 8000832:	bf00      	nop
 8000834:	2102      	movs	r1, #2
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f7ff ffe1 	bl	80007fe <SPI_GetFlagStatus>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f8      	bne.n	8000834 <SPI_SendData+0x10>
    
        //2. Check DFF bit CR1 to determine how many bytes to upload in the DR, which will push the data bytes to the Tx Buffer
        if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00e      	beq.n	800086c <SPI_SendData+0x48>

            // If bit is set, then DFF = 16-bit. You need to upload 2 bytes of data into the DR register. 
            //             The type casting here will convert the 8-bit pointer to a 16-bit pointer, allowing to dereference 2-bytes of consecutive data. Without the uint16_t* typecast, you would be dereferencing a byte of data. 
            //                  |
            pSPIx->DR = *((uint16_t *)pTxBuffer);
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	60da      	str	r2, [r3, #12]
             
            // Pushed 2 bytes of Data into Tx Buffer, so reduced length by 2 bytes.
            DataLength--; 
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
            DataLength--; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
            // Move pointer 2 bytes ahead
            (uint16_t *)pTxBuffer++; // This will make the pointer point to the start of the 16-bits to send.
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e00a      	b.n	8000882 <SPI_SendData+0x5e>

        }else
        {
            // DFF = 8-bit, you need to upload a byte at a time. 
            pSPIx->DR = *(pTxBuffer); // Don't need typecasting as pointer is of 8-bit type. 
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	60da      	str	r2, [r3, #12]
            DataLength--; 
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3b01      	subs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
            pTxBuffer++; 
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3301      	adds	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
    while(DataLength > 0){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1d4      	bne.n	8000832 <SPI_SendData+0xe>
        }
        
    }

}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <__libc_init_array>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4e0d      	ldr	r6, [pc, #52]	; (80008c8 <__libc_init_array+0x38>)
 8000894:	4c0d      	ldr	r4, [pc, #52]	; (80008cc <__libc_init_array+0x3c>)
 8000896:	1ba4      	subs	r4, r4, r6
 8000898:	10a4      	asrs	r4, r4, #2
 800089a:	2500      	movs	r5, #0
 800089c:	42a5      	cmp	r5, r4
 800089e:	d109      	bne.n	80008b4 <__libc_init_array+0x24>
 80008a0:	4e0b      	ldr	r6, [pc, #44]	; (80008d0 <__libc_init_array+0x40>)
 80008a2:	4c0c      	ldr	r4, [pc, #48]	; (80008d4 <__libc_init_array+0x44>)
 80008a4:	f000 f818 	bl	80008d8 <_init>
 80008a8:	1ba4      	subs	r4, r4, r6
 80008aa:	10a4      	asrs	r4, r4, #2
 80008ac:	2500      	movs	r5, #0
 80008ae:	42a5      	cmp	r5, r4
 80008b0:	d105      	bne.n	80008be <__libc_init_array+0x2e>
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008b8:	4798      	blx	r3
 80008ba:	3501      	adds	r5, #1
 80008bc:	e7ee      	b.n	800089c <__libc_init_array+0xc>
 80008be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008c2:	4798      	blx	r3
 80008c4:	3501      	adds	r5, #1
 80008c6:	e7f2      	b.n	80008ae <__libc_init_array+0x1e>
 80008c8:	08000900 	.word	0x08000900
 80008cc:	08000900 	.word	0x08000900
 80008d0:	08000900 	.word	0x08000900
 80008d4:	08000904 	.word	0x08000904

080008d8 <_init>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	bf00      	nop
 80008dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008de:	bc08      	pop	{r3}
 80008e0:	469e      	mov	lr, r3
 80008e2:	4770      	bx	lr

080008e4 <_fini>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	bf00      	nop
 80008e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ea:	bc08      	pop	{r3}
 80008ec:	469e      	mov	lr, r3
 80008ee:	4770      	bx	lr
